<?php
///////////////////////////////////////////////////////////////////////////
// Version: HOSTER-30.3.1
// Copyright 2018-2020 CloudLinux Software Inc.
///////////////////////////////////////////////////////////////////////////

ini_set('memory_limit', '1G');
ini_set('xdebug.max_nesting_level', 500);

define('SHORT_PHP_TAG', strtolower(ini_get('short_open_tag')) == 'on' || strtolower(ini_get('short_open_tag')) == 1);

//////////////////////////////////////////////////////////////////////////
$vars = new Variables();
$vars->users = new UserList();

$lang = 'RU';
$snum = '';

if (isCli()) {
    if (strpos('--eng', $argv[$argc - 1]) !== false) {
        $lang = 'EN';
    }
} else {
    define('NEED_REPORT', true);
}

Translate::setLang($lang);

// put 1 for expert mode, 0 for basic check and 2 for paranoid mode
// установите 1 для режима "Обычное сканирование", 0 для быстрой проверки и 2 для параноидальной проверки (диагностика при лечении сайтов)
define('AI_EXPERT_MODE', 2);

define('AI_HOSTER', 1);

define('CLOUD_ASSIST_LIMIT', 5000);

$defaults = array(
    'path'                  => __DIR__,
    'scan_all_files'        => (AI_EXPERT_MODE == 2), // full scan (rather than just a .js, .php, .html, .htaccess)
    'scan_delay'            => 0, // delay in file scanning to reduce system load
    'max_size_to_scan'      => '650K',
    'max_size_to_cloudscan' => '650K',
    'no_rw_dir'             => 0,
    'skip_ext'              => '',
    'skip_cache'            => false,
    'report_mask'           => JSONReport::REPORT_MASK_FULL,
    'use_template_in_path'  => false,
);

define('DEBUG_MODE', 0);
define('DEBUG_PERFORMANCE', 0);

define('AIBOLIT_START_TIME', time());
define('START_TIME', microtime(true));

define('DIR_SEPARATOR', '/');

define('AIBOLIT_MAX_NUMBER', 200);

define('MIN_FILE_SIZE_FOR_CHECK', 14); //14b - The minimum possible file size for the initial checking
define('MAX_FILE_SIZE_FOR_CHECK', 268435456); //256Mb - The maximum possible file size for the initial checking


define('DOUBLECHECK_FILE', 'AI-BOLIT-DOUBLECHECK.php');

if ((isset($_SERVER['OS']) && stripos('Win', $_SERVER['OS']) !== false)) {
    define('DIR_SEPARATOR', '\\');
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if (!(function_exists("file_put_contents") && is_callable("file_put_contents"))) {
    echo "#####################################################\n";
    echo "file_put_contents() is disabled. Cannot proceed.\n";
    echo "#####################################################\n";
    exit;
}

define('AI_VERSION', 'HOSTER-30.3.1');

////////////////////////////////////////////////////////////////////////////

$l_Res = '';

$g_SpecificExt = false;

$g_UpdatedJsonLog      = 0;
$g_FileInfo            = array();
$g_Iframer             = array();
$g_PHPCodeInside       = array();
$g_Base64              = array();
$g_HeuristicDetected   = array();
$g_HeuristicType       = array();
$g_UnixExec            = array();
$g_UnsafeFilesFound    = array();
$g_HiddenFiles         = array();

$g_RegExpStat = array();

error_reporting(E_ALL ^ E_NOTICE ^ E_WARNING);
srand(time());

set_time_limit(0);
ini_set('max_execution_time', '900000');
ini_set('realpath_cache_size', '16M');
ini_set('realpath_cache_ttl', '1200');
ini_set('pcre.backtrack_limit', '1000000');
ini_set('pcre.recursion_limit', '200000');
ini_set('pcre.jit', '1');

$filter = new FileFilter();

$finder = new Finder($filter);

if (!function_exists('stripos')) {
    function stripos($par_Str, $par_Entry, $Offset = 0) {
        return strpos(strtolower($par_Str), strtolower($par_Entry), $Offset);
    }
}

/**
 * Determine php script is called from the command line interface
 * @return bool
 */
function isCli() {
    return PHP_SAPI == 'cli';
}

/**
 * Print to console
 * @param mixed $text
 * @param bool $add_lb Add line break
 * @return void
 */
function stdOut($text, $add_lb = true) {
    if (!isCli()) {
        return;
    }

    if (is_bool($text)) {
        $text = $text ? 'true' : 'false';
    } else if (is_null($text)) {
        $text = 'null';
    }
    if (!is_scalar($text)) {
        $text = print_r($text, true);
    }

    if ((!BOOL_RESULT) && (!JSON_STDOUT)) {
        @fwrite(STDOUT, $text . ($add_lb ? "\n" : ''));
    }
}

/**
 * Print progress
 *
 * @param int $num Current file
 * @param     $par_File
 * @param     $vars
 */
function printProgress($num, $par_File, $vars) {
    global $g_Base64, $g_Iframer, $g_UpdatedJsonLog, $g_AddPrefix, $g_NoPrefix;

    $total_files     = $vars->foundTotalFiles;
    $elapsed_time    = microtime(true) - START_TIME;
    $percent         = number_format($total_files ? $num * 100 / $total_files : 0, 1);
    $stat            = '';
    $left_files      = 0;
    $left_time       = 0;
    $elapsed_seconds = 0;

    if ($elapsed_time >= 1) {
        $elapsed_seconds = round($elapsed_time, 0);
        $fs              = floor($num / $elapsed_seconds);
        $left_files      = $total_files - $num;
        if ($fs > 0) {
            $left_time = ($left_files / $fs); //ceil($left_files / $fs);
            $stat      = ' [Avg: ' . round($fs, 2) . ' files/s' . ($left_time > 0 ? ' Left: ' . AibolitHelpers::seconds2Human($left_time) : '') . '] [Mlw:' . (count($vars->criticalPHP) + count($g_Base64) + count($vars->warningPHP)) . '|' . (count($vars->criticalJS) + count($g_Iframer) + count($vars->phishing)) . ']';
        }
    }

    $l_FN = substr($par_File, -60);

    $text = "$percent% [$l_FN] $num of {$total_files}. " . $stat;
    $text = str_pad($text, 160, ' ', STR_PAD_RIGHT);
    stdOut(str_repeat(chr(8), 160) . $text, false);


    $data = array(
        'self' => __FILE__,
        'started' => AIBOLIT_START_TIME,
        'updated' => time(),
        'progress' => $percent,
        'time_elapsed' => $elapsed_seconds,
        'time_left' => round($left_time),
        'files_left' => $left_files,
        'files_total' => $total_files,
        'current_file' => substr($g_AddPrefix . str_replace($g_NoPrefix, '', $par_File), -160)
    );

    if (function_exists('aibolit_onProgressUpdate')) {
        aibolit_onProgressUpdate($data);
    }

    if (defined('PROGRESS_LOG_FILE') && (time() - $g_UpdatedJsonLog > 1)) {
        if (function_exists('json_encode')) {
            file_put_contents(PROGRESS_LOG_FILE, json_encode($data));
        } else {
            file_put_contents(PROGRESS_LOG_FILE, serialize($data));
        }

        $g_UpdatedJsonLog = time();
    }

    if (defined('SHARED_MEMORY')) {
        shmop_write(SHARED_MEMORY, str_repeat("\0", shmop_size(SHARED_MEMORY)), 0);
        if (function_exists('json_encode')) {
            shmop_write(SHARED_MEMORY, json_encode($data), 0);
        } else {
            shmop_write(SHARED_MEMORY, serialize($data), 0);
        }
    }
}

if (isCli()) {

    $cli_options = array(
        'y' => 'deobfuscate',
        'c:' => 'avdb:',
        'm:' => 'memory:',
        's:' => 'size:',
        'a' => 'all',
        'd:' => 'delay:',
        'l:' => 'list:',
        'r:' => 'report:',
        'f' => 'fast',
        'j:' => 'file:',
        'p:' => 'path:',
        'q' => 'quite',
        'e:' => 'cms:',
        'x:' => 'mode:',
        'k:' => 'skip:',
        'n' => 'sc',
        'o:' => 'json_report:',
        't:' => 'php_report:',
        'z:' => 'progress:',
        'g:' => 'handler:',
        'b' => 'smart',
        'u:' => 'username:',
        'h' => 'help'
    );

    $cli_longopts = array(
        'deobfuscate',
        'avdb:',
        'cmd:',
        'noprefix:',
        'addprefix:',
        'scan:',
        'one-pass',
        'smart',
        'with-2check',
        'skip-cache',
        'username:',
        'no-html',
        'json-stdout',
        'listing:',
        'encode-b64-fn',
        'cloud-assist:',
        'cloudscan-size:',
        'with-suspicious',
        'rapid-account-scan:',
        'rapid-account-scan-type:',
        'extended-report',
        'factory-config:',
        'shared-mem-progress:',
        'create-shared-mem',
        'max-size-scan-bytes:',
        'input-fn-b64-encoded',
        'use-heuristics',
        'use-heuristics-suspicious',
        'resident',
        'detached:',
        'log:',
        'log-level:',
        'use-template-in-path',
        'ignore-list:',
        'ignore-filenames:',
        'only-filepaths:',
        'skip-files-older:',
        'skip-root-owner',
        'skip-system-owner',
        'follow-symlink',
        'ignore-quarantine',
        'quiet',
        'use-filters',
        'csv_report:',
        'no-users',
        'stat',
    );

    $cli_longopts = array_merge($cli_longopts, array_values($cli_options));

    $reports = [];

    $options = getopt(implode('', array_keys($cli_options)), $cli_longopts);

    if (isset($options['h']) || isset($options['help'])) {
        $memory_limit = ini_get('memory_limit');
        echo <<<HELP
Revisium AI-Bolit - an Intelligent Malware File Scanner for Websites.

Usage: php {$_SERVER['PHP_SELF']} [OPTIONS] [PATH]
Current default path is: {$defaults['path']}

  -j, --file=FILE                       Full path to single file to check
  -p, --path=PATH                       Directory path to scan, by default the file directory is used
                                        Current path: {$defaults['path']}
      --use-template-in-path            Use template in path(-p, --path). For example: /home*/*/public_html
  -p, --listing=FILE                    Scan files from the listing. E.g. --listing=/tmp/myfilelist.txt
                                            Use --listing=stdin to get listing from stdin stream
      --extended-report                 To expand the report
      --ignore-list=FILE                This file will be contain the list of ignored files when scanning. 
                                        The files are base64-encoded and occupy one line for one file.
      --ignore-filenames=<templates>    Skip files with the same name by template. Example: *.php,*abc.abc,config.*
      --only-filepaths=<templates>      Take only the paths matching this pattern. Example: /check/*.php,*.abc
      --skip-files-older=UNIXTIME       If set then we ignore the files created or modified earlier than the specified date
      --skip-root-owner                 If set, we skip root's owner files
      --skip-system-owner               If set, we skip system's owner files
      --follow-symlink                  If set then we follow symlink
      --ignore-quarantine               If set, we ignore the files in the folder ".imunify.quarantined" if root is owner of it
  -x, --mode=INT                        Set scan mode. 0 - for basic, 1 - for expert and 2 for paranoic.
  -k, --skip=jpg,...                    Skip specific extensions. E.g. --skip=jpg,gif,png,xls,pdf
      --scan=php,...                    Scan only specific extensions. E.g. --scan=php,htaccess,js
      --cloud-assist=TOKEN              Enable cloud assisted scanning. Disabled by default.
      --with-suspicious                 Detect suspicious files. Disabled by default.
      --rapid-account-scan=<dir>        Enable rapid account scan. Use <dir> for base db dir. Need to set only root permissions(700)
      --rapid-account-scan-type=<type>  Type rapid account scan. <type> = NONE|ALL|SUSPICIOUS, def:SUSPICIOUS
      --use-heuristics                  Enable heuristic algorithms and mark found files as malicious.
      --use-heuristics-suspicious       Enable heuristic algorithms and mark found files as suspicious.
  -r, --report=PATH
  -o, --json_report=FILE                Full path to create json-file with a list of found malware
      --csv_report=FILE                 Full path to create csv-file with a list of found malware
  -l, --list=FILE                       Full path to create plain text file with a list of found malware
      --no-html                         Disable HTML report
      --no-users                        Disable users list in report
      --stat                            Add stat() data to files in report
      --encode-b64-fn                   Encode file names in a report with base64 (for internal usage)
      --input-fn-b64-encoded            Base64 encoded input filenames in listing or stdin
      --smart                           Enable smart mode (skip cache files and optimize scanning)
  -m, --memory=SIZE                     Maximum amount of memory a script may consume. Current value: $memory_limit
                                        Can take shorthand byte values (1M, 1G...)
  -s, --size=SIZE                       Scan files are smaller than SIZE with signatures. 0 - All files. Current value: {$defaults['max_size_to_scan']}
      --max-size-scan-bytes=SIZE        Scan first <bytes> for large(can set by --size) files with signatures.
      --cloudscan-size                  Scan files are smaller than SIZE with cloud assisted scan. 0 - All files. Current value: {$defaults['max_size_to_cloudscan']}
  -d, --delay=INT                       Delay in milliseconds when scanning files to reduce load on the file system (Default: 1)
  -a, --all                             Scan all files (by default scan. js,. php,. html,. htaccess)
      --one-pass                        Do not calculate remaining time
      --with-2check                     Create or use AI-BOLIT-DOUBLECHECK.php file

  -z, --progress=FILE                   Runtime progress of scanning, saved to the file, full path required. 
      --shared-mem-progress=<ID>        Runtime progress of scanning, saved to the shared memory <ID>.
      --create-shared-mem               Need to create shared memory segment <ID> for --shared-mem-progress. 
  -u, --username=<username>             Run scanner with specific user id and group id, e.g. --username=www-data
  -g, --hander=FILE                     External php handler for different events, full path to php file required.
      --cmd="command [args...]"         Run command after scanning

      --help                            Display this help and exit

* Mandatory arguments listed below are required for both full and short way of usage.

HELP;
        exit;
    }

    $l_FastCli = false;

    if ((isset($options['memory']) && !empty($options['memory']) && ($memory = $options['memory'])) || (isset($options['m']) && !empty($options['m']) && ($memory = $options['m']))) {
        $memory = AibolitHelpers::getBytes($memory);
        if ($memory > 0) {
            $defaults['memory_limit'] = $memory;
            ini_set('memory_limit', $memory);
        }
    }

    if (isset($options['no-users'])) {
        $vars->users = null;
    }


    $avdb = '';
    if ((isset($options['avdb']) && !empty($options['avdb']) && ($avdb = $options['avdb'])) || (isset($options['c']) && !empty($options['c']) && ($avdb = $options['c']))) {
        if (file_exists($avdb)) {
            $defaults['avdb'] = $avdb;
        }
    }

    if ((isset($options['file']) && !empty($options['file']) && ($file = $options['file']) !== false) || (isset($options['j']) && !empty($options['j']) && ($file = $options['j']) !== false)) {
        define('SCAN_FILE', $file);
    }


    if (isset($options['deobfuscate']) || isset($options['y'])) {
        define('AI_DEOBFUSCATE', true);
    }

    if ((isset($options['list']) && !empty($options['list']) && ($file = $options['list']) !== false) || (isset($options['l']) && !empty($options['l']) && ($file = $options['l']) !== false)) {
        $reports[PlainReport::class] = $file;
    }

    if(isset($options['with-2check'])) {
        $reports[DoublecheckReport::class] = DOUBLECHECK_FILE;
    }

    if ((isset($options['listing']) && !empty($options['listing']) && ($listing = $options['listing']) !== false)) {

        if (file_exists($listing) && is_file($listing) && is_readable($listing)) {
            define('LISTING_FILE', $listing);
        }

        if ($listing == 'stdin') {
            define('LISTING_FILE', $listing);
        }
    }
    
    if ((isset($options['ignore-list']) && !empty($options['ignore-list']) && ($ignore_list_file = $options['ignore-list']) !== false)) {
        if (file_exists($ignore_list_file) && is_file($ignore_list_file) && is_readable($ignore_list_file)) {
            $filter->setIgnoreListFile($ignore_list_file);
        }
    }
    
    if ((isset($options['ignore-filenames']) && !empty($options['ignore-filenames']) && ($ignore_filenames = $options['ignore-filenames']) !== false)) {
        $filter->setIgnoreFilenames($ignore_filenames);
    }
    
    
    if ((isset($options['only-filepaths']) && !empty($options['only-filepaths']) && ($only_filepathes = $options['only-filepaths']) !== false)) {
        $filter->setOnlyFilepaths($only_filepathes);
    }
    
    
    if ((isset($options['skip-files-older']) && !empty($options['skip-files-older']) && ($skip_files_older = $options['skip-files-older']) !== false)) {
        $filter->setSkipFilesOlder($skip_files_older);
    }
    
    if (isset($options['skip-root-owner'])) {
        $filter->setSkipRootOwner();
    }

    if (isset($options['skip-system-owner'])) {
        $max_min_uid = getMaxMinUid();
        $vars->maxMinUid = $max_min_uid;
        $filter->setSkipSystemOwner($max_min_uid);
        unset($max_min_uid);
    }

    if (isset($options['follow-symlink'])) {
        $filter->setFollowSymlink();
    }
    
    if (isset($options['ignore-quarantine'])) {
        $filter->setIgnoreQuarantine();
    }

    if (isset($options['use-filters'])) {
        $filter->setImunifyFilters();
    }
    
    if ((isset($options['json_report']) && !empty($options['json_report']) && ($file = $options['json_report']) !== false) || (isset($options['o']) && !empty($options['o']) && ($file = $options['o']) !== false)) {
        $reports[JSONReport::class] = $file;

        if (!function_exists('json_encode')) {
            die('json_encode function is not available. Enable json extension in php.ini');
        }
    }

    if (isset($options['csv_report']) && !empty($options['csv_report']) && ($file = $options['csv_report']) !== false)  {
        $reports[CSVReport::class] = $file;
    }

    if ((isset($options['php_report']) && !empty($options['php_report']) && ($file = $options['php_report']) !== false) || (isset($options['t']) && !empty($options['t']) && ($file = $options['t']) !== false)) {
        $reports[PHPReport::class] = $file;
    }

    $env_log = getenv('AIBOLIT_RESIDENT_LOG');
    $env_log_level = getenv('AIBOLIT_RESIDENT_LOG_LEVEL');

    if ((isset($options['log']) && !empty($options['log']) && ($log_file = $options['log']) !== false) || ($env_log !== false && ($log_file = $env_log) !== false)) {
        define('LOG_FILE', $log_file);
    }

    if ((isset($options['log-level']) && !empty($options['log-level']) && ($log_level = $options['log-level']) !== false) || ($env_log_level !== false && ($log_level = $env_log_level) !== false)) {
        define('LOG_LEVEL', $log_level);
    }

    if (defined('LOG_FILE') && !defined('LOG_LEVEL')) {
        define('LOG_LEVEL', 'INFO');
    }

    if ((isset($options['handler']) && !empty($options['handler']) && ($file = $options['handler']) !== false) || (isset($options['g']) && !empty($options['g']) && ($file = $options['g']) !== false)) {
        if (file_exists($file)) {
            define('AIBOLIT_EXTERNAL_HANDLER', $file);
        }
    }

    if ((isset($options['progress']) && !empty($options['progress']) && ($file = $options['progress']) !== false) || (isset($options['z']) && !empty($options['z']) && ($file = $options['z']) !== false)) {
        define('PROGRESS_LOG_FILE', $file);
    }

    if (isset($options['create-shared-mem'])) {
        define('CREATE_SHARED_MEMORY', true);
    } else {
        define('CREATE_SHARED_MEMORY', false);
    }

    if (isset($options['shared-mem-progress']) && !empty($options['shared-mem-progress']) && ($sh_mem = $options['shared-mem-progress']) !== false) {
        if (CREATE_SHARED_MEMORY) {
            @$shid = shmop_open((int)$sh_mem, "n", 0666, 5000);
        } else {
            @$shid = shmop_open((int)$sh_mem, "w", 0, 0);
        }
        if (!empty($shid)) {
            define('SHARED_MEMORY', $shid);
        } else {
            die('Error with shared-memory.');
        }
    }

    if ((isset($options['size']) && ($size = $options['size']) !== false) || (isset($options['s']) && ($size = $options['s']) !== false)) {
        $size                         = AibolitHelpers::getBytes($size);
        $defaults['max_size_to_scan'] = $size > 0 ? $size : 0;
    }

    if (isset($options['cloudscan-size']) && !empty($options['cloudscan-size']) && ($cloudscan_size = $options['cloudscan-size']) !== false) {
        $cloudscan_size                         = AibolitHelpers::getBytes($cloudscan_size);
        $defaults['max_size_to_cloudscan'] = $cloudscan_size > 0 ? $cloudscan_size : 0;
    }

    if (isset($options['max-size-scan-bytes']) && !empty($options['max-size-scan-bytes'])) {
        define('MAX_SIZE_SCAN_BYTES', AibolitHelpers::getBytes($options['max-size-scan-bytes']));
    } else {
        define('MAX_SIZE_SCAN_BYTES', 0);
    }

    if ((isset($options['username']) && !empty($options['username']) && ($username = $options['username']) !== false) || (isset($options['u']) && !empty($options['u']) && ($username = $options['u']) !== false)) {

        if (!empty($username) && ($info = posix_getpwnam($username)) !== false) {
            posix_setgid($info['gid']);
            posix_setuid($info['uid']);
            $defaults['userid']  = $info['uid'];
            $defaults['groupid'] = $info['gid'];
        } else {
            echo ('Invalid username');
            exit(-1);
        }
    }

    if ((isset($options['file']) && !empty($options['file']) && ($file = $options['file']) !== false) || ((isset($options['j']) && !empty($options['j']) && ($file = $options['j']) !== false) && (isset($options['q'])))) {
        $BOOL_RESULT = true;
    }

    if (isset($options['json-stdout'])) {
        define('JSON_STDOUT', true);
    } else {
        define('JSON_STDOUT', false);
    }

    if (isset($options['f'])) {
        $l_FastCli = true;
    }

    if (isset($options['q']) || isset($options['quite']) || isset($options['quiet'])) {
        $BOOL_RESULT = true;
    }

    if (isset($options['x'])) {
        define('AI_EXPERT', $options['x']);
    } else if (isset($options['mode'])) {
        define('AI_EXPERT', $options['mode']);
    } else {
        define('AI_EXPERT', AI_EXPERT_MODE);
    }

    if (AI_EXPERT < 2) {
        $g_SpecificExt              = true;
        $defaults['scan_all_files'] = false;
    } else {
        $defaults['scan_all_files'] = true;
    }

    define('BOOL_RESULT', $BOOL_RESULT);

    if ((isset($options['delay']) && !empty($options['delay']) && ($delay = $options['delay']) !== false) || (isset($options['d']) && !empty($options['d']) && ($delay = $options['d']) !== false)) {
        $delay = (int) $delay;
        if (!($delay < 0)) {
            $defaults['scan_delay'] = $delay;
        }
    }

    if ((isset($options['skip']) && !empty($options['skip']) && ($ext_list = $options['skip']) !== false) || (isset($options['k']) && !empty($options['k']) && ($ext_list = $options['k']) !== false)) {
        $defaults['skip_ext'] = $ext_list;
    }

    if (isset($options['n']) || isset($options['skip-cache'])) {
        $defaults['skip_cache'] = true;
    }

    if (isset($options['scan'])) {
        $ext_list = strtolower(trim($options['scan'], " ,\t\n\r\0\x0B"));
        if ($ext_list != '') {
            $l_FastCli        = true;
            $filter->setSensitiveExt($ext_list);
            $g_SensitiveFiles = $filter->getSensitiveExt();
            $g_SpecificExt = true;
        }
    }
    
    if (isset($options['cloud-assist'])) {
        define('CLOUD_ASSIST_TOKEN', $options['cloud-assist']);
    }
    

    if (isset($options['rapid-account-scan'])) {
        define('RAPID_ACCOUNT_SCAN', $options['rapid-account-scan']);
    }
    
    if (defined('RAPID_ACCOUNT_SCAN')) {
        if (isset($options['rapid-account-scan-type'])) {
            define('RAPID_ACCOUNT_SCAN_TYPE', $options['rapid-account-scan-type']);
        }
        else {
            define('RAPID_ACCOUNT_SCAN_TYPE', 'SUSPICIOUS');
        }
    }

    if (isset($options['with-suspicious'])) {
        define('AI_EXTRA_WARN', true);
    }

    if (isset($options['extended-report'])) {
        define('EXTENDED_REPORT', true);
    }

    if (isset($options['all'])||isset($options['a'])) {
        $defaults['scan_all_files'] = true;
        $g_SpecificExt              = false;
    }

    if (isset($options['cms'])) {
        define('CMS', $options['cms']);
    } else if (isset($options['e'])) {
        define('CMS', $options['e']);
    }


    if (!defined('SMART_SCAN')) {
        define('SMART_SCAN', 0);
    }

    if (!defined('AI_DEOBFUSCATE')) {
        define('AI_DEOBFUSCATE', false);
    }

    if (!defined('AI_EXTRA_WARN')) {
        define('AI_EXTRA_WARN', false);
    }


    $l_SpecifiedPath = false;
    if ((isset($options['path']) && !empty($options['path']) && ($path = $options['path']) !== false) 
        || (isset($options['p']) && !empty($options['p']) && ($path = $options['p']) !== false)
    ) {
        $defaults['path'] = $path;
        $l_SpecifiedPath  = true;
    }
    
    $defaults['use_template_in_path'] = isset($options['use-template-in-path']);
    
    if (isset($options['noprefix']) && !empty($options['noprefix']) && ($g_NoPrefix = $options['noprefix']) !== false) {
    } else {
        $g_NoPrefix = '';
    }

    if (isset($options['addprefix']) && !empty($options['addprefix']) && ($g_AddPrefix = $options['addprefix']) !== false) {
    } else {
        $g_AddPrefix = '';
    }

    if (isset($options['use-heuristics'])) {
        define('USE_HEURISTICS', true);
    }

    if (isset($options['use-heuristics-suspicious'])) {
        define('USE_HEURISTICS_SUSPICIOUS', true);
    }

    if (defined('USE_HEURISTICS') && defined('USE_HEURISTICS_SUSPICIOUS')) {
        die('You can not use --use-heuristic and --use-heuristic-suspicious the same time.');
    }

    $l_SuffixReport = str_replace('/var/www', '', $defaults['path']);
    $l_SuffixReport = str_replace('/home', '', $l_SuffixReport);
    $l_SuffixReport = preg_replace('~[/\\\.\s]~', '_', $l_SuffixReport);
    $l_SuffixReport .= "-" . rand(1, 999999);

    if ((isset($options['report']) && ($report = $options['report']) !== false) || (isset($options['r']) && ($report = $options['r']) !== false)) {
        $report = str_replace('@PATH@', $l_SuffixReport, $report);
        $report = str_replace('@RND@', rand(1, 999999), $report);
        $report = str_replace('@DATE@', date('d-m-Y-h-i'), $report);
        define('REPORT', $report);
        define('NEED_REPORT', true);
    }

    if (isset($options['no-html'])) {
        define('REPORT', 'no@email.com');
    }

    defined('ENCODE_FILENAMES_WITH_BASE64') || define('ENCODE_FILENAMES_WITH_BASE64', isset($options['encode-b64-fn']));
    
    defined('INPUT_FILENAMES_BASE64_ENCODED') || define('INPUT_FILENAMES_BASE64_ENCODED', isset($options['input-fn-b64-encoded']));

    defined('REPORT') || define('REPORT', 'AI-BOLIT-REPORT-' . $l_SuffixReport . '-' . date('d-m-Y_H-i') . '.html');

    $last_arg = max(1, sizeof($_SERVER['argv']) - 1);
    if (isset($_SERVER['argv'][$last_arg])) {
        $path = $_SERVER['argv'][$last_arg];
        if (substr($path, 0, 1) != '-' 
            && (substr($_SERVER['argv'][$last_arg - 1], 0, 1) != '-'
                || array_key_exists(substr($_SERVER['argv'][$last_arg - 1], -1), $cli_options)
            )
        ) {
            $defaults['path'] = $path;
        }
    }

    define('ONE_PASS', isset($options['one-pass']));
    
    // BEGIN of configuring the factory
    $factoryConfig = [
        RapidAccountScan::class             => RapidAccountScan::class,
        RapidScanStorage::class             => RapidScanStorage::class,
        CloudAssistedStorage::class         => CloudAssistedStorage::class,
        DbFolderSpecification::class        => DbFolderSpecification::class,
        CriticalFileSpecification::class    => CriticalFileSpecification::class,
        CloudAssistedRequest::class         => CloudAssistedRequest::class,
        CSVReport::class                    => CSVReport::class,
        JSONReport::class                   => JSONReport::class,
        PHPReport::class                    => PHPReport::class,
        PlainReport::class                  => PlainReport::class,
        DoublecheckReport::class            => DoublecheckReport::class,
        HTMLReport::class                   => HTMLReport::class,
        DetachedMode::class                 => DetachedMode::class,
        ResidentMode::class                 => ResidentMode::class,
        Logger::class                       => Logger::class,
    ];

    if (isset($options['factory-config'])) {
        $optionalFactoryConfig = require($options['factory-config']);
        $factoryConfig = array_merge($factoryConfig, $optionalFactoryConfig);
    }

    Factory::configure($factoryConfig);
    // END of configuring the factory

} else {
    define('AI_EXPERT', AI_EXPERT_MODE);
    define('ONE_PASS', true);
}

if (ONE_PASS && defined('CLOUD_ASSIST_TOKEN')) {
    die('Both parameters(one-pass and cloud-assist) not supported');
}

if (defined('RAPID_ACCOUNT_SCAN') && !defined('CLOUD_ASSIST_TOKEN')) { 
    die('CloudScan should be enabled');
}

if (defined('CREATE_SHARED_MEMORY') && CREATE_SHARED_MEMORY == true && !defined('SHARED_MEMORY')) {
    die('shared-mem-progress should be enabled and ID specified.');
}

if (defined('RAPID_ACCOUNT_SCAN')) {
    if (!mkdir(RAPID_ACCOUNT_SCAN, 0700, true) && !is_dir(RAPID_ACCOUNT_SCAN)) {
        throw new Exception(sprintf('Directory "%s" was not created', RAPID_ACCOUNT_SCAN));
    }
    $specification = Factory::instance()->create(DbFolderSpecification::class);
    if (!$specification->satisfiedBy(RAPID_ACCOUNT_SCAN)) {
        @unlink(RAPID_ACCOUNT_SCAN);
        die('Rapid DB folder error! Please check the folder.');
    }
}

if (defined('RAPID_ACCOUNT_SCAN_TYPE') && !in_array(RAPID_ACCOUNT_SCAN_TYPE, array('NONE', 'ALL', 'SUSPICIOUS'))) {
    die('Wrong Rapid account scan type');
}

if (defined('RAPID_ACCOUNT_SCAN') && !extension_loaded('leveldb')) { 
    die('LevelDB extension needed for Rapid DB');
}

$vars->blackFiles = [];

if (DEBUG_MODE || DEBUG_PERFORMANCE) {
    $debug = new DebugMode(DEBUG_MODE, DEBUG_PERFORMANCE);
} else {
    $debug = null;
}

$vars->signs = new LoadSignaturesForScan(isset($defaults['avdb']) ? $defaults['avdb'] : null, AI_EXPERT, DEBUG_PERFORMANCE);

if ($vars->signs->getResult() == $vars->signs::SIGN_EXTERNAL) {
    stdOut('Loaded external signatures from ' . $defaults['avdb']);
} else if ($vars->signs->getResult() == $vars->signs::SIGN_IMPORT) {
    stdOut('Loaded ' . __DIR__ . '/ai-bolit.sig signatures from ai-bolit.sig');
} else if (is_object($debug) && $vars->signs->getResult() == $vars->signs::SIGN_ERROR) {
    $debug->QCR_Debug('Import ai-bolit.sig ' . $vars->signs->getLastError());
}

if (is_object($debug)) {
    $debug->QCR_Debug();
}

if (isset($defaults['userid'])) {
    stdOut('Running from ' . $defaults['userid'] . ':' . $defaults['groupid']);
}

if (AI_EXTRA_WARN) {
    $sign_count = $vars->signs->getDBCountWithSuspicious();
} else {
    $sign_count = $vars->signs->getDBCount();
}

stdOut('Malware signatures: ' . $sign_count);

if ($g_SpecificExt) {
    stdOut("Scan specific extensions: " . implode(',', $g_SensitiveFiles));
}

// Black list database
try {
    $file = __DIR__ . '/AIBOLIT-BINMALWARE.db';
    if (isset($defaults['avdb'])) {
        $file = dirname($defaults['avdb']) . '/AIBOLIT-BINMALWARE.db';
    }
    $vars->blacklist = FileHashMemoryDb::open($file);
    stdOut("Binary malware signatures: " . ceil($vars->blacklist->count()));
} catch (Exception $e) {
    $vars->blacklist = null;
}

if (DEBUG_PERFORMANCE) {
    stdOut("Debug Performance Scan");
}

// Init
define('MAX_PREVIEW_LEN', 120);

if (defined('AIBOLIT_EXTERNAL_HANDLER')) {
    include_once(AIBOLIT_EXTERNAL_HANDLER);
    stdOut("\nLoaded external handler: " . AIBOLIT_EXTERNAL_HANDLER . "\n");
    if (function_exists("aibolit_onStart")) {
        aibolit_onStart();
    }
}

// Perform full scan when running from command line

if ($l_FastCli) {
    $defaults['scan_all_files'] = 0;
}

define('SCAN_ALL_FILES', (bool) $defaults['scan_all_files']);
define('SCAN_DELAY', (int) $defaults['scan_delay']);
define('MAX_SIZE_TO_SCAN', AibolitHelpers::getBytes($defaults['max_size_to_scan']));
define('MAX_SIZE_TO_CLOUDSCAN', AibolitHelpers::getBytes($defaults['max_size_to_cloudscan']));

if (SCAN_ALL_FILES) {
    $filter->setScanAll();
}

if ($defaults['memory_limit'] && ($defaults['memory_limit'] = AibolitHelpers::getBytes($defaults['memory_limit'])) > 0) {
    ini_set('memory_limit', $defaults['memory_limit']);
    stdOut("Changed memory limit to " . $defaults['memory_limit']);
}

if (realpath($defaults['path']) === false) {
    define('ROOT_PATH', $defaults['path']);
} else {
    define('ROOT_PATH', realpath($defaults['path']));
}

if (!ROOT_PATH) {
    if (isCli()) {
        die(stdOut("Directory '{$defaults['path']}' not found!"));
    }
} elseif (!$defaults['use_template_in_path'] && !is_readable(ROOT_PATH) && isCli()) {
    die2(stdOut("Cannot read directory '" . ROOT_PATH . "'!"));
}

define('CURRENT_DIR', getcwd());
if(!$defaults['use_template_in_path']) {
    chdir(ROOT_PATH);
}

if (isCli() && REPORT !== '' && REPORT !== 'no@email.com') {
    $report      = str_replace('\\', '/', REPORT);
    $abs         = strpos($report, '/') === 0 ? DIR_SEPARATOR : '';
    $report      = array_values(array_filter(explode('/', $report)));
    $report_file = array_pop($report);
    $report_path = realpath($abs . implode(DIR_SEPARATOR, $report));

    define('REPORT_FILE', $report_file);
    define('REPORT_PATH', $report_path);

    if (REPORT_FILE && REPORT_PATH && is_file(REPORT_PATH . DIR_SEPARATOR . REPORT_FILE)) {
        @unlink(REPORT_PATH . DIR_SEPARATOR . REPORT_FILE);
    }

    if (!isset($options['no-html']) && defined('REPORT_FILE')) {
        $reports[HTMLReport::class] = REPORT_PATH . DIR_SEPARATOR . REPORT_FILE;
    }
}

if (defined('REPORT_PATH')) {
    $l_ReportDirName = REPORT_PATH;
}

$vars->options = $options;

$path                       = $defaults['path'];
$report_mask                = $defaults['report_mask'];
$extended_report            = defined('EXTENDED_REPORT') && EXTENDED_REPORT;
$rapid_account_scan_report  = defined('RAPID_ACCOUNT_SCAN');

$max_size_to_scan = AibolitHelpers::getBytes(MAX_SIZE_TO_SCAN);
$max_size_to_scan = $max_size_to_scan > 0 ? $max_size_to_scan : AibolitHelpers::getBytes('1m');
$max_size_to_scan = AibolitHelpers::bytes2Human($max_size_to_scan);

$use_doublecheck = isset($options['with-2check']) && file_exists(DOUBLECHECK_FILE);

$reportFactory = function ($reports) use ($vars, $path, $db_meta_info, $report_mask, $extended_report,
    $rapid_account_scan_report, $g_AddPrefix, $g_NoPrefix, $snum, $max_size_to_scan, $g_SpecificExt, $use_doublecheck) {
    foreach($reports as $report_class => $file) {
        yield Factory::instance()->create($report_class, [$vars->signs->_Mnemo, $path,
            $vars->signs->getDBLocation(), $vars->signs->getDBMetaInfoVersion(),
            $report_mask, $extended_report, $rapid_account_scan_report, AI_VERSION, AI_HOSTER,
            AI_EXTRA_WARN, AI_EXPERT, SMART_SCAN, ROOT_PATH, SCAN_ALL_FILES, $g_SpecificExt,
            DOUBLECHECK_FILE, $use_doublecheck, START_TIME, $snum, $max_size_to_scan, $g_AddPrefix, $g_NoPrefix,
            isset($reports[CSVReport::class]), $file, JSON_STDOUT, isset($vars->options['stat'])]);
    }
};

define('QUEUE_FILENAME', ($l_ReportDirName != '' ? $l_ReportDirName . '/' : '') . 'AI-BOLIT-QUEUE-' . md5($defaults['path']) . '-' . rand(1000, 9999) . '.txt');

////////////////////////////////////////////////////////////////////////////

if (!isCli()) {
    header('Content-type: text/html; charset=utf-8');
}

if (!$defaults['use_template_in_path'] && !is_readable(ROOT_PATH)) {
    echo Translate::getStr('warning.folder_read_permission');
    exit;
}

if (isCli()) {
    if (defined('REPORT_PATH') && REPORT_PATH) {
        if (!is_writable(REPORT_PATH)) {
            die2("\nCannot write report. Report dir " . REPORT_PATH . " is not writable.");
        }

        else if (!REPORT_FILE) {
            die2("\nCannot write report. Report filename is empty.");
        }

        else if (($file = REPORT_PATH . DIR_SEPARATOR . REPORT_FILE) && is_file($file) && !is_writable($file)) {
            die2("\nCannot write report. Report file '$file' exists but is not writable.");
        }
    }
}


// detect version CMS
$g_CmsListDetector = null;
if (!$defaults['use_template_in_path']) {
    $g_KnownCMS        = [];
    $g_CmsListDetector = new CmsVersionDetector(ROOT_PATH);
    $l_CmsDetectedNum  = $g_CmsListDetector->getCmsNumber();
    for ($tt = 0; $tt < $l_CmsDetectedNum; $tt++) {
        $vars->CMS[] = $g_CmsListDetector->getCmsName($tt) . ' v' . AibolitHelpers::makeSafeFn($g_CmsListDetector->getCmsVersion($tt), $g_AddPrefix, $g_NoPrefix);
    }
}


$g_DirIgnoreList = array();
$g_IgnoreList    = array();
$g_UrlIgnoreList = array();
$g_KnownList     = array();

$g_AiBolitAbsolutePath = __DIR__;

$l_IgnoreFilename    = $g_AiBolitAbsolutePath . '/.aignore';
$l_DirIgnoreFilename = $g_AiBolitAbsolutePath . '/.adirignore';
$l_UrlIgnoreFilename = $g_AiBolitAbsolutePath . '/.aurlignore';

if (file_exists($l_IgnoreFilename)) {
    $l_IgnoreListRaw = file($l_IgnoreFilename);
    for ($i = 0, $iMax = count($l_IgnoreListRaw); $i < $iMax; $i++) {
        $g_IgnoreList[] = explode("\t", trim($l_IgnoreListRaw[$i]));
    }
    unset($l_IgnoreListRaw);
}

if (file_exists($l_UrlIgnoreFilename)) {
    $g_UrlIgnoreList = file($l_UrlIgnoreFilename);

    for ($i = 0, $iMax = count($g_UrlIgnoreList); $i < $iMax; $i++) {
        $g_UrlIgnoreList[$i] = trim($g_UrlIgnoreList[$i]);
    }
}

$filter->setIgnoreListPatterns($l_DirIgnoreFilename);

if (SMART_SCAN) {
    $filter->setSmartScan();
    $g_DirIgnoreList = array_merge($g_DirIgnoreList, $l_SkipMask);
}

if (is_object($debug)) {
    $debug->QCR_Debug();
}


$defaults['skip_ext'] = strtolower(trim($defaults['skip_ext']));
if ($defaults['skip_ext'] != '') {
    $filter->setIgnoreExt($defaults['skip_ext']);
    $g_IgnoredExt = explode(',', $defaults['skip_ext']);
    for ($i = 0, $iMax = count($g_IgnoredExt); $i < $iMax; $i++) {
        $g_IgnoredExt[$i] = trim($g_IgnoredExt[$i]);
    }

    if (is_object($debug)) {
        $debug->QCR_Debug('Skip files with extensions: ' . implode(',', $g_IgnoredExt));
    }

    stdOut('Skip extensions: ' . implode(',', $g_IgnoredExt));
}

$use_listingfile = defined('LISTING_FILE');

$listing = false;

if ($use_doublecheck) {
    $listing = DOUBLECHECK_FILE;
} elseif ($use_listingfile) {
    $listing = LISTING_FILE;
}
$base64_encoded = INPUT_FILENAMES_BASE64_ENCODED;

if (is_callable([$filter, 'generateCheckers'])) {
    $filter->generateCheckers();
}

if (isset($options['detached'])) {
    $detached = Factory::instance()->create(DetachedMode::class, [$finder, $debug, $options['detached'], $vars, START_TIME, $reportFactory]);
    if (defined('LISTING_FILE')) {
        $detached->scanListing(LISTING_FILE, INPUT_FILENAMES_BASE64_ENCODED);
    }
    else {
        $detached->scanDirectories(ROOT_PATH);
    }
    exit(0);
}

if (isset($options['resident'])) {
    $logger = null;
    $levels = explode(',', LOG_LEVEL);
    $logger = new Logger(LOG_FILE, $levels);
    Factory::instance()->create(ResidentMode::class, [$finder, $debug, $reportFactory, $vars->signs, $vars->blacklist, $logger, $vars->maxMinUid, $options]);
    exit(0);
}

try {
    $scan = new Scanner($finder, $vars, $debug);
    if (defined('SCAN_FILE')) {
        // scan single file
        $filepath = INPUT_FILENAMES_BASE64_ENCODED ? FilepathEscaper::decodeFilepathByBase64(SCAN_FILE) : SCAN_FILE;
        stdOut("Start scanning file '" . $filepath . "'.");
        if (file_exists($filepath) && is_file($filepath) && is_readable($filepath)) {
            $vars->foundTotalFiles = 1;
            $s_file[] = $filepath;
            $base64_encoded = false;
        } else {
            stdOut("Error:" . $filepath . " either is not a file or readable");
        }
    } elseif ($listing) {
        //scan listing
        if ($listing == 'stdin') {
            $lines = explode("\n", getStdin());
        } else {
            $lines = new SplFileObject($listing);
            $lines->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
        }
        if (is_array($lines)) {
            $vars->foundTotalFiles = count($lines);
        } else if ($lines instanceof SplFileObject) {
            $lines->seek($lines->getSize());
            $vars->foundTotalFiles = $lines->key();
            $lines->seek(0);
        }

        $s_file = $lines;
        stdOut("Start scanning the list from '" . $listing . "'.\n");
    } else {
        //scan by path
        $base64_encoded = true;
        file_exists(QUEUE_FILENAME) && unlink(QUEUE_FILENAME);
        $scan->QCR_ScanDirectories(ROOT_PATH);
        stdOut("Found $vars->foundTotalFiles files in $vars->foundTotalDirs directories.");
        stdOut("Start scanning '" . ROOT_PATH . "'.\n");

        if (is_object($debug)) {
            $debug->QCR_Debug();
        }
        stdOut(str_repeat(' ', 160), false);
        $s_file = new SplFileObject(QUEUE_FILENAME);
        $s_file->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
    }

    $scan->QCR_GoScan($s_file, null, $base64_encoded, $use_doublecheck, $filter);
    unset($s_file);
    @unlink(QUEUE_FILENAME);
    $vars->foundTotalDirs  = $vars->totalFolder;

    if (defined('PROGRESS_LOG_FILE') && file_exists(PROGRESS_LOG_FILE)) {
        @unlink(PROGRESS_LOG_FILE);
    }
    if (CREATE_SHARED_MEMORY) {
        shmop_delete(SHARED_MEMORY);
    }
    if (defined('SHARED_MEMORY')) {
        shmop_close(SHARED_MEMORY);
    }
} catch (Exception $e) {
    if (is_object($debug)) {
        $debug->QCR_Debug($e->getMessage());
    }
}
if (is_object($debug)) {
    $debug->QCR_Debug();
}

if (true) {
    $g_HeuristicDetected = array();
    $g_Iframer           = array();
    $g_Base64            = array();
}

list($snum, $i) = $scan->whitelisting();


////////////////////////////////////////////////////////////////////////////
if (AI_HOSTER) {
    $g_IframerFragment       = array();
    $g_Iframer               = array();
    $vars->redirect          = array();
    $vars->doorway           = array();
    $g_EmptyLink             = array();
    $g_HeuristicType         = array();
    $g_HeuristicDetected     = array();
    $vars->adwareList            = array();
    $vars->phishing              = array();
    $g_PHPCodeInside         = array();
    $g_PHPCodeInsideFragment = array();
    $vars->bigFiles              = array();
    $vars->redirectPHPFragment  = array();
    $g_EmptyLinkSrc          = array();
    $g_Base64Fragment        = array();
    $g_UnixExec              = array();
    $vars->phishingSigFragment   = array();
    $vars->phishingFragment      = array();
    $g_PhishingSig           = array();
    $g_IframerFragment       = array();
    $vars->CMS                  = array();
    $vars->adwareListFragment    = array();
}

if (BOOL_RESULT && (!defined('NEED_REPORT'))) {
    if ((count($vars->criticalPHP) > 0) || (count($vars->criticalJS) > 0) || (count($g_PhishingSig) > 0)) {
        exit(2);
    } else {
        exit(0);
    }
}
////////////////////////////////////////////////////////////////////////////

$time_taken = AibolitHelpers::seconds2Human(microtime(true) - START_TIME);



stdOut("\nBuilding report [ mode = " . AI_EXPERT . " ]\n");

//stdOut("\nLoaded signatures: " . count($g_FlexDBShe) . " / " . count($g_JSVirSig) . "\n");

////////////////////////////////////////////////////////////////////////////

$scan_time = round(microtime(true) - START_TIME, 1);

foreach($reportFactory($reports) as $report) {
    $report->generateReport($vars, $scan_time);
    $res = $report->write();
    if ($res !== '') {
        stdOut($res);
    }
}
stdOut("\n");

if (!AI_HOSTER) {
    stdOut("Building list of vulnerable scripts " . count($vars->vulnerable));
}


stdOut("Building list of shells " . count($vars->criticalPHP));

stdOut("Building list of js " . count($vars->criticalJS));

stdOut("Building list of unread files " . count($vars->notRead));

if (!AI_HOSTER) {
    stdOut("Building list of phishing pages " . count($vars->phishing));

    stdOut('Building list of redirects ' . count($vars->redirect));

    stdOut("Building list of symlinks " . count($vars->symLinks));

}

if (AI_EXTRA_WARN) {
    stdOut("Building list of suspicious files " . count($vars->warningPHP));
}
////////////////////////////////////
if (!AI_HOSTER) {
    stdOut("Building list of adware " . count($vars->adwareList));

    stdOut("Building list of bigfiles " . count($vars->bigFiles));

    stdOut("Building list of doorways " . count($vars->doorway));
}

if (!defined('REPORT') || REPORT === '') {
    die2('Report not written.');
}


stdOut("Scanning complete! Time taken: " . AibolitHelpers::seconds2Human($scan_time));

if (DEBUG_PERFORMANCE) {
    $debug->printPerfomanceStats();
    die();
}

stdOut("\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
stdOut("Attention! DO NOT LEAVE either ai-bolit.php or AI-BOLIT-REPORT-<xxxx>-<yy>.html \nfile on server. COPY it locally then REMOVE from server. ");
stdOut("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

if (isset($options['cmd'])) {
    stdOut("Run \"{$options['cmd']}\" ");
    system($options['cmd']);
}

if (is_object($debug)) {
    $debug->QCR_Debug();
}

# exit with code

$l_EC1 = count($vars->criticalPHP);
$l_EC2 = count($vars->criticalJS) + count($vars->phishing) + count($vars->warningPHP);
$code  = 0;

if ($l_EC1 > 0) {
    $code = 2;
} else {
    if ($l_EC2 > 0) {
        $code = 1;
    }
}

$stat = array(
    'php_malware'   => count($vars->criticalPHP),
    'cloudhash'     => count($vars->blackFiles),
    'js_malware'    => count($vars->criticalJS),
    'phishing'      => count($vars->phishing)
);

if (function_exists('aibolit_onComplete')) {
    aibolit_onComplete($code, $stat);
}

stdOut('Exit code ' . $code);
exit($code);

############################################# END ###############################################

function getStdin()
{
    $stdin  = '';
    $f      = @fopen('php://stdin', 'r');
    while($line = fgets($f))
    {
        $stdin .= $line;
    }
    fclose($f);
    return $stdin;
}

function die2($str) {
    if (function_exists('aibolit_onFatalError')) {
        aibolit_onFatalError($str);
    }
    die($str);
}


function getMaxMinUid($path = '/etc/login.defs')
{
    $uid_min = 1000;
    $uid_max = 60000;
    if (!file_exists($path)) {
        $release = new OsReleaseInfo();
        $ver = $release->getOsVersion();
        if ($release->isIdLikeCentos() && $ver && (strpos($ver, '6') === 0)) {
            $uid_min = 500;
            $uid_max = 60000;
        }
        unset($ver);
        return [$uid_min, $uid_max];
    }

    $file = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($file as $line) {
        $line = trim($line);
        if (strpos($line, 'UID_MIN') === 0) {
            list($key, $value) = preg_split('~\s+~', trim($line), 2, PREG_SPLIT_NO_EMPTY);
            $uid_min = intval(trim($value));
        }
        if (strpos($line, 'UID_MAX') === 0) {
            list($key, $value) = preg_split('~\s+~', trim($line), 2, PREG_SPLIT_NO_EMPTY);
            $uid_max = intval(trim($value));
        }
    }
    return [$uid_min, $uid_max];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// The following instructions should be written the same pattern,
/// because they are replaced by file content while building a release.
/// See the release_aibolit_ru.sh file for details.


class AibolitHelpers
{
    /**
     * Format bytes to human readable
     *
     * @param int $bytes
     *
     * @return string
     */
    public static function bytes2Human($bytes)
    {
        if ($bytes < 1024) {
            return $bytes . ' b';
        } elseif (($kb = $bytes / 1024) < 1024) {
            return number_format($kb, 2) . ' Kb';
        } elseif (($mb = $kb / 1024) < 1024) {
            return number_format($mb, 2) . ' Mb';
        } elseif (($gb = $mb / 1024) < 1024) {
            return number_format($gb, 2) . ' Gb';
        } else {
            return number_format($gb / 1024, 2) . 'Tb';
        }
    }

    /**
     * Seconds to human readable
     * @param int $seconds
     * @return string
     */
    public static function seconds2Human($seconds)
    {
        $r        = '';
        $_seconds = floor($seconds);
        $ms       = $seconds - $_seconds;
        $seconds  = $_seconds;
        if ($hours = floor($seconds / 3600)) {
            $r .= $hours . ' h ';
            $seconds %= 3600;
        }

        if ($minutes = floor($seconds / 60)) {
            $r .= $minutes . ' m ';
            $seconds %= 60;
        }

        if ($minutes < 3) {
            $r .= ' ' . (string)($seconds + ($ms > 0 ? round($ms) : 0)) . ' s';
        }

        return $r;
    }

    /**
     * Get bytes from shorthand byte values (1M, 1G...)
     * @param int|string $val
     * @return int
     */
    public static function getBytes($val)
    {
        $val  = trim($val);
        $last = strtolower($val[strlen($val) - 1]);
        switch ($last) {
            case 't':
                $val *= 1024;
            case 'g':
                $val *= 1024;
            case 'm':
                $val *= 1024;
            case 'k':
                $val *= 1024;
        }
        return intval($val);
    }

    /**
     * Convert dangerous chars to html entities
     *
     * @param        $par_Str
     * @param string $addPrefix
     * @param string $noPrefix
     * @param bool   $replace_path
     *
     * @return string
     */
    public static function makeSafeFn($par_Str, $addPrefix = '', $noPrefix = '', $replace_path = false)
    {
        if ($replace_path) {
            $lines = explode("\n", $par_Str);
            array_walk($lines, static function(&$n) use ($addPrefix, $noPrefix) {
                $n = $addPrefix . str_replace($noPrefix, '', $n);
            });

            $par_Str = implode("\n", $lines);
        }

        return htmlspecialchars($par_Str, ENT_SUBSTITUTE | ENT_QUOTES);
    }


    public static function myCheckSum($str)
    {
        return hash('crc32b', $str);
    }

}


class Variables
{
    public $structure = [];
    public $totalFolder = 0;
    public $totalFiles = 0;
    public $adwareList = [];
    public $criticalPHP = [];
    public $phishing = [];
    public $CMS = [];
    public $redirect = [];
    public $redirectPHPFragment = [];
    public $criticalJS = [];
    public $criticalJSFragment = [];
    public $blackFiles = [];
    public $notRead = [];
    public $bigFiles = [];
    public $criticalPHPSig = [];
    public $criticalPHPFragment = [];
    public $phishingSigFragment = [];
    public $phishingFragment = [];
    public $criticalJSSig = [];
    public $adwareListFragment = [];
    public $warningPHPSig = [];
    public $warningPHPFragment = [];
    public $warningPHP = [];
    public $blacklist = null;
    public $vulnerable = [];
    public $crc = 0;

    public $counter = 0;
    public $foundTotalDirs = 0;
    public $foundTotalFiles = 0;
    public $files_and_ignored = 0;
    public $doorway = [];
    public $symLinks = [];
    public $skippedFolders = [];

    public $hashtable = null;
    public $fileinfo = null;
    public $rescanCount = 0;

    public $maxMinUid = [];
    public $options = [];

    public $signs = [];
    public $users = null;
}



class Logger
{
    /**
     * $log_file - path and log file name
     * @var string
     */
    protected $log_file;
    /**
     * $file - file
     * @var string
     */
    protected $file;
    /**
     * dateFormat
     * @var string
     */
    protected $dateFormat = 'd-M-Y H:i:s';

    /**
     * @var array
     */
    const LEVELS  = ['ERROR' => 1, 'DEBUG' => 2,  'INFO' => 4, 'ALL' => 7];

    /**
     * @var int
     */
    private $level;

    /**
     * Class constructor
     *
     * @param string       $log_file - path and filename of log
     * @param string|array $level    - Level of logging
     *
     * @throws Exception
     */
    public function __construct($log_file = null, $level = 'INFO')
    {
        if (!$log_file) {
            return;
        }
        if (is_array($level)) {
            foreach ($level as $v) {
                if (!isset(self::LEVELS[$v])) {
                    $v = 'INFO';
                }
                $this->level |= self::LEVELS[$v];
            }
        } else {
            if (isset(self::LEVELS[$level])) {
                $this->level = self::LEVELS[$level];
            } else {
                $this->level = self::LEVELS['INFO'];
            }
        }

        $this->log_file = $log_file;
        //Create log file if it doesn't exist.
        if (!file_exists($log_file)) {
            fopen($log_file, 'w') or exit("Can't create $log_file!");
        }
        //Check permissions of file.
        if (!is_writable($log_file)) {
            //throw exception if not writable
            throw new Exception('ERROR: Unable to write to file!', 1);
        }
    }

    /**
     * Info method (write info message)
     * @param string $message
     * @return void
     */
    public function info($message)
    {
        if ($this->level & self::LEVELS['INFO']) {
            $this->writeLog($message, 'INFO');
        }

    }
    /**
     * Debug method (write debug message)
     * @param string $message
     * @return void
     */
    public function debug($message)
    {
        if ($this->level & self::LEVELS['DEBUG']) {
            $this->writeLog($message, 'DEBUG');
        }
    }
    /**
     * Error method (write error message)
     * @param string $message
     * @return void
     */
    public function error($message)
    {
        if ($this->level & self::LEVELS['ERROR']) {
            $this->writeLog($message, 'ERROR');
        }
    }

    /**
     * Write to log file
     * @param string $message
     * @param string $level
     * @return void
     */
    public function writeLog($message, $level)
    {
        if (!$this->log_file) {
            return;
        }
        // open log file
        if (!is_resource($this->file)) {
            $this->openLog();
        }
        //Grab time - based on timezone in php.ini
        $time = date($this->dateFormat);
        // Write time & message to end of file
        fwrite($this->file, "[$time] : [$level] - $message" . PHP_EOL);
    }
    /**
     * Open log file
     * @return void
     */
    private function openLog()
    {
        $openFile = $this->log_file;
        // 'a' option = place pointer at end of file
        $this->file = fopen($openFile, 'a') or exit("Can't open $openFile!");
    }
    /**
     * Class destructor
     */
    public function __destruct()
    {
        if ($this->file) {
            fclose($this->file);
        }
    }
}


class LoadSignaturesForScan
{
    private $sig_db             = array();
    private $sig_db_meta_info   = array();
    private $sig_db_location    = 'internal';

    private $mode;
    private $debug;

    public $_DBShe;
    public $X_DBShe;
    public $_FlexDBShe;
    public $X_FlexDBShe;
    public $XX_FlexDBShe;
    public $_ExceptFlex;
    public $_AdwareSig;
    public $_PhishingSig;
    public $_JSVirSig;
    public $X_JSVirSig;
    public $_SusDB;
    public $_SusDBPrio;
    public $_DeMapper;
    public $_Mnemo;

    public $whiteUrls;
    public $blackUrls;
    public $ownUrl = null;

    private $count;
    private $count_susp;
    private $result = 0;
    private $last_error = '';

    const SIGN_INTERNAL = 1;
    const SIGN_EXTERNAL = 2;
    const SIGN_IMPORT = 3;
    const SIGN_ERROR = 9;

    public function __construct($avdb_file, $mode, $debug)
    {
        $this->mode = $mode;
        $this->debug = $debug;
        $this->sig_db_meta_info = array(
            'build-date'    => 'n/a',
            'version'       => 'n/a',
            'release-type'  => 'n/a',
        );

        if ($avdb_file && file_exists($avdb_file)) {
            $avdb = explode("\n", gzinflate(base64_decode(str_rot13(strrev(trim(file_get_contents($avdb_file)))))));
            $this->sig_db_location  = 'external';

            $this->_DBShe       = explode("\n", base64_decode($avdb[0]));
            $this->X_DBShe      = explode("\n", base64_decode($avdb[1]));
            $this->_FlexDBShe   = explode("\n", base64_decode($avdb[2]));
            $this->X_FlexDBShe  = explode("\n", base64_decode($avdb[3]));
            $this->XX_FlexDBShe = explode("\n", base64_decode($avdb[4]));
            $this->_ExceptFlex  = explode("\n", base64_decode($avdb[5]));
            $this->_AdwareSig   = explode("\n", base64_decode($avdb[6]));
            $this->_PhishingSig = explode("\n", base64_decode($avdb[7]));
            $this->_JSVirSig    = explode("\n", base64_decode($avdb[8]));
            $this->X_JSVirSig   = explode("\n", base64_decode($avdb[9]));
            $this->_SusDB       = explode("\n", base64_decode($avdb[10]));
            $this->_SusDBPrio   = explode("\n", base64_decode($avdb[11]));
            $this->_DeMapper    = array_combine(explode("\n", base64_decode($avdb[12])), explode("\n", base64_decode($avdb[13])));
            $this->_Mnemo       = @array_flip(@array_combine(explode("\n", base64_decode($avdb[14])), explode("\n", base64_decode($avdb[15]))));

            // get meta information
            $avdb_meta_info = json_decode(base64_decode($avdb[16]), true);

            $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : 'n/a';
            $this->sig_db_meta_info['version'] = $avdb_meta_info ? $avdb_meta_info['version'] : 'n/a';
            $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : 'n/a';

            if (count($this->_DBShe) <= 1) {
                $this->_DBShe = array();
            }

            if (count($this->X_DBShe) <= 1) {
                $this->X_DBShe = array();
            }

            if (count($this->_FlexDBShe) <= 1) {
                $this->_FlexDBShe = array();
            }

            if (count($this->X_FlexDBShe) <= 1) {
                $this->X_FlexDBShe = array();
            }

            if (count($this->XX_FlexDBShe) <= 1) {
                $this->XX_FlexDBShe = array();
            }

            if (count($this->_ExceptFlex) <= 1) {
                $this->_ExceptFlex = array();
            }

            if (count($this->_AdwareSig) <= 1) {
                $this->_AdwareSig = array();
            }

            if (count($this->_PhishingSig) <= 1) {
                $this->_PhishingSig = array();
            }

            if (count($this->X_JSVirSig) <= 1) {
                $this->X_JSVirSig = array();
            }

            if (count($this->_JSVirSig) <= 1) {
                $this->_JSVirSig = array();
            }

            if (count($this->_SusDB) <= 1) {
                $this->_SusDB = array();
            }

            if (count($this->_SusDBPrio) <= 1) {
                $this->_SusDBPrio = array();
            }

            $this->result = self::SIGN_EXTERNAL;
        } else {
            InternalSignatures::init();
            $this->_DBShe       = InternalSignatures::$_DBShe;
            $this->X_DBShe      = InternalSignatures::$X_DBShe;
            $this->_FlexDBShe   = InternalSignatures::$_FlexDBShe;
            $this->X_FlexDBShe  = InternalSignatures::$X_FlexDBShe;
            $this->XX_FlexDBShe = InternalSignatures::$XX_FlexDBShe;
            $this->_ExceptFlex  = InternalSignatures::$_ExceptFlex;
            $this->_AdwareSig   = InternalSignatures::$_AdwareSig;
            $this->_PhishingSig = InternalSignatures::$_PhishingSig;
            $this->_JSVirSig    = InternalSignatures::$_JSVirSig;
            $this->X_JSVirSig   = InternalSignatures::$X_JSVirSig;
            $this->_SusDB       = InternalSignatures::$_SusDB;
            $this->_SusDBPrio   = InternalSignatures::$_SusDBPrio;
            $this->_DeMapper    = InternalSignatures::$_DeMapper;
            $this->_Mnemo       = InternalSignatures::$_Mnemo;

            // get meta information
            $avdb_meta_info = InternalSignatures::$db_meta_info;

            $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : 'n/a';
            $this->sig_db_meta_info['version'] = $avdb_meta_info ? $avdb_meta_info['version'] : 'n/a';
            $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : 'n/a';

            $this->result = self::SIGN_INTERNAL;
        }

        // use only basic signature subset
        if ($mode < 2) {
            $this->X_FlexDBShe  = array();
            $this->XX_FlexDBShe = array();
            $this->X_JSVirSig   = array();
        }

        // Load custom signatures
        if (file_exists(__DIR__ . '/ai-bolit.sig')) {
            try {
                $s_file = new SplFileObject(__DIR__ . '/ai-bolit.sig');
                $s_file->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
                foreach ($s_file as $line) {
                    $this->_FlexDBShe[] = preg_replace('#\G(?:[^~\\\\]+|\\\\.)*+\K~#', '\\~', $line); // escaping ~
                }

                $this->result = self::SIGN_IMPORT;
                $s_file = null; // file handler is closed
            }
            catch (Exception $e) {
                $this->result = self::SIGN_ERROR;
                $this->last_error = $e->getMessage();
            }
        }

        $this->count = count($this->_JSVirSig) + count($this->X_JSVirSig) + count($this->_DBShe) + count($this->X_DBShe) + count($this->_FlexDBShe) + count($this->X_FlexDBShe) + count($this->XX_FlexDBShe);
        $this->count_susp = $this->count + count($this->_SusDB);

        if (!$debug) {
            $this->OptimizeSignatures();
        }

        $this->_DBShe  = array_map('strtolower', $this->_DBShe);
        $this->X_DBShe = array_map('strtolower', $this->X_DBShe);
    }

    private function OptimizeSignatures()
    {
        ($this->mode == 2) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe, $this->XX_FlexDBShe));
        ($this->mode == 1) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe));
        $this->X_FlexDBShe = $this->XX_FlexDBShe = array();

        ($this->mode == 2) && ($this->_JSVirSig = array_merge($this->_JSVirSig, $this->X_JSVirSig));
        $this->X_JSVirSig = array();

        $count = count($this->_FlexDBShe);

        for ($i = 0; $i < $count; $i++) {
            if ($this->_FlexDBShe[$i] == '[a-zA-Z0-9_]+?\(\s*[a-zA-Z0-9_]+?=\s*\)')
                $this->_FlexDBShe[$i] = '\((?<=[a-zA-Z0-9_].)\s*[a-zA-Z0-9_]++=\s*\)';
            if ($this->_FlexDBShe[$i] == '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e')
                $this->_FlexDBShe[$i] = '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e';
            if ($this->_FlexDBShe[$i] == '$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.')
                $this->_FlexDBShe[$i] = '\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.';

            $this->_FlexDBShe[$i] = str_replace('http://.+?/.+?\.php\?a', 'http://[^?\s]++(?<=\.php)\?a', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = preg_replace('~\[a-zA-Z0-9_\]\+\K\?~', '+', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = preg_replace('~^\\\\[d]\+&@~', '&@(?<=\d..)', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = str_replace('\s*[\'"]{0,1}.+?[\'"]{0,1}\s*', '.+?', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = str_replace('[\'"]{0,1}.+?[\'"]{0,1}', '.+?', $this->_FlexDBShe[$i]);

            $this->_FlexDBShe[$i] = preg_replace('~^\[\'"\]\{0,1\}\.?|^@\*|^\\\\s\*~', '', $this->_FlexDBShe[$i]);
        }

        $this->optSig($this->_FlexDBShe);

        $this->optSig($this->_JSVirSig);
        $this->optSig($this->_AdwareSig);
        $this->optSig($this->_PhishingSig);
        $this->optSig($this->_SusDB);
        //optSig($g_SusDBPrio);
        //optSig($g_ExceptFlex);

        // convert exception rules
        $cnt = count($this->_ExceptFlex);
        for ($i = 0; $i < $cnt; $i++) {
            $this->_ExceptFlex[$i] = trim(Normalization::normalize($this->_ExceptFlex[$i]));
            if ($this->_ExceptFlex[$i] == '')
                unset($this->_ExceptFlex[$i]);
        }

        $this->_ExceptFlex = array_values($this->_ExceptFlex);
    }

    private function optSig(&$sigs)
    {
        $sigs = array_unique($sigs);

        // Add SigId
        foreach ($sigs as &$s) {
            $s .= '(?<X' . AibolitHelpers::myCheckSum($s) . '>)';
        }
        unset($s);

        $fix = array(
            '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e' => '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e',
            'http://.+?/.+?\.php\?a' => 'http://[^?\s]++(?<=\.php)\?a',
            '\s*[\'"]{0,1}.+?[\'"]{0,1}\s*' => '.+?',
            '[\'"]{0,1}.+?[\'"]{0,1}' => '.+?'
        );

        $sigs = str_replace(array_keys($fix), array_values($fix), $sigs);

        $fix = array(
            '~^\\\\[d]\+&@~' => '&@(?<=\d..)',
            '~^((\[\'"\]|\\\\s|@)(\{0,1\}\.?|[?*]))+~' => ''
        );

        $sigs = preg_replace(array_keys($fix), array_values($fix), $sigs);

        $this->optSigCheck($sigs);

        $tmp = array();
        foreach ($sigs as $i => $s) {
            if (!preg_match('~^(?>(?!\.[*+]|\\\\\d)(?:\\\\.|\[.+?\]|.))+$~', $s)) {
                unset($sigs[$i]);
                $tmp[] = $s;
            }
        }

        usort($sigs, 'strcasecmp');
        $txt = implode("\n", $sigs);

        for ($i = 24; $i >= 1; ($i > 4) ? $i -= 4 : --$i) {
            $txt = preg_replace_callback('#^((?>(?:\\\\.|\\[.+?\\]|[^(\n]|\((?:\\\\.|[^)(\n])++\))(?:[*?+]\+?|\{\d+(?:,\d*)?\}[+?]?|)){' . $i . ',})[^\n]*+(?:\\n\\1(?![{?*+]).+)+#im', [$this, 'optMergePrefixes'], $txt);
        }

        $sigs = array_merge(explode("\n", $txt), $tmp);

        $this->optSigCheck($sigs);
    }

    private function optMergePrefixes($m)
    {
        $limit = 8000;

        $prefix     = $m[1];
        $prefix_len = strlen($prefix);

        $len = $prefix_len;
        $r   = array();

        $suffixes = array();
        foreach (explode("\n", $m[0]) as $line) {

            if (strlen($line) > $limit) {
                $r[] = $line;
                continue;
            }

            $s = substr($line, $prefix_len);
            $len += strlen($s);
            if ($len > $limit) {
                if (count($suffixes) == 1) {
                    $r[] = $prefix . $suffixes[0];
                } else {
                    $r[] = $prefix . '(?:' . implode('|', $suffixes) . ')';
                }
                $suffixes = array();
                $len      = $prefix_len + strlen($s);
            }
            $suffixes[] = $s;
        }

        if (!empty($suffixes)) {
            if (count($suffixes) == 1) {
                $r[] = $prefix . $suffixes[0];
            } else {
                $r[] = $prefix . '(?:' . implode('|', $suffixes) . ')';
            }
        }

        return implode("\n", $r);
    }

    private function optMergePrefixes_Old($m)
    {
        $prefix     = $m[1];
        $prefix_len = strlen($prefix);

        $suffixes = array();
        foreach (explode("\n", $m[0]) as $line) {
            $suffixes[] = substr($line, $prefix_len);
        }

        return $prefix . '(?:' . implode('|', $suffixes) . ')';
    }

    /*
     * Checking errors in pattern
     */
    private function optSigCheck(&$sigs)
    {
        $result = true;

        foreach ($sigs as $k => $sig) {
            if (trim($sig) == "") {
                if ($this->debug) {
                    echo ("************>>>>> EMPTY\n     pattern: " . $sig . "\n");
                }
                unset($sigs[$k]);
                $result = false;
            }

            if (@preg_match('~' . $sig . '~smiS', '') === false) {
                $error = error_get_last();
                if ($this->debug) {
                    echo ("************>>>>> " . $error['message'] . "\n     pattern: " . $sig . "\n");
                }
                unset($sigs[$k]);
                $result = false;
            }
        }

        return $result;
    }

    public static function getSigId($l_Found)
    {
        foreach ($l_Found as $key => &$v) {
            if (is_string($key) && $v[1] != -1 && strlen($key) == 9) {
                return substr($key, 1);
            }
        }

        return null;
    }

    public function setOwnUrl($url)
    {
        if (isset($this->blackUrls)) {
            foreach ($this->blackUrls->getDb() as $black) {
                if (preg_match('~' . $black . '~msi', $url)) {
                    $this->ownUrl = null;
                    return;
                }
            }
        }
        $this->ownUrl = $url;
    }

    public function getOwnUrl()
    {
        return $this->ownUrl;
    }

    public function getDBLocation()
    {
        return $this->sig_db_location;
    }

    public function getDB()
    {
        return $this->sig_db;
    }

    public function getDBMetaInfo()
    {
        return $this->sig_db_meta_info;
    }

    public function getDBMetaInfoVersion()
    {
        return $this->sig_db_meta_info['version'];
    }

    public function getDBCount()
    {
        return $this->count;
    }

    public function getDBCountWithSuspicious()
    {
        return $this->count_susp;
    }

    public function getResult()
    {
        return $this->result;
    }

    public function getLastError()
    {
        return $this->last_error;
    }
}


class InternalSignatures
{
    public static $_DBShe;
    public static $X_DBShe;
    public static $_FlexDBShe;
    public static $X_FlexDBShe;
    public static $XX_FlexDBShe;
    public static $_ExceptFlex;
    public static $_AdwareSig;
    public static $_PhishingSig;
    public static $_JSVirSig;
    public static $X_JSVirSig;
    public static $_SusDB;
    public static $_SusDBPrio;
    public static $_DeMapper;
    public static $_Mnemo;
    public static $db_meta_info;

    public static function init()
    {
        //BEGIN_SIG 09/12/2020 01:55:48
self::$_DBShe = unserialize(gzinflate(/*1607511347*/base64_decode("S7QysKquBQA=")));
self::$X_DBShe = unserialize(gzinflate(/*1607511347*/base64_decode("S7QysKquBQA=")));
self::$_FlexDBShe = unserialize(gzinflate(/*1607511347*/base64_decode("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")));
self::$X_FlexDBShe = unserialize(gzinflate(/*1607511347*/base64_decode("S7QysKquBQA=")));
self::$XX_FlexDBShe = unserialize(gzinflate(/*1607511347*/base64_decode("S7QysKquBQA=")));
self::$_ExceptFlex = unserialize(gzinflate(/*1607511347*/base64_decode("S7QysKquBQA=")));
self::$_AdwareSig = unserialize(gzinflate(/*1607511347*/base64_decode("S7QysKquBQA=")));
self::$_PhishingSig = unserialize(gzinflate(/*1607511347*/base64_decode("S7QysKquBQA=")));
self::$_JSVirSig = unserialize(gzinflate(/*1607511347*/base64_decode("")));
self::$X_JSVirSig = unserialize(gzinflate(/*1607511347*/base64_decode("S7QysKquBQA=")));
self::$_SusDB = unserialize(gzinflate(/*1607511347*/base64_decode("")));
self::$_SusDBPrio = unserialize(gzinflate(/*1607511347*/base64_decode("S7QysKquBQA=")));
self::$_Mnemo = @array_flip(unserialize(gzinflate(/*1607511347*/base64_decode(""))));
self::$_DeMapper = unserialize(base64_decode("YTo1OntzOjEwOiJ3aXphcmQucGhwIjtzOjM3OiJjbGFzcyBXZWxjb21lU3RlcCBleHRlbmRzIENXaXphcmRTdGVwIjtzOjE3OiJ1cGRhdGVfY2xpZW50LnBocCI7czozNzoieyBDVXBkYXRlQ2xpZW50OjpBZGRNZXNzYWdlMkxvZygiZXhlYyI7czoxMToiaW5jbHVkZS5waHAiO3M6NDg6IkdMT0JBTFNbIlVTRVIiXS0+SXNBdXRob3JpemVkKCkgJiYgJGFyQXV0aFJlc3VsdCI7czo5OiJzdGFydC5waHAiO3M6NjA6IkJYX1JPT1QuJy9tb2R1bGVzL21haW4vY2xhc3Nlcy9nZW5lcmFsL3VwZGF0ZV9kYl91cGRhdGVyLnBocCI7czoxMDoiaGVscGVyLnBocCI7czo1ODoiSlBsdWdpbkhlbHBlcjo6Z2V0UGx1Z2luKCJzeXN0ZW0iLCJvbmVjbGlja2NoZWNrb3V0X3ZtMyIpOyI7fQ=="));
self::$db_meta_info = unserialize(base64_decode("YTozOntzOjEwOiJidWlsZC1kYXRlIjtzOjEwOiIxNjA3NTExMjg4IjtzOjc6InZlcnNpb24iO3M6MTM6IjIwMjAxMjA5LTQ0MjAiO3M6MTI6InJlbGVhc2UtdHlwZSI7czoxMDoicHJvZHVjdGlvbiI7fQ=="));

//END_SIG
    }
}

class CmsVersionDetector
{
    const CMS_BITRIX = 'Bitrix';
    const CMS_WORDPRESS = 'WordPress';
    const CMS_JOOMLA = 'Joomla';
    const CMS_DLE = 'Data Life Engine';
    const CMS_IPB = 'Invision Power Board';
    const CMS_WEBASYST = 'WebAsyst';
    const CMS_OSCOMMERCE = 'OsCommerce';
    const CMS_DRUPAL = 'Drupal';
    const CMS_MODX = 'MODX';
    const CMS_INSTANTCMS = 'Instant CMS';
    const CMS_PHPBB = 'PhpBB';
    const CMS_VBULLETIN = 'vBulletin';
    const CMS_SHOPSCRIPT = 'PHP ShopScript Premium';
    
    const CMS_VERSION_UNDEFINED = '0.0';

    private $root_path;
    private $versions;
    private $types;

    public function __construct($root_path = '.') {
        $this->root_path = $root_path;
        $this->versions  = array();
        $this->types     = array();

        $version = '';

        $dir_list   = $this->getDirList($root_path);
        $dir_list[] = $root_path;

        foreach ($dir_list as $dir) {
            if ($this->checkBitrix($dir, $version)) {
                $this->addCms(self::CMS_BITRIX, $version);
            }

            if ($this->checkWordpress($dir, $version)) {
                $this->addCms(self::CMS_WORDPRESS, $version);
            }

            if ($this->checkJoomla($dir, $version)) {
                $this->addCms(self::CMS_JOOMLA, $version);
            }

            if ($this->checkDle($dir, $version)) {
                $this->addCms(self::CMS_DLE, $version);
            }

            if ($this->checkIpb($dir, $version)) {
                $this->addCms(self::CMS_IPB, $version);
            }

            if ($this->checkWebAsyst($dir, $version)) {
                $this->addCms(self::CMS_WEBASYST, $version);
            }

            if ($this->checkOsCommerce($dir, $version)) {
                $this->addCms(self::CMS_OSCOMMERCE, $version);
            }

            if ($this->checkDrupal($dir, $version)) {
                $this->addCms(self::CMS_DRUPAL, $version);
            }

            if ($this->checkMODX($dir, $version)) {
                $this->addCms(self::CMS_MODX, $version);
            }

            if ($this->checkInstantCms($dir, $version)) {
                $this->addCms(self::CMS_INSTANTCMS, $version);
            }

            if ($this->checkPhpBb($dir, $version)) {
                $this->addCms(self::CMS_PHPBB, $version);
            }

            if ($this->checkVBulletin($dir, $version)) {
                $this->addCms(self::CMS_VBULLETIN, $version);
            }

            if ($this->checkPhpShopScript($dir, $version)) {
                $this->addCms(self::CMS_SHOPSCRIPT, $version);
            }

        }
    }

    function getDirList($target) {
        $remove      = array(
            '.',
            '..'
        );
        $directories = array_diff(scandir($target), $remove);

        $res = array();

        foreach ($directories as $value) {
            if (is_dir($target . '/' . $value)) {
                $res[] = $target . '/' . $value;
            }
        }

        return $res;
    }

    function isCms($name, $version) {
        for ($i = 0, $iMax = count($this->types); $i < $iMax; $i++) {
            if ((strpos($this->types[$i], $name) !== false) && (strpos($this->versions[$i], $version) !== false)) {
                return true;
            }
        }

        return false;
    }

    function getCmsList() {
        return $this->types;
    }

    function getCmsVersions() {
        return $this->versions;
    }

    function getCmsNumber() {
        return count($this->types);
    }

    function getCmsName($index = 0) {
        return $this->types[$index];
    }

    function getCmsVersion($index = 0) {
        return $this->versions[$index];
    }

    private function addCms($type, $version) {
        $this->types[]    = $type;
        $this->versions[] = $version;
    }

    private function checkBitrix($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/bitrix')) {
            $res = true;

            $tmp_content = @file_get_contents($this->root_path . '/bitrix/modules/main/classes/general/version.php');
            if (preg_match('|define\("SM_VERSION","(.+?)"\)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkWordpress($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/wp-admin')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/wp-includes/version.php');
            if (preg_match('|\$wp_version\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        return $res;
    }

    private function checkJoomla($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/libraries/joomla')) {
            $res = true;

            // for 1.5.x
            $tmp_content = @file_get_contents($dir . '/libraries/joomla/version.php');
            if (preg_match('|var\s+\$RELEASE\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];

                if (preg_match('|var\s+\$DEV_LEVEL\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                    $version .= '.' . $tmp_ver[1];
                }
            }

            // for 1.7.x
            $tmp_content = @file_get_contents($dir . '/includes/version.php');
            if (preg_match('|public\s+\$RELEASE\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];

                if (preg_match('|public\s+\$DEV_LEVEL\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                    $version .= '.' . $tmp_ver[1];
                }
            }


            // for 2.5.x and 3.x
            $tmp_content = @file_get_contents($dir . '/libraries/cms/version/version.php');

            if (preg_match('|const\s+RELEASE\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];

                if (preg_match('|const\s+DEV_LEVEL\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                    $version .= '.' . $tmp_ver[1];
                }
            }

        }

        return $res;
    }

    private function checkDle($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/engine/engine.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/engine/data/config.php');
            if (preg_match('|\'version_id\'\s*=>\s*"(.+?)"|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

            $tmp_content = @file_get_contents($dir . '/install.php');
            if (preg_match('|\'version_id\'\s*=>\s*"(.+?)"|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkIpb($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/ips_kernel')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/ips_kernel/class_xml.php');
            if (preg_match('|IP.Board\s+v([0-9\.]+)|si', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkWebAsyst($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/wbs/installer')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/license.txt');
            if (preg_match('|v([0-9\.]+)|si', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkOsCommerce($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/includes/version.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/includes/version.php');
            if (preg_match('|([0-9\.]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkDrupal($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/sites/all')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/CHANGELOG.txt');
            if (preg_match('|Drupal\s+([0-9\.]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        if (file_exists($dir . '/core/lib/Drupal.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/core/lib/Drupal.php');
            if (preg_match('|VERSION\s*=\s*\'(\d+\.\d+\.\d+)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        if (file_exists($dir . 'modules/system/system.info')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . 'modules/system/system.info');
            if (preg_match('|version\s*=\s*"\d+\.\d+"|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkMODX($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/manager/assets')) {
            $res = true;

            // no way to pick up version
        }

        return $res;
    }

    private function checkInstantCms($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/plugins/p_usertab')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/index.php');
            if (preg_match('|InstantCMS\s+v([0-9\.]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkPhpBb($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/includes/acp')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/config.php');
            if (preg_match('|phpBB\s+([0-9\.x]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkVBulletin($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        // removed dangerous code from here, see DEF-10390 for details

        return $res;
    }

    private function checkPhpShopScript($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/install/consts.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/install/consts.php');
            if (preg_match('|STRING_VERSION\',\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }
}


class CloudAssistedRequest
{
    const API_URL = 'https://api.imunify360.com/api/hashes/check'; 

    private $timeout    = 60;
    private $server_id  = '';

    public function __construct($server_id, $timeout = 60) 
    {
        $this->server_id    = $server_id;
        $this->timeout      = $timeout;
    }

    public function checkFilesByHash($list_of_hashes = array())
    {
        if (empty($list_of_hashes)) {
            return array(
                [], 
                [],
                [],
                'white'             => [],
                'black'             => [],
                'verdicts_black'    => [],
            );
        }

        $result = $this->request($list_of_hashes);

        $white          = isset($result['white'])           ? $result['white']          : [];
        $black          = isset($result['black'])           ? $result['black']          : [];
        $verdicts_black = isset($result['verdicts_black'])  ? $result['verdicts_black'] : [];

        return [
            $white,
            $black,
            $verdicts_black,
            'white'             => $white,
            'black'             => $black,
            'verdicts_black'    => $verdicts_black,
        ];
    }
    
    // /////////////////////////////////////////////////////////////////////////

    private function request($list_of_hashes)
    {
        $url = self::API_URL . '?server_id=' . urlencode($this->server_id) . '&indexed=1';

        $data = array(
            'hashes' => $list_of_hashes,
        );

        $json_hashes = json_encode($data);

        $info = [];
        try {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL            , $url);
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST  , 'POST');
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER , false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST , false);
            curl_setopt($ch, CURLOPT_TIMEOUT        , $this->timeout);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT , $this->timeout);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER , true);
            curl_setopt($ch, CURLOPT_HTTPHEADER     , array('Content-Type: application/json'));
            curl_setopt($ch, CURLOPT_POSTFIELDS     , $json_hashes);
            $response_data  = curl_exec($ch);
            $info           = curl_getinfo($ch);
            $errno          = curl_errno($ch);
            curl_close($ch);
        }
        catch (Exception $e) {
            throw new Exception($e->getMessage());
        }

        $http_code      = isset($info['http_code']) ? $info['http_code'] : 0;
        if ($http_code !== 200) {
            if ($errno == 28) {
                throw new Exception('Reuqest timeout! Return code: ' . $http_code . ' Curl error num: ' . $errno);
            }
            throw new Exception('Invalid response from the Cloud Assisted server! Return code: ' . $http_code . ' Curl error num: ' . $errno);
        }
        $result = json_decode($response_data, true);
        if (is_null($result)) {
            throw new Exception('Invalid json format in the response!');
        }
        if (isset($result['error'])) {
            throw new Exception('API server returned error!');
        }
        if (!isset($result['result'])) {
            throw new Exception('API server returned error! Cannot find field "result".');
        }

        return $result['result'];
    }
}

/**
 * Class Report
 */
abstract class Report
{
    const MAX_ROWS = 15000;
    const AIBOLIT_MAX_NUMBER = 200;

    /**
     * Report constructor.
     * @param $mnemo
     * @param $path
     * @param $db_location
     * @param $db_meta_info_version
     * @param $report_mask
     * @param $extended_report
     * @param $rapid_account_scan
     * @param $ai_version
     * @param $ai_hoster
     * @param $ai_extra_warn
     * @param $ai_expert
     * @param $ai_smart
     * @param $root_path
     * @param $scan_all
     * @param $specific_ext
     * @param $doublecheck
     * @param $use_doublecheck
     * @param $start
     * @param $snum
     * @param $max_size
     * @param $add_prefix
     * @param $no_prefix
     * @param $small
     * @param $file
     * @param $echo
     * @param $stat
     */
    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_hoster, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix, $small, $file, $echo, $stat)
    {

    }

    /**
     * Generate report
     * @param $vars
     * @param $scan_time
     * @return mixed
     */
    public function generateReport($vars, $scan_time)
    {

    }

    /**
     * Write report to file and return string to stdout after write attempt
     * @return string
     */
    public function write()
    {

    }

    protected static function convertToUTF8($text)
    {
        if (function_exists('mb_convert_encoding')) {
            $text = @mb_convert_encoding($text, 'utf-8', 'auto');
            $text = @mb_convert_encoding($text, 'UTF-8', 'UTF-8');
        }

        return $text;
    }

}

/**
 * Class JSONReport report all data to JSON
 */
class JSONReport extends Report
{
    const REPORT_MASK_DOORWAYS  = 1<<2;
    const REPORT_MASK_SUSP      = 1<<3;
    const REPORT_MASK_FULL      = self::REPORT_MASK_DOORWAYS | self::REPORT_MASK_SUSP;
    
    protected $raw_report;
    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $ai_hoster;
    private $report_mask;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $small;
    protected $file;
    private $echo;
    private $stat;

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_hoster, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->mnemo = $mnemo;
        $this->ai_extra_warn = $ai_extra_warn;
        $this->extended_report = $extended_report;
        $this->rapid_account_scan = $rapid_account_scan;
        $this->ai_hoster = $ai_hoster;
        $this->report_mask = $report_mask;
        $this->addPrefix = $add_prefix;
        $this->noPrefix = $no_prefix;
        $this->small = $small;
        $this->echo = $echo;
        $this->stat = $stat;

        $this->raw_report = [];
        $this->raw_report['summary'] = [
            'scan_path'     => $path,
            'report_time'   => time(),
            'ai_version'    => $ai_version,
            'db_location'   => $db_location,
            'db_version'    => $db_meta_info_version,
        ];

        $this->file = $file;

        if($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }
    }

    public function generateReport($vars, $scan_time)
    {
        $tmp = clone $vars;
        if (!$this->small) {
            $tmp->criticalPHP = array_slice($tmp->criticalPHP, 0, self::MAX_ROWS);
            $tmp->criticalJS = array_slice($tmp->criticalJS, 0, self::MAX_ROWS);
            $tmp->notRead = array_slice($tmp->notRead, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->symLinks = array_slice($tmp->symLinks, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->warningPHP = array_slice($tmp->warningPHP, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->bigFiles = array_slice($tmp->bigFiles, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->doorway = array_slice($tmp->doorway, 0, self::AIBOLIT_MAX_NUMBER);
            $this->generateJSONTables($tmp);
        }

        $this->generateSummary($tmp, $scan_time);

    }

    private function generateSummary($vars, $scan_time)
    {
        $summary_counters                       = [];
        $summary_counters['redirect']           = count($vars->redirect);
        $summary_counters['critical_php']       = count($vars->criticalPHP);
        $summary_counters['critical_js']        = count($vars->criticalJS);
        $summary_counters['cloudhash']          = count($vars->blackFiles);
        $summary_counters['phishing']           = count($vars->phishing);
        $summary_counters['unix_exec']          = 0; // count($g_UnixExec);
        $summary_counters['iframes']            = 0; // count($g_Iframer);
        $summary_counters['not_read']           = count($vars->notRead);
        $summary_counters['base64']             = 0; // count($g_Base64);
        $summary_counters['heuristics']         = 0; // count($g_HeuristicDetected);
        $summary_counters['symlinks']           = count($vars->symLinks);
        $summary_counters['big_files_skipped']  = count($vars->bigFiles);
        $summary_counters['suspicious']         = count($vars->warningPHP);

        $this->raw_report['summary']['counters'] = $summary_counters;
        $this->raw_report['summary']['total_files'] = $vars->foundTotalFiles;
        $this->raw_report['summary']['scan_time'] = $scan_time;

        if (isset($vars->users)) {
            $this->raw_report['summary']['users'] = $vars->users->getList();
        }

        if ($this->extended_report && $this->rapid_account_scan) {
            $this->raw_report['summary']['counters']['rescan_count'] = $vars->rescanCount;
        }
    }

    private function generateJSONTables($vars)
    {
        $this->raw_report['vulners'] = $this->getRawJsonVuln($vars->vulnerable, $vars);

        if (count($vars->criticalPHP) > 0) {
            $this->raw_report['php_malware'] = $this->getRawJson($vars->criticalPHP, $vars, $vars->criticalPHPFragment, $vars->criticalPHPSig);
        }

        if (count($vars->blackFiles) > 0) {
            $this->raw_report['cloudhash'] = $this->getRawBlackData($vars->blackFiles);
        }

        if (count($vars->criticalJS) > 0) {
            $this->raw_report['js_malware'] = $this->getRawJson($vars->criticalJS, $vars, $vars->criticalJSFragment, $vars->criticalJSSig);
        }

        if (count($vars->notRead) > 0) {
            $this->raw_report['not_read'] = $this->getSimpleList($vars->notRead);
        }

        if ($this->ai_hoster) {
            if (count($vars->phishing) > 0) {
                $this->raw_report['phishing'] = $this->getRawJson($vars->phishing, $vars, $vars->phishingFragment, $vars->phishingSigFragment);
            }
            if (count($vars->redirect) > 0) {
                $this->raw_report['redirect'] = $this->getRawJson($vars->redirect, $vars, $vars->redirectPHPFragment);
            }
            if (count($vars->symLinks) > 0) {
                $this->raw_report['sym_links'] = $this->getSimpleList($vars->symLinks);
            }
        }
        else {
            if (count($vars->adwareList) > 0) {
                $this->raw_report['adware'] = $this->getRawJson($vars->adwareList, $vars, $vars->adwareListFragment);
            }
            if (count($vars->bigFiles) > 0) {
                $this->raw_report['big_files'] = $this->getRawJson($vars->bigFiles, $vars);
            }
            if ((count($vars->doorway) > 0) && JSONReport::checkMask($this->report_mask, JSONReport::REPORT_MASK_DOORWAYS)) {
                $this->raw_report['doorway'] = $this->getRawJson($vars->doorway, $vars);
            }
            if (count($vars->CMS) > 0) {
                $this->raw_report['cms'] = $this->getSimpleList($vars->CMS);
            }
        }

        if ($this->ai_extra_warn) {
            if ((count($vars->warningPHP) > 0) && JSONReport::checkMask($this->report_mask, JSONReport::REPORT_MASK_FULL)) {
                $this->raw_report['suspicious'] = $this->getRawJson($vars->warningPHP, $vars, $vars->warningPHPFragment, $vars->warningPHPSig);
            }
        }
    }
    
    public static function checkMask($mask, $need)
    {
        return (($mask & $need) == $need);
    }
    
    public function write()
    {
        $ret = '';
        $res = @json_encode($this->raw_report);
        if ($this->file!== '.' && $l_FH = fopen($this->file . '.tmp', 'w')) {
            fputs($l_FH, $res);
            fclose($l_FH);
            if (rename($this->file . '.tmp', $this->file)) {
                $ret = "Report written to '$this->file'.";
            } else {
                $ret = "Cannot create '$this->file'.";
            }
        }
        if ($this->echo) {
            echo $res;
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////
    
    private function getRawJsonVuln($par_List, $vars) 
    {
        $results = [];
        $l_Src   = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;',
            '<' . '?php.'
        ];
        $l_Dst   = [
            '"',
            '<',
            '>',
            '&',
            '\'',
            '<' . '?php '
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $l_Pos      = $par_List[$i]['ndx'];

            $fn = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);
            
            $res['fn']      = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);
            $res['sig']     = $par_List[$i]['id'];
            $res['ct']      = $vars->structure['c'][$l_Pos];
            $res['mt']      = $vars->structure['m'][$l_Pos];
            $res['et']      = $vars->structure['e'][$l_Pos];
            $res['sz']      = $vars->structure['s'][$l_Pos];
            $res['sigid']   = 'vuln_' . md5($vars->structure['n'][$l_Pos] . $par_List[$i]['id']);

            $results[] = $res;
        }

        return $results;
    }

    private function getRawJson($par_List, $vars, $par_Details = null, $par_SigId = null) 
    {
        $results = [];
        $l_Src   = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;',
            '<' . '?php.'
        ];
        $l_Dst   = [
            '"',
            '<',
            '>',
            '&',
            '\'',
            '<' . '?php '
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            if ($par_SigId != null) {
                $l_SigId = 'id_' . $par_SigId[$i];
            } else {
                $l_SigId = 'id_n' . rand(1000000, 9000000);
            }

            $l_Pos     = $par_List[$i];

            $fn = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);
            
            $res['fn'] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);

            if ($par_Details != null) {
                $res['sig'] = preg_replace('|(L\d+).+__AI_MARKER__|smi', '[$1]: ...', $par_Details[$i]);
                $res['sig'] = preg_replace('/[^\x20-\x7F]/', '.', $res['sig']);
                $res['sig'] = preg_replace('/__AI_MARKER__/', ' @!!!>', $res['sig']);
                $res['sig'] = str_replace($l_Src, $l_Dst, $res['sig']);
            }

            $res['sig'] = self::convertToUTF8($res['sig']);

            $res['ct']    = $vars->structure['c'][$l_Pos];
            $res['mt']    = $vars->structure['m'][$l_Pos];
            $res['sz']    = $vars->structure['s'][$l_Pos];
            $res['et']    = $vars->structure['e'][$l_Pos];
            $res['hash']  = $vars->structure['crc'][$l_Pos];
            $res['sigid'] = $l_SigId;
            if (isset($vars->structure['sha256'][$l_Pos])) {
                $res['sha256'] = $vars->structure['sha256'][$l_Pos];
            } else {
                $res['sha256'] = '';
            }


            if (isset($par_SigId) && isset($this->mnemo[$par_SigId[$i]])) {
                $res['sn'] = $this->mnemo[$par_SigId[$i]];
            } else {
                $res['sn'] = '';
            }
            if ($this->stat) {
                $res['uid']    = $vars->structure['u'][$l_Pos];
                $res['gid']    = $vars->structure['g'][$l_Pos];
                $res['mode']   = $vars->structure['p'][$l_Pos];
            }

            $results[] = $res;
        }

        return $results;
    }

    private function getRawBlackData($black_list)
    {
        $result = [];
        foreach ($black_list as $filename => $hash)
        {
            if (ENCODE_FILENAMES_WITH_BASE64) {
                $filename = base64_encode($filename);
            }
            
            try {
                $stat = stat($filename);
                $sz   = $stat['size'];
                $ct   = $stat['ctime'];
                $mt   = $stat['mtime'];
                $u    = $stat['uid'];
                $g    = $stat['gid'];
                $p    = sprintf("0%o", 0777 & $stat['mode']);
            }
            catch (Exception $e) {
                continue;
            }

            $item = [
                'fn'    => $filename,
                'sig'   => '',
                'ct'    => $ct,
                'mt'    => $mt,
                'et'    => $hash['ts'],
                'sz'    => $sz,
                'hash'  => $hash['h'],
                'sigid' => crc32($filename),
                'sn'    => isset($hash['sn']) ? $hash['sn'] : 'cld'
            ];

            if ($this->stat) {
                $item['uid']   = $u;
                $item['gid']   = $g;
                $item['mode']  = $p;
            }

            $result[] = $item;
        }
        return $result;
    }
    
    private function getSimpleList($list)
    {
        if (!ENCODE_FILENAMES_WITH_BASE64) {
            return $list;
        }
        foreach ($list as &$item) {
            $item = base64_encode($item);
        }
        unset($item);
        return $list;
    }
}


/**
 * Class JSONReport report all data to JSON
 */
class PHPReport extends JSONReport
{
    public function write()
    {
        $ret = '';
        $res = @serialize($this->raw_report);
        if ($l_FH = fopen($this->file . '.tmp', 'w')) {
            fputs($l_FH, $res);
            fclose($l_FH);
            if (rename($this->file . '.tmp', $this->file)) {
                $ret = "Report written to '$this->file'.";
            } else {
                $ret = "Cannot create '$this->file'.";
            }
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////
}


/**
 * Class PlainReport report to text file
 */
class PlainReport extends Report
{
    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $ai_hoster;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $file;
    private $raw_report;

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_hoster, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->mnemo = $mnemo;
        $this->ai_extra_warn = $ai_extra_warn;
        $this->extended_report = $extended_report;
        $this->rapid_account_scan = $rapid_account_scan;
        $this->ai_hoster = $ai_hoster;
        $this->addPrefix = $add_prefix;
        $this->noPrefix = $no_prefix;
        $this->file = $file;

        if($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }

        $this->raw_report = '';
        if (function_exists("gethostname") && is_callable("gethostname")) {
            $l_HostName = gethostname();
        } else {
            $l_HostName = '???';
        }

        $this->raw_report = "# Malware list detected by AI-Bolit (https://revisium.com/ai/) on " . date("d/m/Y H:i:s", time()) . " " . $l_HostName . "\n\n";
    }

    public function generateReport($vars, $scan_time = false)
    {
        if (!$this->ai_hoster) {
            foreach ($vars->vulnerable as $l_Item) {
                $this->raw_report .= '[VULNERABILITY] ' . $this->replacePathArray($vars->structure['n'][$l_Item['ndx']]) . ' - ' . $l_Item['id'] . "\n";
            }

            $this->raw_report .= "\n";
        }

        if (count($vars->criticalPHP) > 0) {
            $this->raw_report .= '[SERVER MALWARE]' . "\n" . $this->printPlainList(array_slice($vars->criticalPHP, 0, self::MAX_ROWS), $vars,  $vars->criticalPHPFragment) . "\n";
        }

        if (count($vars->criticalJS) > 0) {
            $this->raw_report .= '[CLIENT MALWARE / JS]' . "\n" . $this->printPlainList(array_slice($vars->criticalJS, 0, self::MAX_ROWS), $vars,  $vars->criticalJSFragment) . "\n";
        }

        if (count($vars->notRead) > 0) {
            $this->raw_report .= '[SCAN ERROR / SKIPPED]' . "\n" . $this->printPlainList(array_slice($vars->notRead, 0, self::AIBOLIT_MAX_NUMBER), $vars) . "\n\n";
        }

        if (count($vars->symLinks) > 0) {
            $this->raw_report .= '[SYMLINKS]' . "\n" . $this->printPlainList(array_slice($vars->symLinks, 0, self::AIBOLIT_MAX_NUMBER), $vars) . "\n\n";
        }

        if (!$this->ai_hoster) {
            if (count($vars->phishing) > 0) {
                $this->raw_report .= '[PHISHING]' . "\n" . $this->printPlainList($vars->phishing, $vars,  $vars->phishingFragment) . "\n";
            }
            if (count($vars->redirect) > 0) {
                $this->raw_report .= printList($vars->redirect, $vars, $vars->redirectPHPFragment);
            }
        }

        if ($this->ai_extra_warn) {
            if (count($vars->warningPHP) > 0) {
                $this->raw_report .= '[SUSPICIOUS]' . "\n" . $this->printPlainList(array_slice($vars->warningPHP, 0, self::AIBOLIT_MAX_NUMBER), $vars,  $vars->warningPHPFragment) . "\n";
            }
        }

        if (!$this->ai_hoster) {
            if (count($vars->adwareList) > 0) {
                $this->raw_report .= '[ADWARE]' . "\n" . $this->printPlainList($vars->adwareList, $vars,  $vars->adwareListFragment) . "\n";
            }
            if (count($vars->bigFiles) > 0) {
                $this->raw_report .= '[BIG FILES / SKIPPED]' . "\n" . $this->printPlainList(array_slice($vars->bigFiles, 0, self::AIBOLIT_MAX_NUMBER), $vars) . "\n\n";
            }
        }

        $this->raw_report = preg_replace('|__AI_MARKER__|smi', ' %> ', $this->raw_report);
    }

    public function write()
    {
        $ret = '';
        if ($l_FH = fopen($this->file . '.tmp', "w")) {
            fputs($l_FH, $this->raw_report);
            fclose($l_FH);
        }
        if (rename($this->file . '.tmp', $this->file)) {
            $ret = "Report written to '$this->file'.";
        } else {
            $ret = "Cannot create '$this->file'.";
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////
    private function printPlainList($par_List, $vars, $par_Details = null) {

        $l_Result = "";

        $l_Src = array(
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;'
        );
        $l_Dst = array(
            '"',
            '<',
            '>',
            '&',
            '\''
        );

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $l_Pos = $par_List[$i];

            if ($par_Details != null) {

                $l_Body = preg_replace('|(L\d+).+__AI_MARKER__|smi', '$1: ...', $par_Details[$i]);
                $l_Body = preg_replace('/[^\x20-\x7F]/', '.', $l_Body);
                $l_Body = str_replace($l_Src, $l_Dst, $l_Body);

            } else {
                $l_Body = '';
            }

            if (is_file($vars->structure['n'][$l_Pos])) {
                $l_Result .= $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]) . "\t\t\t" . $l_Body . "\n";
            } else {
                $l_Result .= $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$par_List[$i]]) . "\n";
            }

        }
        return $l_Result;
    }

    private function replacePathArray($par_Arr) {
        array_walk($par_Arr, function(&$n) {
            $n = $this->addPrefix . str_replace($this->noPrefix, '', $n);
        });
        return $par_Arr;
    }
}


/**
 * Class CSVReport report table data to CSV
 */
class CSVReport extends Report
{
    const CRITICAL_PHP  = 'p';
    const CRITICAL_JS   = 'j';
    const SUSPICIOUS    = 's';
    const PHISHING      = 'h';
    const VULNERABLE    = 'v';
    const CLOUDHASH     = 'c';

    const BIG_FILES     = 'b';
    const NOT_READ      = 'n';
    const DOORWAY       = 'd';
    const SYMLINKS      = 'm';
    const ADWARE        = 'a';
    const CMS           = 'e';

    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $ai_hoster;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $file;
    private $stat;

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_hoster, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->mnemo = $mnemo;
        $this->ai_extra_warn = $ai_extra_warn;
        $this->extended_report = $extended_report;
        $this->rapid_account_scan = $rapid_account_scan;
        $this->ai_hoster = $ai_hoster;
        $this->addPrefix = $add_prefix;
        $this->noPrefix = $no_prefix;
        $this->file = $file;
        $this->stat = $stat;

        if($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }
    }

    public function generateReport($vars, $scan_time = false)
    {
        $this->writeRawCSVVuln($vars->vulnerable, $vars);

        if (count($vars->criticalPHP) > 0) {
            $this->writeRawCSV($vars->criticalPHP, $vars, self::CRITICAL_PHP, $vars->criticalPHPFragment, $vars->criticalPHPSig);
        }

        if (count($vars->blackFiles) > 0) {
            $this->writeRawBlackData($vars->blackFiles);
        }

        if (count($vars->criticalJS) > 0) {
            $this->writeRawCSV($vars->criticalJS, $vars, self::CRITICAL_JS, $vars->criticalJSFragment, $vars->criticalJSSig);
        }

        if (count($vars->notRead) > 0) {
            $this->writeListCSV(self::NOT_READ, $vars->notRead);
        }

        if ($this->ai_hoster) {
            if (count($vars->phishing) > 0) {
                $this->writeRawCSV($vars->phishing, $vars, self::PHISHING, $vars->phishingFragment, $vars->phishingSigFragment);
            }
            if (count($vars->symLinks) > 0) {
                $this->writeListCSV(self::SYMLINKS, $vars->symLinks);
            }
        }
        else {
            if (count($vars->adwareList) > 0) {
                $this->writeRawCSV($vars->adwareList, $vars, self::ADWARE, $vars->adwareListFragment);
            }
            if (count($vars->bigFiles) > 0) {
                $this->writeRawCSV($vars->bigFiles, $vars, self::BIG_FILES);
            }
            if (count($vars->doorway) > 0) {
                $this->writeRawCSV($vars->doorway, $vars, self::DOORWAY);
            }
            if (count($vars->CMS) > 0) {
                $this->writeListCSV(self::CMS, $vars->CMS);
            }
        }

        if ($this->ai_extra_warn) {
            if (count($vars->warningPHP) > 0) {
                $this->writeRawCSV($vars->warningPHP, $vars, self::SUSPICIOUS, $vars->warningPHPFragment, $vars->warningPHPSig);
            }
        }
    }

    public function write()
    {
        $ret = '';
        if ($this->file) {
            if (rename($this->file . '.tmp', $this->file)) {
                $ret = "Report written to '$this->file'.";
            } else {
                $ret = "Cannot create '$this->file'.";
            }
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////
    private function writeRawCSVVuln($par_List, $vars)
    {
        if (count($par_List) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $res = [];
            $l_Pos      = $par_List[$i]['ndx'];

            $res[] = self::VULNERABLE;
            $fn = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);
            $res[] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);
            $res[] = $par_List[$i]['id'];
            $res[] = $vars->structure['c'][$l_Pos];
            $res[] = $vars->structure['m'][$l_Pos];
            $res[] = $vars->structure['s'][$l_Pos];
            $res[] = $vars->structure['e'][$l_Pos];
            $res[] = 'vuln_' . md5($vars->structure['n'][$l_Pos] . $par_List[$i]['id']);
            $res[] = '';
            $res[] = '';
            $res[] = '';
            
            if ($this->stat) {
                $res[] = '';
                $res[] = '';
                $res[] = '';
            }
            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }

    private function writeListCSV($section, $list)
    {
        if (count($list) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        for ($i = 0, $iMax = count($list); $i < $iMax; $i++) {
            $res = [];
            $res[] = $section;
            $res[] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($list[$i]) : $list[$i];
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';

            if ($this->stat) {
                $res[] = '';
                $res[] = '';
                $res[] = '';
            }

            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }

    private function writeRawCSV($par_List, $vars, $section = '', $par_Details = null, $par_SigId = null)
    {
        if (count($par_List) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        $l_Src   = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;',
            '<' . '?php.',
            '\\'
        ];
        $l_Dst   = [
            '"',
            '<',
            '>',
            '&',
            '\'',
            '<' . '?php ',
            ''
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $res = [];
            $res[] = $section;
            if ($par_SigId != null) {
                $l_SigId = 'id_' . $par_SigId[$i];
            } else {
                $l_SigId = 'id_n' . rand(1000000, 9000000);
            }

            $l_Pos     = $par_List[$i];

            $fn = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);
            
            $res[] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);
            
            if ($par_Details != null) {
                $sig = preg_replace('|(L\d+).+__AI_MARKER__|smi', '[$1]: ...', $par_Details[$i]);
                $sig = preg_replace('/[^\x20-\x7F]/', '.', $sig);
                $sig = preg_replace('/__AI_MARKER__/', ' @!!!>', $sig);
                $sig = str_replace($l_Src, $l_Dst, $sig);
                $sig = self::convertToUTF8($sig);
            }

            $res[]    = $sig;
            $res[]    = $vars->structure['c'][$l_Pos];
            $res[]    = $vars->structure['m'][$l_Pos];
            $res[]    = $vars->structure['s'][$l_Pos];
            $res[]    = $vars->structure['e'][$l_Pos];
            $res[]    = $l_SigId;
            $res[]    = $vars->structure['crc'][$l_Pos];

            if (isset($par_SigId) && isset($this->mnemo[$par_SigId[$i]])) {
                $res[] = $this->mnemo[$par_SigId[$i]];
            } else {
                $res[] = '';
            }

            if (isset($vars->structure['sha256'][$l_Pos])) {
                $res[] = $vars->structure['sha256'][$l_Pos];
            } else {
                $res[] = '';
            }
            if ($this->stat) {
                $res[] = $vars->structure['u'][$l_Pos];
                $res[] = $vars->structure['g'][$l_Pos];
                $res[] = $vars->structure['p'][$l_Pos];
            }
            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }

    private function writeRawBlackData($black_list)
    {
        if (count($black_list) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        foreach ($black_list as $filename => $hash)
        {
            $res = [];
            try {
                $stat = stat($filename);
                $sz   = $stat['size'];
                $ct   = $stat['ctime'];
                $mt   = $stat['mtime'];
                $u    = $stat['uid'];
                $g    = $stat['gid'];
                $p    = sprintf("0%o", 0777 & $stat['mode']);
            }
            catch (Exception $e) {
                continue;
            }
            $res[] = self::CLOUDHASH;
            $res[] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($filename) : $filename;
            $res[] = '';
            $res[] = $ct;
            $res[] = $mt;
            $res[] = $sz;
            $res[] = $hash['ts'];
            $res[] = crc32($filename);
            $res[] = $hash['h'];
            $res[] = isset($hash['sn']) ? $hash['sn'] : 'cld';
            $res[] = '';
            if ($this->stat) {
                $res[] = $u;
                $res[] = $g;
                $res[] = $p;
            }
            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }
}


/**
 * Class DoublecheckReport generate doublecheck file
 */
class DoublecheckReport extends Report
{
    private $raw_report;
    private $skip = false;
    private $file = false;
    private $res = '';

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_hoster, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->raw_report = [];

        $this->file = $file;

        if(file_exists($this->file)) {
            $this->skip = true;
            $this->res .= $this->file . ' already exists.' . PHP_EOL;
        } else if ($l_FH = fopen($this->file . '.tmp', 'w')) {
            fputs($l_FH, '<?php die("Forbidden"); ?>' . "\n");
            fclose($l_FH);
        } else {
            $this->skip = true;
            $this->res .= 'Error! Cannot create ' . $this->file . PHP_EOL;
        }
    }

    public function generateReport($vars, $scan_time)
    {
        if ($this->skip) {
            return;
        }

        $l_CurrPath = __DIR__;

        if (!isset($vars->criticalPHP)) {
            $vars->criticalPHP = [];
        }
        if (!isset($vars->criticalJS)) {
            $vars->criticalJS = [];
        }
        if (!isset($vars->phishing)) {
            $vars->phishing = [];
        }
        if (!isset($vars->adwareList)) {
            $vars->adwareList = [];
        }
        if (!isset($vars->redirect)) {
            $vars->redirect = [];
        }

        $this->raw_report = array_merge($vars->criticalPHP, $vars->criticalJS, $vars->phishing, $vars->adwareList, $vars->redirect);
        $this->raw_report = array_values(array_unique($this->raw_report));

        for ($i = 0, $iMax = count($this->raw_report); $i < $iMax; $i++) {
            $this->raw_report[$i] = str_replace($l_CurrPath, '.', $vars->structure['n'][$this->raw_report[$i]]);
        }

        $this->raw_report = array_values(array_unique($this->raw_report));
        if (count($this->raw_report) === 0) {
            $this->skip = true;
            unlink($this->file . '.tmp');
        }
    }
    
    public function write()
    {
        $ret = '';
        if ($this->skip) {
            return $this->res;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        for ($i = 0, $iMax = count($this->raw_report); $i < $iMax; $i++) {
            fputs($fh, $this->raw_report[$i] . "\n");
        }
        fclose($fh);
        if (rename($this->file . '.tmp', $this->file)) {
            $ret = "Report written to '$this->file'.";
        } else {
            $ret = "Cannot create '$this->file'.";
        }
        return $ret;
    }
}


/**
 * Class HTMLReport report all data to HTML
 */
class HTMLReport extends Report
{
    const REPORT_MASK_DOORWAYS  = 1<<2;
    const REPORT_MASK_SUSP      = 1<<3;
    const REPORT_MASK_FULL      = self::REPORT_MASK_DOORWAYS | self::REPORT_MASK_SUSP;
    
    private $raw_report;
    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $ai_hoster;
    private $report_mask;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $small;
    private $file;
    private $echo;
    private $template;
    private $max_size;
    private $start;
    private $doublecheck;

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_hoster, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->mnemo = $mnemo;
        $this->ai_extra_warn = $ai_extra_warn;
        $this->extended_report = $extended_report;
        $this->rapid_account_scan = $rapid_account_scan;
        $this->ai_hoster = $ai_hoster;
        $this->report_mask = $report_mask;
        $this->addPrefix = $add_prefix;
        $this->noPrefix = $no_prefix;
        $this->small = $small;
        $this->echo = $echo;
        $this->max_size = $max_size;
        $this->start = $start;
        $this->doublecheck = $doublecheck;

        $this->raw_report = '';
        $this->file = $file;

        if($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }

        if (file_exists(dirname(__FILE__) . '/ai-design.html')) {
            $this->template = Template::create(file_get_contents(dirname(__FILE__) . '/ai-design.html'));
        } else {
            $this->template = Template::create(TemplateList::MAIN_PAGE);
            $this->template->set('msg1', Translate::getStr('data_table.length_menu'));
            $this->template->set('msg2', Translate::getStr('data_table.zero_records'));
            $this->template->set('msg3', Translate::getStr('data_table.info'));
            $this->template->set('msg4', Translate::getStr('data_table.info_empty'));
            $this->template->set('msg5', Translate::getStr('data_table.info_filtered'));
            $this->template->set('msg6', Translate::getStr('data_table.search'));
            $this->template->set('msg7', Translate::getStr('data_table.paginate.first'));
            $this->template->set('msg8', Translate::getStr('data_table.paginate.previous'));
            $this->template->set('msg9', Translate::getStr('data_table.paginate.next'));
            $this->template->set('msg10', Translate::getStr('data_table.paginate.last'));
            $this->template->set('msg11', Translate::getStr('data_table.aria.sort_ascending'));
            $this->template->set('msg12', Translate::getStr('data_table.aria.sort_descending'));
        }

        $this->template->set('MAIN_TITLE', Translate::getStr('header.scan_report_title'));

        $this->template->set('MODE', $ai_expert . '/' . $ai_smart);

        if (AI_EXPERT == 0) {
            $this->raw_report .= '<div class="rep">' . Translate::getStr('scan.offer_modes_after_express') . '</div>';
        }

        $this->template->set('HEAD_TITLE', Translate::getStr('report_for') . $this->addPrefix . str_replace($this->noPrefix, '', $root_path));

        $this->template->set('SERVICE_INFO', htmlspecialchars("[" . @ini_get('mbstring.internal_encoding') . "][" . $snum . "]"));

        $this->template->set('PATH_URL', (isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : $this->addPrefix . str_replace($this->noPrefix, '', $this->addSlash($root_path))));

        $this->template->set('VERSION', $ai_version);

        $this->template->set('WARN_QUICK', (($scan_all || $specific_ext) ? '' : Translate::getStr('notice.scan_express', [$doublecheck])));

        if ($use_doublecheck) {
            if (Translate::getStr('file.scanned_manual', [$this->doublecheck, $this->doublecheck]) != '') {
                $this->raw_report .= '<div class="rep">' . Translate::getStr('file.scanned_manual', [$this->doublecheck, $this->doublecheck]) . '</div>';
            }
        }
    }

    public function generateReport($vars, $scan_time)
    {
        $l_ShowOffer = false;

        $this->template->set('SCANNED', Translate::getStr('info.files_checked', [$vars->totalFolder, $vars->totalFiles]));

        $l_Summary = '<div class="title">' . Translate::getStr('report.summary') . '</div>';
        $l_Summary .= '<table cellspacing=0 border=0>';

        if (count($vars->redirect) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('mobile_redirects'), count($vars->redirect), 'crit');
        }

        if (count($vars->criticalPHP) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('malware'), count($vars->criticalPHP), "crit");
        }

        if (count($vars->criticalJS) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('js_virused'), count($vars->criticalJS), "crit");
        }

        if (count($vars->phishing) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('phishing_pages'), count($vars->phishing), "crit");
        }

        if (count($vars->notRead) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('error.read_file'), count($vars->notRead), "crit");
        }

        if (count($vars->warningPHP) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('suspicious'), count($vars->warningPHP), "warn");
        }

        if (count($vars->bigFiles) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('skipped_large_file'), count($vars->bigFiles), "warn");
        }

        if (count($vars->symLinks) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('link.symbolic'), count($vars->symLinks), "warn");
        }

        $l_Summary .= "</table>";

        $l_ArraySummary                      = [];
        $l_ArraySummary["redirect"]          = count($vars->redirect);
        $l_ArraySummary["critical_php"]      = count($vars->criticalPHP);
        $l_ArraySummary["critical_js"]       = count($vars->criticalJS);
        $l_ArraySummary["phishing"]          = count($vars->phishing);
        $l_ArraySummary["unix_exec"]         = 0; // count($g_UnixExec);
        $l_ArraySummary["iframes"]           = 0; // count($g_Iframer);
        $l_ArraySummary["not_read"]          = count($vars->notRead);
        $l_ArraySummary["base64"]            = 0; // count($g_Base64);
        $l_ArraySummary["heuristics"]        = 0; // count($g_HeuristicDetected);
        $l_ArraySummary["symlinks"]          = count($vars->symLinks);
        $l_ArraySummary["big_files_skipped"] = count($vars->bigFiles);
        $l_ArraySummary["suspicious"]        = count($vars->warningPHP);

        if (function_exists('json_encode')) {
            $l_Summary .= "<!--[json]" . json_encode($l_ArraySummary) . "[/json]-->";
        }

        $l_Summary .= "<div class=details style=\"margin: 20px 20px 20px 0\">" . Translate::getStr('notice.files_may_not_malicious') . "</div>\n";

        $this->template->set('SUMMARY', $l_Summary);

        $this->raw_report .= Translate::getStr('critical.title');

        if(!$this->ai_hoster) {
            if (count($vars->vulnerable) > 0) {
                $this->raw_report .= '<div class="note_vir">' . Translate::getStr('script.vulnerable') . ' (' . count($vars->vulnerable) . ')</div><div class="crit">';
                foreach ($vars->vulnerable as $l_Item) {
                    $this->raw_report .= '<li>' . AibolitHelpers::makeSafeFn($vars->structure['n'][$l_Item['ndx']], $this->addPrefix, $this->noPrefix, true) . ' - ' . $l_Item['id'] . '</li>';
                }
                $this->raw_report .= '</div><p>' . PHP_EOL;
            }
        }

        if (count($vars->criticalPHP) > 0) {
            $criticalPHP              = array_slice($vars->criticalPHP, 0, self::MAX_ROWS);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('detected.shell_scripts') . ' (' . count($criticalPHP) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($criticalPHP, $vars, $vars->criticalPHPFragment, $vars->criticalPHPSig, 'table_crit');
            $this->raw_report .= '</div>' . PHP_EOL;
            $l_ShowOffer = true;
        } else {
            $this->raw_report .= '<div class="ok"><b>' . Translate::getStr('not_detected.shell_scripts') . '</b></div>';
        }

        if (count($vars->criticalJS) > 0) {
            $criticalJS              = array_slice($vars->criticalJS, 0, self::MAX_ROWS);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('detected.javascript') . ' (' . count($criticalJS) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($criticalJS, $vars, $vars->criticalJSFragment, $vars->criticalJSSig, 'table_vir');
            $this->raw_report .= "</div>" . PHP_EOL;

            $l_ShowOffer = true;
        }

        if (count($vars->notRead) > 0) {
            $notRead               = array_slice($vars->notRead, 0, self::AIBOLIT_MAX_NUMBER);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('warning.reading_error') . ' (' . count($notRead) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($notRead, $vars);
            $this->raw_report .= "</div><div class=\"spacer\"></div>" . PHP_EOL;
        }

        if (!$this->ai_hoster) {
            if (count($vars->phishing) > 0) {
                $this->raw_report .= '<div class="note_vir">' . Translate::getStr('detected.phishing_pages') . ' (' . count($vars->phishing) . ')</div><div class="crit">';
                $this->raw_report .= $this->printList($vars->phishing, $vars, $vars->phishingFragment, $vars->phishingSigFragment, 'table_vir');
                $this->raw_report .= "</div>" . PHP_EOL;

                $l_ShowOffer = true;
            }

            if (count($vars->redirect) > 0) {
                $l_ShowOffer             = true;
                $this->raw_report .= '<div class="note_vir">' . Translate::getStr('suspicion.htaccess') . ' (' . count($vars->redirect) . ')</div><div class="crit">';
                $this->raw_report .= "</div>" . PHP_EOL;
            }

            if (count($vars->symLinks) > 0) {
                $symLinks               = array_slice($vars->symLinks, 0, self::AIBOLIT_MAX_NUMBER);
                $this->raw_report .= '<div class="note_vir">' . Translate::getStr('symlinks') . ' (' . count($symLinks) . ')</div><div class="crit">';
                $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $symLinks), $this->addPrefix, $this->noPrefix, true));
                $this->raw_report .= "</div><div class=\"spacer\"></div>";
            }
        }
        if ($this->ai_extra_warn) {
            $l_WarningsNum = count($vars->warningPHP);
            if ($l_WarningsNum > 0) {
                $this->raw_report .= "<div style=\"margin-top: 20px\" class=\"title\">" . Translate::getStr('warnings') . "</div>";
            }
            if ($l_WarningsNum > 0) {
                $warningPHP              = array_slice($vars->warningPHP, 0, self::AIBOLIT_MAX_NUMBER);
                $this->raw_report .= '<div class="note_warn">' . Translate::getStr('suspicion.code') . ' (' . count($warningPHP) . ')</div><div class="warn">';
                $this->raw_report .= $this->printList($warningPHP, $vars, $vars->warningPHPFragment, $vars->warningPHPSig, 'table_warn');
                $this->raw_report .= '</div>' . PHP_EOL;
            }
        }
        if (!$this->ai_hoster) {
            $l_WarningsNum = count($vars->bigFiles) + count($vars->adwareList) + count($vars->doorway) + count($vars->warningPHP) + count($vars->skippedFolders);

            if ($l_WarningsNum > 0) {
                $this->raw_report .= "<div style=\"margin-top: 20px\" class=\"title\">" . Translate::getStr('warnings') . "</div>";
            }

            if (count($vars->adwareList) > 0) {
                $this->raw_report .= '<div class="note_warn">' . Translate::getStr('detected.bad_links') . '</div><div class="warn">';
                $this->raw_report .= $this->printList($vars->adwareList, $vars, $vars->adwareListFragment);
                $this->raw_report .= "</div>" . PHP_EOL;
            }

            if (count($vars->bigFiles) > 0) {
                $bigFiles               = array_slice($vars->bigFiles, 0, self::AIBOLIT_MAX_NUMBER);
                $this->raw_report .= "<div class=\"note_warn\">" . Translate::getStr('skipped.large_file', [$this->max_size]) . '</div><div class="warn">';
                $this->raw_report .= $this->printList($bigFiles, $vars);
                $this->raw_report .= "</div>";
            }

            if (count($vars->doorway) > 0) {
                $doorway              = array_slice($vars->doorway, 0, self::AIBOLIT_MAX_NUMBER);
                $this->raw_report .= '<div class="note_warn">' . Translate::getStr('suspicion.doorway') . '</div><div class="warn">';
                $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $doorway), $this->addPrefix, $this->noPrefix, true));
                $this->raw_report .= "</div>" . PHP_EOL;

            }

            if (count($vars->CMS) > 0) {
                $this->raw_report .= "<div class=\"note_warn\">" . Translate::getStr('founded_CMS') . "<br/>";
                $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $vars->CMS), $this->addPrefix, $this->noPrefix));
                $this->raw_report .= "</div>";
            }
        }

        if (function_exists('memory_get_peak_usage')) {
            $this->template->set('MEMORY', Translate::getStr('memory_used') . AibolitHelpers::bytes2Human(memory_get_peak_usage()));
        }

        if ($l_ShowOffer) {
            $this->template->set('OFFER', Translate::getStr('offer.when_has_critical'));
        } else {
            $this->template->set('OFFER', Translate::getStr('offer.when_no_critical'));
        }

        $this->template->set('OFFER_OUR_PRODUCTS', Translate::getStr('offer_our_products'));

        $this->template->set('CAUTION', Translate::getStr('сaution.aibolit_file'));

        $this->template->set('CREDITS', Translate::getStr('info.non_commercial_use'));

        $this->template->set('FOOTER', Translate::getStr('footer'));

        $this->template->set('STAT', Translate::getStr('info.time_elapsed', [$scan_time, date('d-m-Y в H:i:s', floor($this->start)), date('d-m-Y в H:i:s')]));

////////////////////////////////////////////////////////////////////////////
        $this->template->set('MAIN_CONTENT', $this->raw_report);
    }
    
    public function write()
    {
        $ret = '';
        $res = $this->template->render();
        if ($l_FH = fopen($this->file . '.tmp', "w")) {
            fputs($l_FH, $res);
            fclose($l_FH);
        }
        if (rename($this->file . '.tmp', $this->file)) {
            $ret = "Report written to '$this->file'.";
        } else {
            $ret = "Cannot create '$this->file'.";
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////////

    private function makeSummary($par_Str, $par_Number, $par_Style)
    {
        return '<tr><td class="' . $par_Style . '" width=400>' . $par_Str . '</td><td class="' . $par_Style . '">' . $par_Number . '</td></tr>';
    }

    private function printList($par_List, $vars, $par_Details = null, $par_SigId = null, $par_TableName = null)
    {

        $i = 0;

        if ($par_TableName == null) {
            $par_TableName = 'table_' . rand(1000000, 9000000);
        }

        $l_Result = '';
        $l_Result .= "<div class=\"flist\"><table cellspacing=1 cellpadding=4 border=0 id=\"" . $par_TableName . "\">";

        $l_Result .= "<thead><tr class=\"tbgh" . ($i % 2) . "\">";
        $l_Result .= "<th width=70%>" . Translate::getStr('path') . "</th>";
        $l_Result .= "<th>" . Translate::getStr('property_change') . "</th>";
        $l_Result .= "<th>" . Translate::getStr('content_change') . "</th>";
        $l_Result .= "<th width=90>" . Translate::getStr('size') . "</th>";
        $l_Result .= "<th width=0 class=\"hidd\">CRC32</th>";
        $l_Result .= "<th width=0 class=\"hidd\"></th>";
        $l_Result .= "<th width=0 class=\"hidd\"></th>";
        $l_Result .= "<th width=0 class=\"hidd\"></th>";

        $l_Result .= "</tr></thead><tbody>";

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            if ($par_SigId != null) {
                $l_SigId = 'id_' . $par_SigId[$i];
            } else {
                $l_SigId = 'id_z' . rand(1000000, 9000000);
            }

            $l_Pos = $par_List[$i];

            $l_Creat = $vars->structure['c'][$l_Pos] > 0 ? date("d/m/Y H:i:s", $vars->structure['c'][$l_Pos]) : '-';
            $l_Modif = $vars->structure['m'][$l_Pos] > 0 ? date("d/m/Y H:i:s", $vars->structure['m'][$l_Pos]) : '-';
            $l_Size  = $vars->structure['s'][$l_Pos] > 0 ? AibolitHelpers::bytes2Human($vars->structure['s'][$l_Pos]) : '-';

            if ($par_Details != null) {
                $l_WithMarker = preg_replace('|__AI_MARKER__|smi', '<span class="marker">&nbsp;</span>', $par_Details[$i]);

                $l_Body = '<div class="details">';

                if ($par_SigId != null) {
                    $l_Body .= '<a href="#" onclick="return hsig(\'' . $l_SigId . '\')">[x]</a> ';
                }

                $l_Body .= $l_WithMarker . '</div>';
            } else {
                $l_Body = '';
            }

            $l_Result .= '<tr class="tbg' . ($i % 2) . '" o="' . $l_SigId . '">';

            if (is_file($vars->structure['n'][$l_Pos])) {
                $l_Result .= '<td><div class="it"><a class="it">' . AibolitHelpers::makeSafeFn($this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]), $this->addPrefix, $this->noPrefix) . '</a></div>' . $l_Body . '</td>';
            } else {
                $l_Result .= '<td><div class="it"><a class="it">' . AibolitHelpers::makeSafeFn($this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$par_List[$i]]), $this->addPrefix, $this->noPrefix) . '</a></div></td>';
            }

            $l_Result .= '<td align=center><div class="ctd">' . $l_Creat . '</div></td>';
            $l_Result .= '<td align=center><div class="ctd">' . $l_Modif . '</div></td>';
            $l_Result .= '<td align=center><div class="ctd">' . $l_Size . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . $vars->structure['crc'][$l_Pos] . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . 'x' . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . $vars->structure['m'][$l_Pos] . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . $l_SigId . '</div></td>';
            $l_Result .= '</tr>';

        }

        $l_Result .= "</tbody></table></div><div class=clear style=\"margin: 20px 0 0 0\"></div>";

        return $l_Result;
    }

    private function addSlash($dir)
    {
        return rtrim($dir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
    }
}


class CloudAssistedFiles
{
    private $white = [];
    private $black = [];

    public function __construct(CloudAssistedRequest $car, $file_list, $vars)
    {
        $list_of_hash       = [];
        $list_of_filepath   = [];
        foreach ($file_list as $index => $filepath)
        {
            if (!file_exists($filepath) || !is_readable($filepath) || is_dir($filepath)) {
                continue;
            }
            try {
                $list_of_hash[]     = hash('sha256', file_get_contents($filepath));
                $list_of_filepath[] = $filepath;
            }
            catch (Exception $e) {
                
            }
        }
        unset($file_list);
        if ($vars->hashtable !== null) {
            $vars->hashtable->add($list_of_filepath, $list_of_hash);
        }
        try {
            list($white_raw, $black_raw, $verdicts_black_raw) = $car->checkFilesByHash($list_of_hash);
        }
        catch (Exception $e) {
            throw $e;
        }
        
        $this->white = $this->getListOfFile($white_raw, $list_of_hash, $list_of_filepath);
        $this->black = $this->getListOfFile($black_raw, $list_of_hash, $list_of_filepath, $verdicts_black_raw);

        unset($white_raw, $black_raw, $verdicts_black_raw, $list_of_hash, $list_of_filepath);
    }
    
    public function getWhiteList()
    {
        return $this->white;
    }

    public function getBlackList()
    {
        return $this->black;
    }
    
    // =========================================================================
    
    private function getListOfFile($data_raw, $list_of_hash, $list_of_filepath, $verdicts = [])
    {
        $result = [];
        foreach ($data_raw as $index => $hash_index)
        {
            if (!isset($list_of_hash[$hash_index])) {
                continue;
            }
            $hash_result = [
                'h'     => $list_of_hash[$hash_index],
                'ts'    => time(),
            ];
            if ($verdicts) {
                if (!isset($verdicts[$index])) {
                    throw new Exception('Wrong CloudAssisted format. List of verdicts has structure different from main list.');
                }
                $hash_result['sn'] = $verdicts[$index];
            }
            $result[$list_of_filepath[$hash_index]] = $hash_result;
        }
        return $result;
    }    
}


class DetachedMode
{
    protected $workdir;
    protected $scan_id;
    protected $pid_file;
    protected $report_file;
    protected $csvreport_file;
    protected $done_file;
    protected $vars;
    protected $start_time;
    protected $json_report;
    protected $sock_file;
    protected $reports;
    protected $finder;
    protected $debug;

    public function __construct($finder, $debug, $scan_id, $vars, $start_time, $json_report, $basedir = '/var/imunify360/aibolit/run', $sock_file = '/var/run/defence360agent/generic_sensor.sock.2')
    {
        $this->scan_id  = $scan_id;
        $this->vars     = $vars;
        $this->setWorkDir($basedir, $scan_id);
        $this->pid_file     = $this->workdir . '/pid';
        $this->report_file  = $this->workdir . '/report.json';
        $this->csvreport_file  = $this->workdir . '/report.csv';
        $this->done_file    = $this->workdir . '/done';
        $this->start_time   = $start_time;
        $this->json_report  = $json_report;
        $this->setSocketFile($sock_file);
        $this->savePid();
        $this->checkWorkDir($this->workdir);
        if (isset($vars->options['json_report']) && !empty($vars->options['json_report']) && $vars->options['json_report'] !== '.') {
            $this->report_file  = $vars->options['json_report'];
        }
        if (isset($vars->options['csv_report']) && !empty($vars->options['csv_report']) && $vars->options['csv_report'] !== '.') {
            $this->csvreport_file  = $vars->options['csv_report'];
            $this->reports[CSVReport::class] = $this->csvreport_file;
        }
        $this->reports[JSONReport::class] = $this->report_file;
        $this->finder = $finder;
        $this->debug = $debug;
    }
    
    public function scanListing($listing, $use_base64)
    {
        $this->checkList($listing);
        $this->scanFilesFromListingFile($listing, $use_base64);
        $this->writeReport();
        $this->complete();
    }
    
    public function scanDirectories($dir)
    {
        file_exists(QUEUE_FILENAME) && unlink(QUEUE_FILENAME);
        $scan = new Scanner($this->finder, $this->vars);
        if (method_exists($scan, 'QCR_ScanDirectories')) {
            $scan->QCR_ScanDirectories($dir);
        }
        $this->scanFilesFromListingFile(QUEUE_FILENAME, true);
        file_exists(QUEUE_FILENAME) && unlink(QUEUE_FILENAME);
        $this->writeReport();
        $this->complete();
        unset($scan);
    }

    // /////////////////////////////////////////////////////////////////////////
    
    protected function scanFilesFromListingFile($list_filepath, $use_base64 = false)
    {
        if (!is_file($list_filepath) || !is_readable($list_filepath)) {
            $this->vars->foundTotalFiles = 0;
            return;
        }
        $s_file = new SplFileObject($list_filepath);
        $s_file->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
        
        $s_file->seek($s_file->getSize());
        $this->vars->foundTotalFiles = $s_file->key();
        $s_file->seek(0);

        $scan = new Scanner($this->finder, $this->vars);
        if (method_exists($scan, 'QCR_GoScan')) {
            $scan->QCR_GoScan($s_file, null, $use_base64, false);
            $scan->whitelisting();
        }
        unset($scan);
        unset($s_file);
    }

    protected function checkWorkDir($workdir)
    {
        if (!file_exists($workdir) && !mkdir($workdir) && !is_dir($workdir)) {
            die('Error! Cannot create workdir ' . $workdir . ' for detached scan.');
        } elseif (file_exists($workdir) && !is_writable($workdir)) {
            die('Error! Workdir ' . $workdir . ' is not writable.');
        } 
    }
    
    protected function checkList($listing)
    {
        if (!file_exists($listing) || !is_readable($listing)) {
            die('Error! Listing file ' . $listing . ' not exists or not readable');
        }
    }

    protected function savePid()
    {
        file_put_contents($this->pid_file, strval(getmypid()));
    }

    protected function writeReport()
    {
        $scan_time = round(microtime(true) - $this->start_time, 1);

        foreach($this->json_report->call($this, $this->reports) as $json_report) {
            $json_report->generateReport($this->vars, $scan_time);
            $json_report->write();
        }
    }

    protected function complete()
    {
        @touch($this->done_file);
        $complete = array(
            'method' => 'MALWARE_SCAN_COMPLETE',
            'scan_id' => $this->scan_id,
        );
        $json_complete = json_encode($complete) . "\n";
        $socket = fsockopen('unix://' . $this->sock_file);
        stream_set_blocking($socket, false);
        fwrite($socket, $json_complete);
        fclose($socket);
    }

    protected function setWorkDir($dir, $scan_id)
    {
        $this->workdir = $dir . '/' . $scan_id;
    }

    protected function setSocketFile($sock)
    {
        $this->sock_file = $sock;
    }
}


/**
 * Class ResidentMode used to stay aibolit alive in memory and wait for a job.
 */
class ResidentMode
{
    /**
     * check upload folder every N seconds
     */
    const CHECK_UPLOAD_TIME = 3;
    /**
     * time of last check upload jobs folder
     * @var
     */
    protected $last_dir_check;
    /**
     * parent dir for all resident aibolit related
     * @var string
     */
    protected $resident_dir;
    /**
     * directory for all jobs to be processed by aibolit
     * @var string
     */
    protected $resident_in_dir;
    /**
     * directory with all the malicious files reports to be processed by imunify
     * @var string
     */
    protected $resident_out_dir;
    /**
     * resident aibolit pid
     * @var string
     */
    protected $aibolit_pid;
    /**
     * file lock used to make sure we start only one aibolit
     * @var string
     */
    protected $aibolit_start_lock;
    /**
     * status file used to make sure aibolit didn't get stuck
     * @var string
     */
    protected $aibolit_status_file;
    /**
     * number of seconds while aibolit will stay alive, while not receiving any work
     * @var int
     */
    protected $stay_alive;
    /**
     * maximum number of seconds without updating ABOLIT_STATUS_FILE,
     * used to track if AIBOLIT is stuck, should be killed
     * @var int
     */
    protected $stuck_timeout;
    /**
     * number of seconds scripts would wait for aibolit to finish / send signal
     * @var int
     */
    protected $upload_timeout;
    /**
     * max number of files to pick
     * @var int
     */
    protected $max_files_per_notify_scan;
    /**
     * timestamp of last scan
     * @var int
     */
    protected $last_scan_time;
    /**
     * time to sleep between lifecycle iterations in microseconds
     */
    protected $sleep_time;

    protected $scannedNotify = 0;

    protected $report;

    protected $logger;

    protected $resident_in_dir_notify;
    protected $resident_in_dir_upload;
    protected $blacklist;
    protected $watchdog_socket;
    protected $activation_socket;
    protected $systemd = false;
    protected $interval = 0;
    protected $lastKeepAlive = 0;

    protected $maxMinUid = array();
    protected $signs;
    protected $finder;
    protected $options;

    const JOB_UPLOAD = 'upload';
    const JOB_NOTIFY = 'notify';

    protected $upload_jobs = [];
    protected $notify_jobs = [];

    /**
     * ResidentMode constructor.
     *
     * @param             $finder
     * @param             $debug
     * @param Closure     $report
     * @param             $signs
     * @param null        $blacklist
     * @param Logger|null $logger
     * @param array       $maxMinUid
     * @param array       $options
     * @param string      $resident_dir
     * @param int         $stay_alive
     * @param int         $stuck_timeout
     * @param int         $upload_timeout
     * @param int         $max_files_per_notify_scan
     * @param int         $sleep_time
     */
    public function __construct(
        $finder,
        $debug,
        Closure $report,
        $signs,
        $blacklist = null,
        Logger $logger = null,
        $maxMinUid = array(),
        $options = null,
        $resident_dir = '/var/imunify360/aibolit/resident',
        $stay_alive = 30,
        $stuck_timeout = 5,
        $upload_timeout = 10,
        $max_files_per_notify_scan = 500,
        $sleep_time = 100000
    ) {
        $this->signs = $signs;
        $this->setResidentDir($resident_dir);
        $this->resident_in_dir = $this->resident_dir . '/in';
        $this->resident_in_dir_upload = $this->resident_in_dir . '/upload-jobs';
        $this->resident_in_dir_notify = $this->resident_in_dir . '/notify-jobs';
        $this->resident_out_dir = $this->resident_dir . '/out';
        $this->aibolit_pid = $this->resident_dir . '/aibolit.pid';
        $this->aibolit_start_lock = $this->resident_dir . '/start.lock';
        $this->aibolit_status_file = $this->resident_dir . '/aibolit.status';
        $this->stay_alive = $stay_alive;
        $this->stuck_timeout = $stuck_timeout;
        $this->upload_timeout = $upload_timeout;
        if (!empty($max_files_per_notify_scan)) {
            $this->max_files_per_notify_scan = $max_files_per_notify_scan;
        }
        $this->sleep_time = $sleep_time;
        $this->report = $report;
        $this->blacklist = $blacklist;
        $this->logger = $logger;
        $this->maxMinUid = $maxMinUid;
        $this->options = $options;

        umask(0);
        if (!file_exists($this->resident_dir)) {
            if (!mkdir($this->resident_dir, 0777, true) && !is_dir($this->resident_dir)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_dir));
            }
        }
        if (!file_exists($this->resident_in_dir)) {
            if (!mkdir($this->resident_in_dir, 0755) && !is_dir($this->resident_in_dir)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_in_dir));
            }
        }
        if (!file_exists($this->resident_out_dir)) {
            if (!mkdir($this->resident_out_dir, 0755) && !is_dir($this->resident_out_dir)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_out_dir));
            }
        }
        if (!file_exists($this->resident_in_dir_notify)) {
            if (!mkdir($this->resident_in_dir_notify, 0700) && !is_dir($this->resident_in_dir_notify)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_in_dir_notify));
            }
        }
        if (!file_exists($this->resident_in_dir_upload)) {
            if (!mkdir($this->resident_in_dir_upload, 01777) && !is_dir($this->resident_in_dir_upload)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_in_dir_upload));
            }
        }

        $this->checkSpecs();

        $addr = getenv('NOTIFY_SOCKET');
        if ($addr[0] == '@') {
            $addr = "\0";
        }

        if ($addr) {
            $this->systemd = true;
        }

        if ($this->systemd) {
            $this->watchdog_socket = fsockopen('udg://' . $addr);
            stream_set_blocking($this->watchdog_socket, false);

            $this->activation_socket = fopen('php://fd/3', 'r');
            if ($this->activation_socket === false) {
                die("Something went wrong with activation socket.");
            }
            stream_set_blocking($this->activation_socket, false);

            if (getenv('WATCHDOG_USEC') !== false) {
                $this->interval = intval(getenv('WATCHDOG_USEC'));
            } else {
                $this->interval = 1000000;
            }
        }
        $this->finder = $finder;
        $this->debug = isset($debug) ? $debug : null;
        $this->lifeCycle();
    }

    protected function isRootWriteable($folder)
    {
        if (!file_exists($folder) || !is_dir($folder)) {
            return false;
        }

        $owner_id = (int)fileowner($folder);
        if (function_exists('posix_getpwuid')) {
            $owner = posix_getpwuid($owner_id);
            if (!isset($owner['name']) || $owner['name'] !== 'root') {
                return false;
            }
        } elseif ($owner_id != 0) {
            return false;
        }

        $perms = fileperms($folder);
        if (($perms & 0x0100)                           // owner r
            && ($perms & 0x0080)                        // owner w
            && ($perms & 0x0040) && !($perms & 0x0800)  // owner x
            && !($perms & 0x0010)                       // group without w
            && !($perms & 0x0002)                       // other without w
        ) {
            return true;
        }
        return false;
    }

    protected function isWorldWriteable($folder)
    {
        if (!file_exists($folder) || !is_dir($folder)) {
            return false;
        }

        $perms = fileperms($folder);
        if (($perms & 0x0004)                           // other r
            && ($perms & 0x0002)                        // other w
            && ($perms & 0x0200)                        // sticky bit
        ) {
            return true;
        }
        return false;
    }

    protected function checkSpecs()
    {
        if (!extension_loaded('posix')) {
            die('Error! For resident scan need posix extension.');
        } elseif (!$this->isRootWriteable($this->resident_in_dir_notify)) {
            die('Error! Notify in dir ' . $this->resident_in_dir_notify . ' must be root writeable.');
        } elseif (!$this->isWorldWriteable($this->resident_in_dir_upload)) {
            die('Error! Upload in dir ' . $this->resident_in_dir_upload . ' must be world writeable.');
        }
    }

    protected function setResidentDir($dir)
    {
        $this->resident_dir = $dir;
    }

    protected function writeReport($vars, $scan_time, $type, $file)
    {
        $file = basename($file);
        $critPHP = count($vars->criticalPHP);
        $critJS = count($vars->criticalJS);
        $black = count($vars->blackFiles);
        $warning = count($vars->warningPHP);
        $malware = ($critPHP > 0)
            || ($critJS > 0)
            || ($black > 0)
            || ($warning > 0);
        if ($malware) {
            $this->debugLog("Job {$file}: Found malware. PHP: {$critPHP}; JS: {$critJS}; Black: {$black}; SUS: {$warning}");
        } else {
            $this->debugLog("Job {$file}: No malware found.");
        }
        if ($type == 'upload') {
            $pid = (int)basename($file, '.upload_job');
            if ($malware) {
                $this->debugLog("Job {$file}: Sending SIGUSR1 to {$pid}");
                posix_kill($pid, SIGUSR1);
            } else {
                $this->debugLog("Job {$file}: Sending SIGUSR2 to {$pid}");
                posix_kill($pid, SIGUSR2);
            }
        } elseif ($type == 'notify' && $malware) {
            $filename = basename($file, '.notify_job');
            $reports[JSONReport::class] = $this->resident_out_dir . '/' . $filename . '.report';
            foreach($this->report->call($this, $reports) as $report) {
                $report->generateReport($vars, $scan_time);
                $this->debugLog("Job {$file}: Creating report for job in {$filename}.report");
                $report->write();
            }
            unset($reports);
        }
    }

    /**
     * @param string $pattern
     * @param string $type
     *
     * @return bool
     */
    protected function isJobFileExists($pattern, $type)
    {
        if ($type === self::JOB_UPLOAD) {
            if (empty($this->upload_jobs)) {
                $this->upload_jobs = glob($this->resident_in_dir . $pattern);
                if (!empty($this->upload_jobs)) {
                    return true;
                }
            } else {
                return true;
            }
        }

        if ($type === self::JOB_NOTIFY) {
            if (empty($this->notify_jobs)) {
                $this->notify_jobs = glob($this->resident_in_dir . $pattern);
                if (!empty($this->notify_jobs)) {
                    return true;
                }
            } else {
                return true;
            }
        }
        return false;
    }

    protected function isUploadJob()
    {
        $this->last_dir_check = microtime(true);
        if ($this->isJobFileExists('/upload-jobs/*.upload_job', self::JOB_UPLOAD)) {
            return true;
        }
        return false;
    }

    protected function scanJob($job_file, $type)
    {
        $start_time = microtime(true);

        $vars = new Variables();
        $vars->blacklist = $this->blacklist;
        $vars->maxMinUid = $type == 'notify' ? $this->maxMinUid : [];
        $vars->signs = $this->signs;
        $vars->users = new UserList();
        $vars->options = $this->options;

        $files_to_scan = array();
        $count = 0;

        $job = json_decode(file_get_contents($job_file));
        $file = basename($job_file);

        $this->debugLog("Job {$file} received from queue.");

        if ($type == 'notify') {
            $files_to_scan = $job->files;
            $count = count($files_to_scan);
            $this->debugLog("Job {$file}: notify. {$count} files to be scanned");

            if ($count > $this->max_files_per_notify_scan) {
                $this->debugLog("Job {$file}: Too many files to scan. Job skipped.");
                // TODO: show a warning: too many files to scan, the job was skipped
                return true;
            }

            if ($this->scannedNotify + $count > $this->max_files_per_notify_scan) {
                $this->scannedNotify = 0;
                unset($vars, $files_to_scan);

                return false;
            } else {
                $this->scannedNotify += $count;
            }
        } elseif ($type == 'upload') {
            $files_to_scan = $job->files;
            $count = count($files_to_scan);
            $this->debugLog("Job {$file}: upload. {$count} files to be scanned");

            if ($count > 1) {
                $this->debugLog("Job {$file}: Too many files to scan. Job skipped.");
                // TODO: show a warning: too many files to scan, the job was skipped
                return true;
            }
        }

        $vars->foundTotalFiles = $count;
        $scan = new Scanner($this->finder, $vars, $this->debug);
        if (method_exists($scan, 'QCR_GoScan')) {
            if ($this->systemd) {
                $scan->QCR_GoScan($files_to_scan, array($this, 'keepAlive'), true, false);
            } else {
                $scan->QCR_GoScan($files_to_scan, null, true, false);
            }

            $scan->whitelisting();
        }

        $scan_time = round(microtime(true) - $start_time, 1);

        $this->last_scan_time = time();
        $this->writeReport($vars, $scan_time, $type, $job_file);

        unset($vars, $files_to_scan, $scan);

        if (defined('PROGRESS_LOG_FILE') && file_exists(PROGRESS_LOG_FILE)) {
            @unlink(PROGRESS_LOG_FILE);
        }

        if (defined('CREATE_SHARED_MEMORY') && CREATE_SHARED_MEMORY) {
            shmop_delete(SHARED_MEMORY);
        }

        if (defined('SHARED_MEMORY')) {
            shmop_close(SHARED_MEMORY);
        }

        return true;
    }

    protected function isNotifyJob()
    {
        if ($this->isJobFileExists('/notify-jobs/*.notify_job', self::JOB_NOTIFY)) {
            return true;
        }
        return false;
    }

    protected function scanUploadJob()
    {
        if (!empty($this->upload_jobs)) {
            foreach ($this->upload_jobs as $index => $upload_job) {
                $this->scanJob($upload_job, 'upload');
                $file = basename($upload_job);
                $this->debugLog("Job {$file}: Removing job.");
                unlink($upload_job);
                unset($this->upload_jobs[$index]);
            }
        }
    }

    protected function scanNotifyJob()
    {
        if (!empty($this->notify_jobs)) {
            foreach ($this->notify_jobs as $index => $job) {
                $res = $this->scanJob($job, 'notify');
                if ($res) {
                    $file = basename($job);
                    $this->debugLog("Job {$file}: Removing job.");
                    unlink($job);
                    unset($this->notify_jobs[$index]);
                } else {
                    break;
                }
            }
        }
    }

    public function keepAlive()
    {
        if ((int)((microtime(true) - $this->lastKeepAlive) * 1000000) > $this->interval / 2) {
            stream_get_contents($this->activation_socket);
            fwrite($this->watchdog_socket, 'WATCHDOG=1');
            $this->lastKeepAlive = microtime(true);
        }
        if (((microtime(true) - $this->last_dir_check) > self::CHECK_UPLOAD_TIME)
            && !$this->isDirEmpty($this->resident_in_dir_upload)
            && $this->isUploadJob()
        ) {
            $this->scanUploadJob();
        }
    }

    protected function isDirEmpty($dir)
    {
        $it = new \FilesystemIterator($dir);
        return !$it->valid();
    }

    protected function lifeCycle()
    {
        $this->debugLog("Starting resident-mode loop.");
        $this->last_scan_time = time();
        while (true) {
            if ($this->systemd) {
                $this->keepAlive();
            }
            while ($this->isUploadJob()) {
                $this->scanUploadJob();
            }

            while ($this->isNotifyJob() && !$this->isUploadJob()) {
                $this->scanNotifyJob();
            }
            if ($this->last_scan_time + $this->stay_alive < time()) {
                $this->debugLog("No more jobs. Shutting down.");
                break;
            }
            touch($this->aibolit_status_file);
            usleep($this->sleep_time); // 1/10 of second by default
        }
        if ($this->systemd) {
            fclose($this->watchdog_socket);
            fclose($this->activation_socket);
        }
        unlink($this->aibolit_status_file);
    }

    protected function debugLog($message)
    {
        if ($this->logger === null) {
            return;
        }
        $this->logger->debug($message);
    }
}



class DebugMode
{
    private $debugMode = false;
    private $debugPerfomance = false;
    private $perfomance_stats = [];

    public function __construct($debugMode, $debugPerfomance)
    {
        $this->debugMode = $debugMode;
        $this->debugPerfomance = $debugPerfomance;
    }

    public function QCR_Debug($par_Str = "")
    {
        if ($this->debugMode) {
            return;
        }

        $l_MemInfo = ' ';
        if (function_exists('memory_get_usage')) {
            $l_MemInfo .= ' curmem=' . AibolitHelpers::bytes2Human(memory_get_usage());
        }

        if (function_exists('memory_get_peak_usage')) {
            $l_MemInfo .= ' maxmem=' . AibolitHelpers::bytes2Human(memory_get_peak_usage());
        }

        stdOut("\n" . date('H:i:s') . ': ' . $par_Str . $l_MemInfo . "\n");
    }

    public function getDebugMode()
    {
        return $this->debugMode;
    }

    public function getDebugPerfomance()
    {
        return $this->debugPerfomance;
    }

    public function addPerfomanceItem($item, $time)
    {
        $this->perfomance_stats[$item] = isset($this->perfomance_stats[$item]) ? $this->perfomance_stats[$item] + $time : 0;
    }

    public function printPerfomanceStats()
    {
        $keys = array_keys($this->perfomance_stats);
        for ($i = 0, $iMax = count($keys); $i < $iMax; $i++) {
            $this->perfomance_stats[$keys[$i]] = round($this->perfomance_stats[$keys[$i]] * 1000000);
        }

        arsort($this->perfomance_stats);

        foreach ($this->perfomance_stats as $r => $v) {
            echo $v . "\t\t" . $r . "\n";
        }
    }
}


class FileInfo
{
    private $index = 0;
    private $inode = 0;
    private $filename = '';
    private $size = 0;
    private $created = 0;
    private $modified = 0;
    private $hash = 0;
    private $sha256 = 0;
    private $sha1file = 0;
    private $content = '';
    private $norm_content = '';
    private $is_binary = 0;
    private $hashtable = null;
    private $uid = false;
    private $gid = false;
    private $mode = false;

    /**
     * @return int|string
     */
    public function getSha1file()
    {
        if ($this->sha1file == 0) {
            $this->sha1file = sha1_file($this->filename);
        }
        return $this->sha1file;
    }

    public function __construct($filename, $index, $hashtable = null)
    {
        $this->index = $index;
        $this->filename = $filename;
        $this->hashtable = $hashtable;
    }

    /**
     * @return bool
     */
    public function isBinary()
    {
        $header = '';
        if ($this->is_binary === 0) {
            if ($this->content == '') {
                $header = @file_get_contents($this->filename, false, null, 0, 4);
            } else {
                $header = substr($this->content, 0, 4);
            }
            if ($header === chr(127) . 'ELF') {
                $this->is_binary = true;
            } else {
                $this->is_binary = false;
            }
            unset($header);
        }
        return $this->is_binary;
    }

    /**
     * @return false|mixed|string
     */
    public function getContent()
    {
        if ($this->content == '') {
            $this->content = @file_get_contents($this->filename);
        }
        return $this->content;
    }

    /**
     * @return string
     */
    public function getContentWithoutSpaces($max_size = false)
    {
        if($this->norm_content !== '') {
            return $this->norm_content;
        }
        if (!$max_size) {
            $this->norm_content = Normalization::strip_whitespace($this->getContent());
        } else if(is_numeric($max_size)) {
            $this->norm_content = Normalization::strip_whitespace($this->getContentBytes($max_size));
        }
        return $this->norm_content;
    }

    public function getContentBytes($max_bytes)
    {
        if ($this->content == '') {
            $this->content = @file_get_contents($this->filename, false, null, 0, $max_bytes);
        }
        return $this->content;
    }

    /**
     * @param $text
     * @return string
     */
    private function _hash_($text)
    {
        static $r;

        if (empty($r)) {
            for ($i = 0; $i < 256; $i++) {
                if ($i < 33 or $i > 127) {
                    $r[chr($i)] = '';
                }
            }
        }

        return sha1(strtr($text, $r));
    }

    /**
     * @return integer
     */
    public function getIndex()
    {
        return $this->index;
    }

    /**
     * @return string
     */
    public function getFilename()
    {
        return $this->filename;
    }

    private function _setStat()
    {
        $info = stat($this->filename);
        $this->size = $info['size'];
        $this->created = $info['ctime'];
        $this->modified = $info['mtime'];
        $this->inode = $info['ino'];
        $this->uid = $info['uid'];
        $this->gid = $info['gid'];
        $this->mode = sprintf("0%o", 0777 & $info['mode']);
    }

    /**
     * @return int|mixed
     */
    public function getSize()
    {
        if ($this->size == 0) {
            $this->_setStat();
        }
        return $this->size;
    }

    /**
     * @return int|mixed
     */
    public function getInode()
    {
        if ($this->inode == 0) {
            $this->_setStat();
        }
        return $this->inode;
    }

    /**
     * @return int|mixed
     */
    public function getCreated()
    {
        if ($this->created == 0) {
            $this->_setStat();
        }
        return $this->created;
    }

    /**
     * @return int|mixed
     */
    public function getModified()
    {
        if ($this->modified == 0) {
            $this->_setStat();
        }
        return $this->modified;
    }

    /**
     * @return int|string
     */
    public function getHash()
    {
        if ($this->hash == 0) {
            $this->hash = $this->_hash_($this->getContentWithoutSpaces());
        }
        return $this->hash;
    }

    /**
     * @return int|string
     */
    public function getSha256()
    {
        if ($this->hashtable !== null && $this->hashtable->get($this->filename) !== false) {
            $this->sha256 = $this->hashtable->get($this->filename);
        }
        if ($this->sha256 == 0) {
            $this->sha256 = hash('sha256', $this->getContent());
        }
        return $this->sha256;
    }

    /**
     * @return int|mixed
     */
    public function getUid()
    {
        if ($this->uid === false) {
            $this->_setStat();
        }
        return $this->uid;
    }

    /**
     * @return int|mixed
     */
    public function getGid()
    {
        if ($this->gid === false) {
            $this->_setStat();
        }
        return $this->gid;
    }

    /**
     * @return int|mixed
     */
    public function getMode()
    {
        if ($this->mode === false) {
            $this->_setStat();
        }
        return $this->mode;
    }
}



class HashTable
{
    private $hashes = [];

    public function add($paths, $hashes)
    {
        $this->hashes[0] = $paths;
        $this->hashes[1] = $hashes;
    }

    public function get($filename)
    {
        $index = array_search($filename, $this->hashes[0]);
        if ($index === false) {
            return false;
        }
        return $this->hashes[1][$index];
    }
}


class Finder
{
    const MAX_ALLOWED_PHP_HTML_IN_DIR = 600;

    private $sym_links              = [];
    private $skipped_folders        = [];
    private $doorways               = [];

    private $total_dir_counter      = 0;
    private $total_files_counter    = 0;
    private $checked_hashes         = [];

    private $initial_dir            = '';
    private $initial_level          = null;
    private $level_limit            = null;

    private $filter;

    public function __construct($filter = null, $level_limit = null)
    {
        $this->filter = $filter;
        $this->level_limit = $level_limit;
    }

    private function linkResolve($path)
    {
        return realpath($path);
    }

    private function resolve($path, $follow_symlinks)
    {
        if (!$follow_symlinks || !is_link($path)) {
            return $path;
        }
        return $this->linkResolve($path);
    }

    private function isPathCheckedAlready($path)
    {
        $root_hash = crc32($path);
        if (isset($this->checked_hashes[$root_hash])) {
            return true;
        }
        $this->checked_hashes[$root_hash] = '';
        return false;
    }

    private function walk($path, $follow_symlinks)
    {
        $level = substr_count($path, '/');
        if (isset($this->level_limit) && (($level - $this->initial_level + 1) > $this->level_limit)) {
            return;
        }
        $l_DirCounter          = 0;
        $l_DoorwayFilesCounter = 0;

        if ($follow_symlinks && $this->isPathCheckedAlready($path)) {
            return;
        }

        # will not iterate dir, if it should be ignored
        if (!$this->filter->needToScan($path, false, true)) {
            $this->skipped_folders[] = $path;
            return;
        }
        $dirh = @opendir($path);
        if ($dirh === false) {
            return;
        }

        while (($entry = readdir($dirh)) !== false) {
            if ($entry == '.' || $entry == '..') {
                continue;
            }
            $entry = $path . DIRECTORY_SEPARATOR . $entry;
            if (is_link($entry)) {

                $this->sym_links[] = $entry;

                if (!$follow_symlinks) {
                    continue;
                }
                $real_path = $this->resolve($entry, true);
            } else {
                $real_path = $entry;
            }
            if (is_dir($entry)) {
                $l_DirCounter++;
                if ($l_DirCounter > self::MAX_ALLOWED_PHP_HTML_IN_DIR) {
                    $this->doorways[]  = $path;
                    $l_DirCounter = -655360;
                }
                $this->total_dir_counter++;
                yield from $this->walk($real_path, $follow_symlinks);
            } else if (is_file($entry)) {
                $stat = stat($entry);
                if (!$stat) {
                    continue;
                }
                if (is_callable([$this->filter, 'checkShortExt']) && $this->filter->checkShortExt($entry)) {
                    $l_DoorwayFilesCounter++;
                    if ($l_DoorwayFilesCounter > self::MAX_ALLOWED_PHP_HTML_IN_DIR) {
                        $this->doorways[]           = $path;
                        $l_DoorwayFilesCounter = -655360;
                    }
                }
                if ($follow_symlinks && $this->isPathCheckedAlready($real_path)) {
                    continue;
                }
                $need_to_scan = $this->filter->needToScan($real_path, $stat);
                if ($need_to_scan) {
                    $this->total_files_counter++;
                    yield $real_path;
                }
            }
        }
        closedir($dirh);
    }

    private function expandPath($path, $follow_symlinks)
    {
        if ($path) {
            if (is_dir($path)) {
                yield from $this->walk($path, $follow_symlinks);
            } else {
                $need_to_scan = $this->filter->needToScan($path);
                if ($need_to_scan) {
                    yield $path;
                }
            }
        }
    }

    public function find($target)
    {
        if ($target === '/') {
            $target = '/*';
        }
        if (is_string($target) && substr($target, -1) == DIRECTORY_SEPARATOR) {
            $target = substr($target, 0, -1);
        }

        if (is_callable([$this->filter, 'getGenerated']) && !$this->filter->getGenerated()
            && is_callable([$this->filter, 'generateCheckers'])
        ) {
            $this->filter->generateCheckers();
        }

        # We shouldn't use iglob for list of paths,
        # cause they cannot contain * or regexp
        # but can contain invalid sequence e.g. [9-0]
        $paths = is_array($target) ? $target : new GlobIterator($target, FilesystemIterator::CURRENT_AS_PATHNAME);
        foreach ($paths as $path) {
            $this->initial_dir = realpath($path);
            $this->initial_level = substr_count($this->initial_dir, '/');
            $path = $this->linkResolve($path);
            yield from $this->expandPath($path, $this->filter->isFollowSymlink());
        }
    }

    private function convertTemplatesToRegexp($templates)
    {
        return '~(' . str_replace([',', '.', '*'], ['|', '\\.', '.*'], $templates) . ')~i';
    }

    public function setLevelLimit($level)
    {
        $this->level_limit = $level;
    }

    public function getSymlinks()
    {
        return $this->sym_links;
    }

    public function getDoorways()
    {
        return $this->doorways;
    }

    public function skippedDirs()
    {
        return $this->skipped_folders;
    }

    public function getTotalDirs()
    {
        return $this->total_dir_counter;
    }

    public function getTotalFiles()
    {
        return $this->total_files_counter;
    }

    public function getFilter()
    {
        return $this->filter;
    }
}

class FileFilter
{
    const LOG_AND_MAIL_PATTERN = [
        '/sess\_\w*$',
        '/stat/usage\_\w+\.html',
        '/stat/site\_\w+\.html',
        '/webstat/awstats.*\.txt',
        '/awstats/awstats.*\.txt',
        '/awstats/.{1,80}\.pl',
        '/awstats/.{1,80}\.html',
        '/logs/error\_log\..*',
        '/logs/xferlog\..*',
        '/logs/access\_log\..*',
        '/domlogs/.+',
        '/logs/cron\..*',
        '/logs/exceptions/.+\.log(?:\.\d)?(?:\.gz)?$',
        '/mail(?:/[^/]+)*/[^,]+,S=[^,]+,W=.+',
        '/mail(?:/[^/]+)*/[^,]+,S=.+',
        '/mail(?:/[^/]+)*/storage/u\.[0-9]+',
        '/mail(?:/[^/]+)*/storage/m\.[0-9]+',
        '/Maildir(?:/[^/]+)*/[^,]+,S=[^,]+,W=.+',
        '/Maildir(?:/[^/]+)*/[^,]+,S=.+',
        '^/var/ossec/.*',
    ];

    const IMUNIFY_LOG_PATTERN = [
        '/var/log/imunify360/acronis-installer\.log$',
        '/var/log/imunify360/console\.log(?:\.\d)?(?:\.gz)?$',
        '/var/log/imunify360/debug\.log$',
        '/var/log/imunify360/error\.log$',
        '/var/log/install-mod\_remoteip\.log(?:\.\d{1.4})?(?:\.pid)?r$',
        '/var/log/imunify360/malware\_scan\_\d{10}\.log$',
        '/var/log/imunify360/network\.log$',
        '/var/log/imunify360/process\_message\.log$',
        '/var/log/imunify360-webshield/access.log(?:-\d{8})?(?:.gz)?$',
        '/var/log/imunify360-webshield/error.log(?:-\d{8})?(?:.gz)?$',
        '/.revisium_antivirus_cache/.revisium\d+/',
        '/admin/plib/modules/revisium-antivirus/library/externals/',
    ];

    const IMUNIFY_DIRS = [
        '/etc/cagefs/conf.d/ai-bolit.cfg',
        '/etc/cagefs/conf.d/clamav.cfg',
        '/etc/cagefs/exclude/imunify360',
        '/etc/chkserv.d/imunify-antivirus',
        '/etc/chkserv.d/imunify360-agent',
        '/etc/cron.daily/imunify-antivirus.cron',
        '/etc/cron.daily/imunify360.cron',
        '/etc/imunify360-webshield',
        '/etc/imunify360',
        '/etc/logrotate.d/imunify360',
        '/etc/nginx/conf.d/i360.remoteip.conf',
        '/etc/sysconfig/imunify360',
        '/opt/ai-bolit',
        '/opt/alt/python35/bin/imunify360-agent',
        '/opt/alt/python35/bin/imunify360-command-wrapper',
        '/opt/alt/python35/lib/python3.5/site-packages/defence360agent',
        '/opt/alt/python35/share/imunify360',
        '/run/chkservd/imunify360-webshield',
        '/run/chkservd/restart_track/imunify360-webshield',
        '/run/imunify360-webshield.pid',
        '/usr/bin/imunify-antivirus',
        '/usr/bin/imunify360-agent',
        '/usr/bin/imunify360-command-wrapper',
        '/usr/lib/systemd/system/imunify-antivirus.service',
        '/usr/lib/systemd/system/imunify360-pure.service',
        '/usr/lib/systemd/system/imunify360-webshield',
        '/usr/lib/systemd/system/imunify360.service',
        '/usr/local/cpanel/base/frontend/paper_lantern/imunify',
        '/usr/local/directadmin/plugins/Imunify',
        '/usr/sbin/imunify360-webshield',
        '/var/cache/imunify360-webshield',
        '/var/cpanel/apps',
        '/var/imunify360',
        '/var/log/cloudlinux-backup-util'
    ];

    const SHORT_LIST_EXT = [
        'php',
        'php3',
        'php4',
        'php5',
        'php7',
        'pht',
        'html',
        'htm',
        'phtml',
        'shtml',
        'khtml',
        '',
        'ico',
        'txt'
    ];

    const SUSPICIOUS_EXT = [
        'cgi',
        'pl',
        'o',
        'so',
        'py',
        'sh',
        'phtml',
        'php3',
        'php4',
        'php5',
        'php6',
        'php7',
        'pht',
        'shtml'
    ];

    private $sensitiveExt = [
        'php',
        'js',
        'json',
        'htaccess',
        'html',
        'htm',
        'tpl',
        'inc',
        'css',
        'txt',
        'sql',
        'ico',
        '',
        'susp',
        'suspected',
        'zip',
        'tar'
    ];

    const SKIP_SMART_MASK = [
        '/template_\w{32}.css',
        '/cache/templates/.{1,150}\.tpl\.php',
        '/system/cache/templates_c/\w{1,40}\.php',
        '/assets/cache/rss/\w{1,60}',
        '/cache/minify/minify_\w{32}',
        '/cache/page/\w{32}\.php',
        '/cache/object/\w{1,10}/\w{1,10}/\w{1,10}/\w{32}\.php',
        '/cache/wp-cache-\d{32}\.php',
        '/cache/page/\w{32}\.php_expire',
        '/cache/page/\w{32}-cache-page-\w{32}\.php',
        '\w{32}-cache-com_content-\w{32}\.php',
        '\w{32}-cache-mod_custom-\w{32}\.php',
        '\w{32}-cache-mod_templates-\w{32}\.php',
        '\w{32}-cache-_system-\w{32}\.php',
        '/cache/twig/\w{1,32}/\d+/\w{1,100}\.php',
        '/autoptimize/js/autoptimize_\w{32}\.js',
        '/bitrix/cache/\w{32}\.php',
        '/bitrix/cache/.{1,200}/\w{32}\.php',
        '/bitrix/cache/iblock_find/',
        '/bitrix/managed_cache/MYSQL/user_option/[^/]+/',
        '/bitrix/cache/s1/bitrix/catalog\.section/',
        '/bitrix/cache/s1/bitrix/catalog\.element/',
        '/bitrix/cache/s1/bitrix/menu/',
        '/catalog.element/[^/]+/[^/]+/\w{32}\.php',
        '/bitrix/managed\_cache/.{1,150}/\.\w{32}\.php',
        '/core/cache/mgr/smarty/default/.{1,100}\.tpl\.php',
        '/core/cache/resource/web/resources/[0-9]{1,50}\.cache\.php',
        '/smarty/compiled/SC/.{1,100}/%%.{1,200}\.php',
        '/smarty/.{1,150}\.tpl\.php',
        '/smarty/compile/.{1,150}\.tpl\.cache\.php',
        '/files/templates_c/.{1,150}\.html\.php',
        '/uploads/javascript_global/.{1,150}\.js',
        '/assets/cache/rss/\w{32}',
        'сore/cache/resource/web/resources/\d+\.cache\.php',
        '/assets/cache/docid_\d+_\w{32}\.pageCache\.php',
        '/t3-assets/dev/t3/.{1,150}-cache-\w{1,20}-.{1,150}\.php',
        '/t3-assets/js/js-\w{1,30}\.js',
        '/temp/cache/SC/.{1,100}/\.cache\..{1,100}\.php',
        '/tmp/sess\_\w{32}$',
        '/assets/cache/docid\_.{1,100}\.pageCache\.php',
        '/stat/usage\_\w{1,100}\.html',
        '/stat/site\_\w{1,100}\.html',
        '/gallery/item/list/\w{1,100}\.cache\.php',
        '/core/cache/registry/.{1,100}/ext-.{1,100}\.php',
        '/core/cache/resource/shk\_/\w{1,50}\.cache\.php',
        '/cache/\w{1,40}/\w+-cache-\w+-\w{32,40}\.php',
        '/webstat/awstats.{1,150}\.txt',
        '/awstats/awstats.{1,150}\.txt',
        '/awstats/.{1,80}\.pl',
        '/awstats/.{1,80}\.html',
        '/inc/min/styles_\w+\.min\.css',
        '/inc/min/styles_\w+\.min\.js',
        '/logs/error\_log\.', '/logs/xferlog\.',
        '/logs/access_log\.',
        '/logs/cron\.',
        '/logs/exceptions/.{1,200}\.log$',
        '/hyper-cache/[^/]{1,50}/[^/]{1,50}/[^/]{1,50}/index\.html',
        '/mail/new/[^,]+,S=[^,]+,W=',
        '/mail/new/[^,]=,S=',
        '/application/logs/\d+/\d+/\d+\.php',
        '/sites/default/files/js/js_\w{32}\.js',
        '/yt-assets/\w{32}\.css',
        '/wp-content/cache/object/\w{1,5}/\w{1,5}/\w{32}\.php',
        '/catalog\.section/\w{1,5}/\w{1,5}/\w{32}\.php',
        '/simpla/design/compiled/[\w\.]{40,60}\.php',
        '/compile/\w{2}/\w{2}/\w{2}/[\w.]{40,80}\.php',
        '/sys-temp/static-cache/[^/]{1,60}/userCache/[\w\./]{40,100}\.php',
        '/session/sess_\w{32}',
        '/webstat/awstats\.[\w\./]{3,100}\.html',
        '/stat/webalizer\.current',
        '/stat/usage_\d+\.html'
    ];

    private $ignoreExt              = [];
    private $ignoreListPatterns     = [];

    private $ignoreList             = null;
    private $ignoreFilenameByRegexp = null;
    private $onlyFilepathRegexp     = null;
    private $skipFilesOlder         = null;
    private $initialDir             = null;

    private $file_checkers          = [];
    private $dir_checkers           = [];
    private $excludes               = [];

    private $check_is_not_root;
    private $check_is_not_system;
    private $check_is_file;
    private $ignore_quar;
    private $check_file_older;
    private $check_ignore_file;
    private $check_ignore_filename_template;
    private $check_only_filepath_template;
    private $check_scope;
    private $check_ext;
    private $ignore_ext;
    private $check_short_ext;
    private $ignore_path_pattern;

    private $skipRootOwner          = false;
    private $skipSystemOwner        = false;
    private $followSymlink          = false;
    private $ignoreQuarantine       = false;
    private $scanAllExt             = false;
    private $smartScan              = false;
    private $imunify_filters        = false;

    private $ignored_av_admin       = false;
    private $ignored_av_internal    = false;
    private $admin_watched          = false;
    private $generated              = false;



    private $ignore_symlink = true;
    private $match_patterns = [];
    private $no_match_patterns = [];

    private $ignored_av_admin_file      = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/ignored/av-admin.txt';
    private $ignored_av_internal_file   = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/ignored/av-internal.txt';
    private $admin_watched_file         = '/etc/sysconfig/imunify360/malware-filters-admin-conf/admin/watched.txt';
    private $basedirs_file              = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/basedirs-list.txt';

    private function getIgnoredAVAdmin()
    {
        if (!$this->ignored_av_admin) {
            $this->ignored_av_admin = trim(file_get_contents($this->ignored_av_admin_file));
        }
        return $this->ignored_av_admin;
    }

    private function getIgnoredAVInternal()
    {
        if (!$this->ignored_av_internal) {
            $this->ignored_av_internal = trim(file_get_contents($this->ignored_av_internal_file));
        }
        return $this->ignored_av_internal;
    }

    private function getBaseDirs()
    {
        return file($this->basedirs_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    }

    private function fixTrailingSlash($path)
    {
        if ($path[0] !== '/') {
            $path = '/' . $path;
        }
        return $path;
    }

    private function resolveBaseDirs($basedirs, $path)
    {
        $result = [];
        $tmp = substr($path, 1);
        $tmp = $this->fixTrailingSlash($tmp);
        foreach ($basedirs as $dir) {
            $result [] = $dir . $tmp;
        }
        return $result;
    }

    private function processWatchedItems($basedirs, $paths)
    {
        $result = [];
        foreach ($paths as $item) {
            $item = trim($item);
            if ($item[0] === '#') {
                continue;
            } else if ($item[0] === '+') {
                $result = array_merge($result, $this->resolveBaseDirs($basedirs, $item));
            } else {
                $result[] = $item;
            }
        }
        return $result;
    }

    private function getAdminWatched()
    {
        if (!$this->admin_watched) {
            $this->admin_watched = [];
            $basedirs = $this->getBaseDirs();
            $paths = file($this->admin_watched_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
            $this->admin_watched = $this->processWatchedItems($basedirs, $paths);
        }
        return $this->admin_watched;
    }

    public function setSmartScan()
    {
        $this->smartScan = true;
    }

    public function isSmartScan()
    {
        return $this->smartScan;
    }

    public function setImunifyFilters()
    {
        $this->imunify_filters = true;
    }

    public function setScanAll()
    {
        $this->scanAllExt = true;
    }

    public function setIgnoreExt($ext_list)
    {
        if (!$ext_list) {
            return;
        }

        $this->ignoreExt = explode(',', $ext_list);
        for ($i = 0, $iMax = count($this->ignoreExt); $i < $iMax; $i++) {
            $this->ignoreExt[$i] = trim($this->ignoreExt[$i]);
        }
        $this->ignoreExt = array_flip($this->ignoreExt);
    }

    public function setSensitiveExt($ext_list)
    {
        if (!$ext_list) {
            return;
        }

        $this->sensitiveExt = explode(",", $ext_list);
        for ($i = 0, $iMax = count($this->sensitiveExt); $i < $iMax; $i++) {
            if ($this->sensitiveExt[$i] == '.') {
                $this->sensitiveExt[$i] = '';
            }
        }
        $this->sensitiveExt = array_flip($this->sensitiveExt);
    }

    public function getSensitiveExt()
    {
        return array_flip($this->sensitiveExt);
    }

    public function setIgnoreListPatterns($filepath)
    {
        if (!file_exists($filepath) || !is_file($filepath) || !is_readable($filepath)) {
            return;
        }
        $this->ignoreListPatterns = [];
        $content = file_get_contents($filepath);
        $list = explode("\n", $content);
        foreach ($list as $pattern) {
            if (trim($pattern) == '') {
                continue;
            }
            $this->ignoreListPatterns[] = $pattern;
        }
    }

    public function __construct()
    {
        $this->sensitiveExt = array_merge($this->sensitiveExt, self::SUSPICIOUS_EXT);
        $this->sensitiveExt = array_flip($this->sensitiveExt);

        $this->ignore_quar = function ($file) {
            if (strpos($file, '/.imunify.quarantined') !== false) {
                $st = stat($file);
                if (!$st) {
                    return false;
                }
                return $st['uid'] !== 0;
            }
            return true;
        };

        $this->ignore_excludes = function ($file) {
            $tree = $this->getTree($file);
            if ($this->pathRelatesTo($tree, $this->excludes)) {
                return false;
            }
            return true;
        };

        $this->check_file_older = function ($file) {
            return (@filemtime($file) > $this->skipFilesOlder) || (@filectime($file) > $this->skipFilesOlder);
        };

        $this->check_ignore_file = function ($file) {
            $tree = $this->getTree($file);
            if ($this->pathRelatesTo($tree, $this->ignoreList, true)) {
                return false;
            }
            return true;
        };

        $this->check_ignore_filename_template = function ($file) {
            return !preg_match($this->ignoreFilenameByRegexp, basename($file));
        };

        $this->check_only_filepath_template = function ($file) {
            return preg_match($this->onlyFilepathRegexp, $file);
        };

        $this->check_is_not_root = function ($file) {
            $stat = stat($file);
            return $stat['gid'] !== 0 && $stat['uid'] !== 0;
        };

        $this->check_is_not_system = function ($file) {
            $stat = stat($file);
            return ($stat['uid'] >= $this->skipSystemOwner[0] && $stat['uid'] <= $this->skipSystemOwner[1]);
        };

        $this->check_is_file = function ($file) {
            return is_file($file);
        };

        $this->check_file_patterns = function ($file) {
            foreach($this->match_patterns as $pattern) {
                $match = fnmatch($pattern, $file);
                if ($match) {
                    return $match;
                }
            }
            return false;
        };

        $this->check_file_not_patterns = function ($file) {
            foreach($this->no_match_patterns as $pattern) {
                $match = fnmatch($pattern, $file);
                if ($match) {
                    return !$match;
                }
            }
            return true;
        };

        $this->ignore_symlink = function ($file) {
            return !is_link($file);
        };

        $this->check_scope = function ($file) {
            return strpos($file, $this->initialDir) === 0;
        };

        $this->ignore_dots = function ($file) {
            return !($file == '.' || $file == '..');
        };

        $this->check_ext = function ($file) {
            if ($this->scanAllExt) {
                return true;
            }
            $ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));
            return isset($this->sensitiveExt[$ext]);
        };

        $this->ignore_ext = function ($file) {
            $ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));
            return !isset($this->ignoreExt[$ext]);
        };

        $this->check_short_ext = function ($file) {
            $ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));
            return in_array($ext, self::SHORT_LIST_EXT);
        };

        $this->ignore_path_pattern = function ($file) {
            foreach ($this->ignoreListPatterns as $pattern) {
                if (($pattern != '') && preg_match('#' . $pattern . '#', $file)) {
                    return false;
                }
            }
            return true;
        };

        $this->imunify_filter = function ($file) {
            if (preg_match('~' . $this->getIgnoredAVAdmin() . '~msi', $file)) {
                return false;
            }

            if (preg_match('~' . $this->getIgnoredAVInternal() . '~msi', $file)) {
                foreach ($this->getAdminWatched() as $rec_watched) {
                    if (fnmatch($rec_watched, $file)) {
                        return true;
                    }
                }
                return false;
            }
            return true;
        };

        $this->excludes = array_flip(self::IMUNIFY_DIRS);

        $this->file_checkers[] = $this->ignore_path_pattern;
        $this->file_checkers[] = $this->check_is_file;
        $this->file_checkers[] = $this->check_ext;
        $this->file_checkers[] = $this->ignore_excludes;
        $this->dir_checkers[] = $this->ignore_path_pattern;
        $this->dir_checkers[] = $this->ignore_excludes;
        $this->dir_checkers[] = $this->ignore_dots;
    }

    public function setIgnoreListFile($filepath)
    {
        if (!file_exists($filepath) || !is_file($filepath) || !is_readable($filepath)) {
            return;
        }
        $this->ignoreList = [];
        $content = file_get_contents($filepath);
        $list = explode("\n", $content);
        foreach ($list as $base64_filepath) {
            if ($base64_filepath !== '') {
                $this->ignoreList[$base64_filepath] = '';
            }
        }
    }

    public function setIgnoreFilenames($templates)
    {
        if (!$templates) {
            return;
        }

        $this->no_match_patterns = explode(',', $templates);
        for ($i = 0, $iMax = count($this->no_match_patterns); $i < $iMax; $i++) {
            $this->no_match_patterns[$i] = trim($this->no_match_patterns[$i]);
        }
    }

    public function setOnlyFilepaths($templates)
    {
        if (empty($templates)) {
            return;
        }
        $this->match_patterns = explode(',', $templates);
        for ($i = 0, $iMax = count($this->match_patterns); $i < $iMax; $i++) {
            $this->match_patterns[$i] = trim($this->match_patterns[$i]);
        }
    }

    public function setSkipFilesOlder($unix_timestamp)
    {
        $this->skipFilesOlder = $unix_timestamp;
    }

    public function setSkipRootOwner()
    {
        $this->skipRootOwner = true;
    }

    public function setSkipSystemOwner($min_max_uid)
    {
        if (is_array($min_max_uid)) {
            $this->skipSystemOwner = $min_max_uid;
        }
    }

    public function setFollowSymlink()
    {
        $this->followSymlink = true;
    }

    public function isFollowSymlink()
    {
        return $this->followSymlink;
    }


    public function setIgnoreQuarantine()
    {
        $this->ignoreQuarantine = true;
    }

    public function generateCheckers()
    {
        $file_checkers = $this->file_checkers;
        if ($this->match_patterns) {
            $file_checkers[] = $this->check_file_patterns;
        }
        if ($this->no_match_patterns) {
            $file_checkers[] = $this->check_file_not_patterns;
        }
        if ($this->skipRootOwner) {
            $file_checkers[] = $this->check_is_not_root;
        }
        if ($this->skipSystemOwner && is_array($this->skipSystemOwner)) {
            $file_checkers[] = $this->check_is_not_system;
        }

        $dir_checkers = $this->dir_checkers;

        if(!$this->followSymlink) {
            $dir_checkers[] = $this->ignore_symlink;
        }

        if ($this->ignoreQuarantine) {
            $dir_checkers[] = $this->ignore_quar;
        }

        if ($this->skipFilesOlder) {
            $file_checkers[] = $this->check_file_older;
        }

        if ($this->ignoreFilenameByRegexp) {
            $file_checkers[] = $this->check_ignore_filename_template;
        }

        if (!empty($this->ignoreList)) {
            $file_checkers[] = $this->check_ignore_file;
            $dir_checkers[] = $this->check_ignore_file;
        }

        if ($this->onlyFilepathRegexp) {
            $file_checkers[] = $this->check_only_filepath_template;
        }

        if (!empty($this->ignoreExt)) {
            $file_checkers[] = $this->ignore_ext;
        }

        if ($this->imunify_filters) {
            $file_checkers[] = $this->imunify_filter;
        }

        $this->ignoreListPatterns = array_merge($this->ignoreListPatterns, self::IMUNIFY_LOG_PATTERN, self::LOG_AND_MAIL_PATTERN);

        if($this->smartScan) {
            $this->ignoreListPatterns = array_merge($this->ignoreListPatterns, self::SKIP_SMART_MASK);
        }

        $this->file_checkers = $file_checkers;
        $this->dir_checkers = $dir_checkers;
        $this->generated = true;
    }

    public function getFileCheckers()
    {
        return $this->file_checkers;
    }

    public function getDirCheckers()
    {
        return $this->dir_checkers;
    }

    private function check($file, $where, $stat = false)
    {

        if (!$file) {
            return false;
        }
        if (!$stat) {
            $stat = stat($file);
        }
        foreach ($where as $func) {
            if(empty($func)) {
                continue;
            }
            if (!$func($file, $stat)) {

                return false;
            }
        }
        return true;
    }

    public function needToScan($file, $stat = false, $only_dir = false)
    {
        if (!$file) {
            return false;
        }

        if (!$stat) {
            $stat = @stat($file);
            if (!$stat) {
                return false;
            }
        }

        if (!$only_dir && !$this->check($file, $this->getFileCheckers(), $stat)) {
            return false;
        }

        if (!$this->check($file, $this->getDirCheckers(), $stat)) {
            return false;
        }

        return true;
    }

    private function getTree($file)
    {
        $tree = [];
        $path = $file;
        while ($path !== '.' && $path !== '/') {
            $path = dirname($path, 1);
            $tree[] = $path;
        }
        $tree[] = $file;
        return $tree;
    }

    private function pathRelatesTo($tree, $pathes, $base64 = false)
    {
        foreach ($tree as $path) {
            if ($base64) {
                $path = base64_encode($path);
            }
            if (isset($pathes[$path])) {
                return true;
            }
        }
        return false;
    }

    public function checkShortExt($path)
    {
        return $this->check_short_ext->call($this, $path);
    }


    public function checkNotSystem($path)
    {
        return $this->check_is_not_system->call($this, $path);
    }

    public function getGenerated()
    {
        return $this->generated;
    }
    
}


class Scanner
{
    private $addPrefix;
    private $noPrefix;
    private $finder;
    private $vars;
    private $debug;

    public function __construct($finder, $vars, $debug = null)
    {
        $this->addPrefix = isset($vars->options['addprefix']) ? $vars->options['addprefix'] : '';
        $this->noPrefix = isset($vars->options['noprefix']) ? $vars->options['noprefix'] : '';;
        $this->finder = $finder;
        $this->vars = $vars;
        $this->suspicious = isset($vars->options['with-suspicious']);
        $this->debug = $debug;
    }

    private function CloudAssitedFilter($files_list)
    {
        $black_files = [];
        $white_files = [];
        try {
            $car                = Factory::instance()->create(CloudAssistedRequest::class, [CLOUD_ASSIST_TOKEN]);
            $cloud_assist_files = new CloudAssistedFiles($car, $files_list, $this->vars);
            $white_files        = $cloud_assist_files->getWhiteList();
            $black_files        = $cloud_assist_files->getBlackList();
            unset($cloud_assist_files);
        }
        catch (\Exception $e) {
            fwrite(STDERR, 'Warning: [CAS] ' . $e->getMessage() . PHP_EOL);
            if (isset($this->debug)) {
                $this->debug->QCR_Debug($e->getMessage());
            }

        }
        $this->vars->blackFiles = array_diff_assoc(array_merge($this->vars->blackFiles, $black_files), $white_files);
        return array_diff($files_list, array_keys($black_files), array_keys($white_files));
    }

    public function QCR_ScanDirectories($l_RootDir)
    {
        static $l_Buffer = '';

        if (isset($this->debug)) {
            $this->debug->QCR_Debug('Scan ' . $l_RootDir);
        }

        $listFiles = $this->finder->find($l_RootDir);
        foreach ($listFiles as $l_FileName) {
            if (ONE_PASS) {
                $this->QCR_ScanFile($l_FileName, $this->vars, null, $this->vars->counter++);
            } else {
                $l_Buffer .= FilepathEscaper::encodeFilepathByBase64($l_FileName) . "\n";
            }

            $this->vars->counter++;

            if (strlen($l_Buffer) > 32000) {
                file_put_contents(QUEUE_FILENAME, $l_Buffer, FILE_APPEND) || die2("Cannot write to file " . QUEUE_FILENAME);
                $l_Buffer = '';
            }

        }

        $this->vars->symLinks = $this->finder->getSymlinks();
        $this->vars->doorway = $this->finder->getDoorways();
        $this->vars->foundTotalDirs = $this->finder->getTotalDirs();
        $this->vars->foundTotalFiles = $this->finder->getTotalFiles();

        if (!empty($l_Buffer)
            && (isset($this->vars->options['use-template-in-path'])
                || $l_RootDir == ROOT_PATH
            )
        ) {
            file_put_contents(QUEUE_FILENAME, $l_Buffer, FILE_APPEND) || die2("Cannot write to file " . QUEUE_FILENAME);
            $l_Buffer = '';
        }
        unset($listFiles);
    }

    public function QCR_GoScan($s_file, $callback = null, $base64_encoded = true, $skip_first_line = false, $filters = false)
    {
        if (isset($this->debug)) {
            $this->debug->QCR_Debug('QCR_GoScan ');
        }
        try {
            $i = 0;
            $filesForCloudAssistedScan = [];

            foreach ($s_file as $index => $filepath_encoded) {
                if ($callback !== null) {
                    $this->callCallback($callback);
                }

                if ($skip_first_line && $index == 0) {
                    $i = 1;
                    $this->vars->foundTotalFiles--;
                    continue;
                }

                $filepath = $base64_encoded ? FilepathEscaper::decodeFilepathByBase64($filepath_encoded) : $filepath_encoded;

                if (!file_exists($filepath) || !is_file($filepath) || !is_readable($filepath)) {
                    $this->vars->foundTotalFiles--;
                    continue;
                }

                $stat = stat($filepath);
                if (!empty($this->vars->maxMinUid)) {
                    if (!($stat['uid'] >= $this->vars->maxMinUid[0] && $this->stat['uid'] <= $this->vars->maxMinUid[1])) {
                        $this->vars->foundTotalFiles--;
                        continue;
                    }
                }

                if ($filters instanceof FileFilter) {
                    if (!$filters->needToScan($filepath)) {
                        $this->vars->foundTotalFiles--;
                        continue;
                    }
                }

                $filesize = filesize($filepath);
                if ($filesize > MAX_FILE_SIZE_FOR_CHECK || $filesize < MIN_FILE_SIZE_FOR_CHECK) {
                    $this->vars->foundTotalFiles--;
                    continue;
                }

                if (isset($this->vars->users)) {
                    $this->vars->users->add($stat['uid']);
                }

                if (substr($filepath, -1) == DIR_SEPARATOR || !defined('CLOUD_ASSIST_TOKEN')) {
                    $this->QCR_ScanFile($filepath, $this->vars, $callback, $i++);
                    continue;
                }

                if ($this->isFileTooBigForCloudscan($filesize)) {
                    $this->QCR_ScanFile($filepath, $this->vars, $callback, $i++);
                    continue;
                }

                // collecting files to scan with Cloud Assistant
                $filesForCloudAssistedScan[] = $filepath;
            }

            if (count($filesForCloudAssistedScan) == 0) {
                return;
            }

            if (defined('RAPID_ACCOUNT_SCAN')) {
                $cloud_assited_storage = Factory::instance()->create(CloudAssistedStorage::class, [RAPID_ACCOUNT_SCAN]);
                $storage = Factory::instance()->create(RapidScanStorage::class, [RAPID_ACCOUNT_SCAN]);
                /** @var RapidAccountScan $scanner */
                $scanner = Factory::instance()->create(RapidAccountScan::class, [$this, $storage, $cloud_assited_storage, &$this->vars, $i]);
                $scanner->scan($filesForCloudAssistedScan, $this->vars, constant('RapidAccountScan::RESCAN_' . RAPID_ACCOUNT_SCAN_TYPE));
                if ($scanner->getStrError()) {
                    if (isset($this->debug)) {
                        $this->debug->QCR_Debug('Rapid scan log: ' . $scanner->getStrError());
                    }
                }
                $this->vars->rescanCount += $scanner->getRescanCount();
            } else {
                $scan_bufer_files = function ($files_list, &$i) use ($callback) {
                    $this->vars->hashtable = new HashTable();
                    $files_to_scan = $this->CloudAssitedFilter($files_list);
                    foreach ($files_to_scan as $filepath) {
                        $this->QCR_ScanFile($filepath, $this->vars, $callback, $i++);
                    }
                    $this->vars->hashtable = null;
                };
                $files_bufer = [];
                foreach ($filesForCloudAssistedScan as $l_Filename) {
                    $files_bufer[] = $l_Filename;
                    if (count($files_bufer) >= CLOUD_ASSIST_LIMIT) {
                        $scan_bufer_files($files_bufer, $i);
                        $files_bufer = [];
                    }
                }
                if (count($files_bufer)) {
                    $scan_bufer_files($files_bufer, $i);
                }
                unset($files_bufer);
            }
        } catch (Exception $e) {
            if (isset($this->debug)) {
                $this->debug->QCR_Debug($e->getMessage());
            }
        }
    }

    public function QCR_ScanFile($l_Filename, $vars, $callback = null, $i = 0, $show_progress = true)
    {

        $return = array(RapidScanStorageRecord::RX_GOOD, '', '');
        $g_SkipNextCheck = false;

        /** @var CriticalFileSpecification $criticalFileSpecification */
        $criticalFileSpecification = Factory::instance()->create(CriticalFileSpecification::class);

        if ($vars->fileinfo !== null) {
            if ($l_Filename !== $vars->fileinfo->getFilename()) {
                unset($file);
                $vars->fileinfo = null;
            }
        }

        if ($vars->fileinfo == null) {
            $file = new FileInfo($l_Filename, $i, $vars->hashtable);
            $vars->fileinfo = $file;
        }

        $file = $vars->fileinfo;
        $vars->crc = 0;

        $l_CriticalDetected = false;

        if (substr($l_Filename, -1) == DIR_SEPARATOR) {
            // FOLDER
            $vars->structure['n'][$i] = $l_Filename;
            $vars->totalFolder++;
            printProgress($vars->files_and_ignored, $l_Filename, $vars);
            unset($file);
            $vars->fileinfo = null;

            return null;
        }

        if (isset($this->debug)) {
            $this->debug->QCR_Debug('Scan file ' . $l_Filename);
        }

        if ($show_progress) {
            printProgress(++$vars->files_and_ignored, $l_Filename, $vars);
        }

        $l_Ext = strtolower(pathinfo($l_Filename, PATHINFO_EXTENSION));
        $l_Content = '';

        if ($file->isBinary()) {
            if(defined('USE_HEURISTICS') || defined('USE_HEURISTICS_SUSPICIOUS')) {
                $vars->crc = $file->getSha1file();
                $this->AddResult($file, $i, $vars);

                if (defined('USE_HEURISTICS')) {
                    $vars->criticalPHP[] = $i;
                    $vars->criticalPHPFragment[] = 'SMW-HEUR-ELF';
                    $vars->criticalPHPSig[] = 'SMW-HEUR-ELF';
                }

                if (defined('USE_HEURISTICS_SUSPICIOUS')) {
                    $vars->warningPHP[] = $i;
                    $vars->warningPHPFragment[] = 'SMW-HEUR-ELF';
                    $vars->warningPHPSig[] = 'SMW-HEUR-ELF';
                }

                $return = array(RapidScanStorageRecord::HEURISTIC, 'SMW-HEUR-ELF', 'SMW-HEUR-ELF');
                unset($file);
                $vars->fileinfo = null;

                return $return;
            }
            unset($file);
            $vars->fileinfo = null;
            return null;
        }

        // FILE
        $is_too_big = $this->isFileTooBigForScanWithSignatures($file->getSize());
        $hash = $file->getSha1file();
        $l_TSStartScan = microtime(true);
        if ($this->check_binmalware($hash)) {
            $vars->totalFiles++;

            $vars->crc = $hash;

            $this->AddResult($file, $i, $vars);

            $vars->criticalPHP[] = $i;
            $vars->criticalPHPFragment[] = "BIN-" . $vars->crc;
            $vars->criticalPHPSig[] = "bin_" . $vars->crc;
            $return = array(RapidScanStorageRecord::RX_MALWARE, "bin_" . $vars->crc, "BIN-" . $vars->crc);
        } elseif (!MAX_SIZE_SCAN_BYTES && $is_too_big) {
            $vars->bigFiles[] = $i;

            if (function_exists('aibolit_onBigFile')) {
                aibolit_onBigFile($l_Filename);
            }

            $this->AddResult($file, $i, $vars);

            if ((!AI_HOSTER) && $criticalFileSpecification->satisfiedBy($l_Ext, 'extensions')) {
                $vars->criticalPHP[]         = $i;
                $vars->criticalPHPFragment[] = "BIG FILE. SKIPPED.";
                $vars->criticalPHPSig[]      = "big_1";
            }
        } else {
            $vars->totalFiles++;
            $file_type = filetype($l_Filename);
            $l_Unwrapped = '';
            if ($file_type == 'file' || (isset($vars->options['follow-symlink']) && $file_type == 'link')) {
                if ($is_too_big && MAX_SIZE_SCAN_BYTES) {
                    $l_Content  = $file->getContentBytes(MAX_SIZE_SCAN_BYTES);
                } else {
                    $l_Content  = $file->getContent();
                }
                $l_Unwrapped = $file->getContentWithoutSpaces(MAX_SIZE_SCAN_BYTES);
            }
            if (($l_Content == '' || $l_Unwrapped == '') && $file->getSize() > 0) {
                $vars->notRead[] = $i;
                if (function_exists('aibolit_onReadError')) {
                    aibolit_onReadError($l_Filename, 'io');
                }
                $return = array(RapidScanStorageRecord::CONFLICT, 'notread','');
                $this->AddResult('[io] ' . $l_Filename, $i, $vars);
                unset($file);
                $vars->fileinfo = null;
                return $return;
            }

            // ignore itself
            if (strpos($l_Content, '3bd93cd4b9584860e1da2de82fc0cedf') !== false) {
                unset($file);
                $vars->fileinfo = null;
                return false;
            }

            $vars->crc = $file->getHash();

            $l_UnicodeContent = Encoding::detectUTFEncoding($l_Content);
            //$l_Unwrapped = $l_Content;

            // check vulnerability in files
            $l_CriticalDetected = $this->CheckVulnerability($l_Filename, $i, $l_Content, $vars);

            if ($l_UnicodeContent !== false) {
                if (Encoding::iconvSupported()) {
                    $l_Unwrapped = Encoding::convertToCp1251($l_UnicodeContent, $l_Unwrapped);
                } else {
                    $vars->notRead[] = $i;
                    if (function_exists('aibolit_onReadError')) {
                        aibolit_onReadError($l_Filename, 'ec');
                    }
                    $return = array(RapidScanStorageRecord::CONFLICT, 'no_iconv', '');
                    $this->AddResult('[ec] ' . $l_Filename, $i, $vars);
                }
            }

            // critical
            $g_SkipNextCheck = false;

            if ((!AI_HOSTER) || AI_DEOBFUSCATE) {
                $l_DeobfObj = new Deobfuscator($l_Unwrapped, $l_Content);
                $l_DeobfType = $l_DeobfObj->getObfuscateType($l_Unwrapped);
            }

            if (isset($l_DeobfType) && $l_DeobfType != '') {
                $l_Unwrapped = $l_DeobfObj->deobfuscate();
                $g_SkipNextCheck = $this->checkFalsePositives($l_Filename, $l_Unwrapped, $l_DeobfType, $vars);
            } else {
                if (DEBUG_MODE) {
                    stdOut("\n...... NOT OBFUSCATED\n");
                }
            }

            $l_Unwrapped = Normalization::normalize($l_Unwrapped);

            $precheck = function ($type, $content) use ($l_Ext, $criticalFileSpecification) {
                $critical_params = [
                    'CriticalPHP'           => ['extensions', 'critical_content'],
                    'CriticalPHP_2'         => ['extensions', 'critical_content'],
                    'CriticalPHP_3'         => ['extensions', 'critical_content'],
                    'CriticalPHP_4'         => ['extensions', 'critical_content'],
                    'CriticalPHP_5'         => ['extensions', 'critical_content'],
                    'CriticalPHPGIF'        => ['extensions', 'critical_content'],
                    'CriticalPHPUploader'   => ['extensions', 'critical_content'],
                    'CriticalJS'            => ['js_extensions', 'critical_js_content'],
                    'CriticalJS_PARA'       => ['js_extensions', 'critical_js_content'],
                    'Phishing'              => ['phish_extensions', 'critical_phish_content'],
                ];

                if (!SMART_SCAN || !isset($critical_params[$type])) {
                    return true;
                }

                if (isset($check_params[$type])) {
                    $this->satisfiedBySmartScan($criticalFileSpecification, $l_Ext, $content, $check_params[$type][0], $check_params[$type][1]);
                }
            };

            $processResult = function ($checker, $content, $l_Pos, $l_SigId, &$return) use (&$vars, $l_Ext, $i) {
                $checkers = [
                    'CriticalPHP'           =>     ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                    'CriticalPHP_2'         =>     ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                    'CriticalPHP_3'         =>     ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                    'CriticalPHP_4'         =>     ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                    'CriticalPHP_5'         =>     ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                    'CriticalPHPGIF'        =>     ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                    'CriticalPHPUploader'   =>     ['criticalPHP', 'criticalPHPFragment', 'criticalPHPSig'],
                    'CriticalJS'            =>     ['criticalJS', 'criticalJSFragment', 'criticalJSSig'],
                    'CriticalJS_PARA'       =>     ['criticalJS', 'criticalJSFragment', 'criticalJSSig'],
                    'WarningPHP'            =>     ['warningPHP', 'warningPHPFragment', 'warningPHPSig'],
                    'Phishing'              =>     ['phishing', 'phishingFragment', 'phishingSigFragment'],
                    'Adware'                =>     ['adwareList', 'adwareListFragment'],
                ];

                if (strpos($checker, 'Critical') !== false) {
                    if ($l_Ext == 'js') {
                        $checker = 'CriticalJS';
                    }
                    $return = array(RapidScanStorageRecord::RX_MALWARE, $l_SigId, $this->getFragment($content, $l_Pos));
                }

                if ($checker == 'WarningPHP' || $checker == 'Phishing') {
                    $return = array(RapidScanStorageRecord::RX_SUSPICIOUS, $l_SigId, $this->getFragment($content, $l_Pos));
                }

                $vars->{$checkers[$checker][0]}[] = $i;
                $vars->{$checkers[$checker][1]}[] = $this->getFragment($content, $l_Pos);
                if (isset($checkers[$checker][2])) {
                    $vars->{$checkers[$checker][2]}[] = $l_SigId;
                }
            };



            $l_Pos = 0;
            $l_SigId = '';
            if (!$g_SkipNextCheck) {
                $checkers['CriticalPHP'] = true;
                if (AI_EXPERT_MODE > 0) {
                    $checkers['CriticalPHP_3'] = true;
                }
                if (AI_EXPERT_MODE > 1) {
                    $checkers['CriticalPHP_2'] = true;
                }
                $checkers['CriticalPHP_4'] = true;
                if (AI_EXPERT_MODE > 0) {
                    $checkers['CriticalPHP_5'] = true;
                }
                if (!AI_HOSTER && AI_EXPERT > 0 && $l_Ext == 'php') {
                    $checkers['CriticalPHPGIF'] = true;
                }
                if (!AI_HOSTER && AI_EXPERT > 1 && strpos($l_Ext, 'ph') !== false) {
                    $checkers['CriticalPHPUploader'] = true;
                }
                $checkers['CriticalJS'] = false;
                if (AI_EXPERT_MODE > 1) {
                    $checkers['CriticalJS_PARA'] = false;
                }


                if ($this->suspicious) {
                    $checkers['WarningPHP'] = false;
                    $checkers['Phishing'] = true;
                    $checkers['Adware'] = false;
                }

                $g_SkipNextCheck = ScanUnit::QCR_ScanContent($checkers, $l_Unwrapped, $l_Content, $vars->signs, $this->debug, $precheck,
                    $processResult, $return);
            }


            if (!$g_SkipNextCheck && isset($checkers['Adware'])) {
                // articles
                if (stripos($l_Filename, 'article_index')) {
                    $vars->adwareList[]     = $i;
                    $l_CriticalDetected = true;
                }
            }
        } // end of if (!$g_SkipNextCheck) {

        //printProgress(++$_files_and_ignored, $l_Filename);
        $this->delayWithCallback(SCAN_DELAY, $callback);
        $l_TSEndScan = microtime(true);
        if ($l_TSEndScan - $l_TSStartScan >= 0.5) {
            $this->delayWithCallback(SCAN_DELAY, $callback);
        }

        if ($g_SkipNextCheck || $l_CriticalDetected) {
            $this->AddResult($file, $i, $vars);
        }

        unset($file);
        $vars->fileinfo = null;
        unset($l_Unwrapped);
        unset($l_Content);

        return $return;
    }

    private function callCallback($callback)
    {
        if ($callback !== null) {
            call_user_func($callback);
        }
    }

    private function delayWithCallback($delay, $callback)
    {
        $delay *= 1000;
        $this->callCallback($callback);
        while ($delay > 500000) {
            $delay -= 500000;
            usleep(500000);
            $this->callCallback($callback);
        }
        usleep($delay);
        $this->callCallback($callback);
    }

    public function AddResult($file, $i, $vars)
    {
        if (is_string($file)) {
            $vars->structure['n'][$i]   = $file;
            return;
        }
        $vars->structure['n'][$i]   = $file->getFilename();
        $vars->structure['s'][$i]   = $file->getSize();
        $vars->structure['c'][$i]   = $file->getCreated();
        $vars->structure['m'][$i]   = $file->getModified();
        $vars->structure['u'][$i]   = $file->getUid();
        $vars->structure['g'][$i]   = $file->getGid();
        $vars->structure['p'][$i]   = $file->getMode();
        $vars->structure['e'][$i]   = time();
        $vars->structure['crc'][$i] = $vars->crc;

        if (!$this->isFileTooBigForScanWithSignatures($file->getSize())) {
            $vars->structure['sha256'][$i] = $file->getSha256();
        }
    }

    private function satisfiedBySmartScan($fs, $ext, $content, $ext_table, $content_table)
    {
        $skip = $fs->satisfiedBy($ext, $ext_table) && $fs->satisfiedByContent($content, $content_table);
        if ($skip && DEBUG_MODE) {
            echo "Skipped file, not critical.\n";
        }
        return $skip;
    }

///////////////////////////////////////////////////////////////////////////

    private function CheckVulnerability($par_Filename, $par_Index, $par_Content, $vars)
    {
        global $g_CmsListDetector, $defaults;

        $use_cms_detector = ($g_CmsListDetector instanceof CmsVersionDetector);

        if (!$use_cms_detector && !$defaults['use_template_in_path']) {
            return false;
        }

        $l_Vuln = array();

        $par_Filename = strtolower($par_Filename);

        if ((strpos($par_Filename, 'libraries/joomla/session/session.php') !== false) && (strpos($par_Content, '&& filter_var($_SERVER[\'HTTP_X_FORWARDED_FOR') === false)) {
            $l_Vuln['id']   = 'RCE : https://docs.joomla.org/Security_hotfixes_for_Joomla_EOL_versions';
            $l_Vuln['ndx']  = $par_Index;
            $vars->vulnerable[] = $l_Vuln;
            return true;
        }

        if ($use_cms_detector
            && (strpos($par_Filename, 'administrator/components/com_media/helpers/media.php') !== false)
            && (strpos($par_Content, '$format == \'\' || $format == false ||') === false)
        ) {
            if ($g_CmsListDetector->isCms(CmsVersionDetector::CMS_JOOMLA, '1.5')) {
                $l_Vuln['id']   = 'AFU : https://docs.joomla.org/Security_hotfixes_for_Joomla_EOL_versions';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if ($use_cms_detector
            && (strpos($par_Filename, 'joomla/filesystem/file.php') !== false)
            && (strpos($par_Content, '$file = rtrim($file, \'.\');') === false)
        ) {
            if ($g_CmsListDetector->isCms(CmsVersionDetector::CMS_JOOMLA, '1.5')) {
                $l_Vuln['id']   = 'AFU : https://docs.joomla.org/Security_hotfixes_for_Joomla_EOL_versions';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if ((strpos($par_Filename, 'editor/filemanager/upload/test.html') !== false) || (stripos($par_Filename, 'editor/filemanager/browser/default/connectors/php/') !== false) || (stripos($par_Filename, 'editor/filemanager/connectors/uploadtest.html') !== false) || (strpos($par_Filename, 'editor/filemanager/browser/default/connectors/test.html') !== false)) {
            $l_Vuln['id']   = 'AFU : FCKEDITOR : http://www.exploit-db.com/exploits/17644/ & /exploit/249';
            $l_Vuln['ndx']  = $par_Index;
            $vars->vulnerable[] = $l_Vuln;
            return true;
        }

        if ((strpos($par_Filename, 'inc_php/image_view.class.php') !== false) || (strpos($par_Filename, '/inc_php/framework/image_view.class.php') !== false)) {
            if (strpos($par_Content, 'showImageByID') === false) {
                $l_Vuln['id']   = 'AFU : REVSLIDER : http://www.exploit-db.com/exploits/35385/';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'includes/database/database.inc') !== false) {
            if (strpos($par_Content, 'foreach ($data as $i => $value)') !== false) {
                $l_Vuln['id']   = 'SQLI : DRUPAL : CVE-2014-3704';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'engine/classes/min/index.php') !== false) {
            if (strpos($par_Content, 'tr_replace(chr(0)') === false) {
                $l_Vuln['id']   = 'AFD : MINIFY : CVE-2013-6619';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if ((strpos($par_Filename, 'timthumb.php') !== false) || (strpos($par_Filename, 'thumb.php') !== false) || (strpos($par_Filename, 'cache.php') !== false) || (strpos($par_Filename, '_img.php') !== false)) {
            if (strpos($par_Content, 'code.google.com/p/timthumb') !== false && strpos($par_Content, '2.8.14') === false) {
                $l_Vuln['id']   = 'RCE : TIMTHUMB : CVE-2011-4106,CVE-2014-4663';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'components/com_rsform/helpers/rsform.php') !== false) {
            if (preg_match('~define\s*\(\s*\'_rsform_version\'\s*,\s*\'([^\']+)\'\s*\)\s*;~msi', $par_Content, $version)) {
                $version = $version[1];
                if (version_compare($version, '1.5.2') !== 1) {
                    $l_Vuln['id']   = 'RCE : RSFORM : rsform.php, LINE 1605';
                    $l_Vuln['ndx']  = $par_Index;
                    $vars->vulnerable[] = $l_Vuln;
                    return true;
                }
            }
            return false;
        }


        if (strpos($par_Filename, 'fancybox-for-wordpress/fancybox.php') !== false) {
            if (strpos($par_Content, '\'reset\' == $_REQUEST[\'action\']') !== false) {
                $l_Vuln['id']   = 'CODE INJECTION : FANCYBOX';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }


        if (strpos($par_Filename, 'cherry-plugin/admin/import-export/upload.php') !== false) {
            if (strpos($par_Content, 'verify nonce') === false) {
                $l_Vuln['id']   = 'AFU : Cherry Plugin';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }


        if (strpos($par_Filename, 'tiny_mce/plugins/tinybrowser/tinybrowser.php') !== false) {
            $l_Vuln['id']   = 'AFU : TINYMCE : http://www.exploit-db.com/exploits/9296/';
            $l_Vuln['ndx']  = $par_Index;
            $vars->vulnerable[] = $l_Vuln;

            return true;
        }

        if (strpos($par_Filename, '/bx_1c_import.php') !== false) {
            if (strpos($par_Content, '$_GET[\'action\']=="getfiles"') !== false) {
                $l_Vuln['id']   = 'AFD : https://habrahabr.ru/company/dsec/blog/326166/';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;

                return true;
            }
        }

        if (strpos($par_Filename, 'scripts/setup.php') !== false) {
            if (strpos($par_Content, 'PMA_Config') !== false) {
                $l_Vuln['id']   = 'CODE INJECTION : PHPMYADMIN : http://1337day.com/exploit/5334';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, '/uploadify.php') !== false) {
            if (strpos($par_Content, 'move_uploaded_file($tempFile,$targetFile') !== false) {
                $l_Vuln['id']   = 'AFU : UPLOADIFY : CVE: 2012-1153';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'com_adsmanager/controller.php') !== false) {
            if (strpos($par_Content, 'move_uploaded_file($file[\'tmp_name\'], $tempPath.\'/\'.basename($file[') !== false) {
                $l_Vuln['id']   = 'AFU : https://revisium.com/ru/blog/adsmanager_afu.html';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'wp-content/plugins/wp-mobile-detector/resize.php') !== false) {
            if (strpos($par_Content, 'file_put_contents($path, file_get_contents($_REQUEST[\'src\']));') !== false) {
                $l_Vuln['id']   = 'AFU : https://www.pluginvulnerabilities.com/2016/05/31/aribitrary-file-upload-vulnerability-in-wp-mobile-detector/';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }


        if (strpos($par_Filename, 'core/lib/drupal.php') !== false) {
            $version = '';
            if (preg_match('|VERSION\s*=\s*\'(8\.\d+\.\d+)\'|smi', $par_Content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

            if (($version !== '') && (version_compare($version, '8.5.1', '<'))) {
                $l_Vuln['id']   = 'Drupageddon 2 : SA-CORE-2018–002';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }


            return false;
        }

        if (strpos($par_Filename, 'changelog.txt') !== false) {
            $version = '';
            if (preg_match('|Drupal\s+(7\.\d+),|smi', $par_Content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

            if (($version !== '') && (version_compare($version, '7.58', '<'))) {
                $l_Vuln['id']   = 'Drupageddon 2 : SA-CORE-2018–002';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'phpmailer.php') !== false) {
            $l_Detect = false;
            if (strpos($par_Content, 'PHPMailer') !== false) {
                $l_Found = preg_match('~Version:\s*(\d+)\.(\d+)\.(\d+)~', $par_Content, $l_Match);

                if ($l_Found) {
                    $l_Version = $l_Match[1] * 1000 + $l_Match[2] * 100 + $l_Match[3];

                    if ($l_Version < 2520) {
                        $l_Detect = true;
                    }
                }

                if (!$l_Found) {

                    $l_Found = preg_match('~Version\s*=\s*\'(\d+)\.*(\d+)\.(\d+)~i', $par_Content, $l_Match);
                    if ($l_Found) {
                        $l_Version = $l_Match[1] * 1000 + $l_Match[2] * 100 + $l_Match[3];
                        if ($l_Version < 5220) {
                            $l_Detect = true;
                        }
                    }
                }

                if ($l_Detect) {
                    $l_Vuln['id']   = 'RCE : CVE-2016-10045, CVE-2016-10031';
                    $l_Vuln['ndx']  = $par_Index;
                    $vars->vulnerable[] = $l_Vuln;
                    return true;
                }
            }

            return false;
        }
    }

    private function checkFalsePositives($l_Filename, $l_Unwrapped, $l_DeobfType, $vars)
    {

        if ($l_DeobfType != '') {
            if (DEBUG_MODE) {
                stdOut("\n-----------------------------------------------------------------------------\n");
                stdOut("[DEBUG]" . $l_Filename . "\n");
                stdOut("\n...... $l_DeobfType ...........\n");
                var_dump($l_Unwrapped);
                stdOut("\n");
            }

            switch ($l_DeobfType) {
                case 'Bitrix':
                    foreach ($vars->signs->_DeMapper as $fkey => $fvalue) {
                        if (DEBUG_MODE) {
                            stdOut("[$fkey] => [$fvalue]\n");
                        }

                        if ((strpos($l_Filename, $fkey) !== false) && (strpos($l_Unwrapped, $fvalue) !== false)) {
                            if (DEBUG_MODE) {
                                stdOut("\n[DEBUG] *** SKIP: False Positive\n");
                            }

                            return true;
                        }
                    }
                    break;
            }


            return false;
        }
    }

    private function getFragment($par_Content, $par_Pos)
    {

        $l_MaxChars = MAX_PREVIEW_LEN;

        $par_Content = preg_replace('/[\x00-\x1F\x80-\xFF]/', '~', $par_Content);

        $l_MaxLen   = strlen($par_Content);
        $l_RightPos = min($par_Pos + $l_MaxChars, $l_MaxLen);
        $l_MinPos   = max(0, $par_Pos - $l_MaxChars);

        $l_Res = ($l_MinPos > 0 ? '…' : '') . substr($par_Content, $l_MinPos, $par_Pos - $l_MinPos) . '__AI_MARKER__' . substr($par_Content, $par_Pos, $l_RightPos - $par_Pos - 1);

        $l_Res = AibolitHelpers::makeSafeFn(Normalization::normalize($l_Res), $this->addPrefix, $this->noPrefix);

        $l_Res = str_replace('~', ' ', $l_Res);

        $l_Res = preg_replace('~[\s\t]+~', ' ', $l_Res);

        $l_Res = str_replace('' . '?php', '' . '?php ', $l_Res);

        return $l_Res;
    }

    /**
     * @return array
     */
    public function whitelisting()
    {
        // whitelist
        $snum = 0;
        $list = $this->check_whitelist($this->vars->structure['crc'], $snum);
        $keys = array(
            'criticalPHP',
            'criticalJS',
            'g_Iframer',
            'g_Base64',
            'phishing',
            'adwareList',
            'g_Redirect',
            'warningPHP'
        );

        foreach ($keys as $p) {
            if (empty($this->vars->{$p})) {
                continue;
            }
            $p_Fragment = $p . 'Fragment';
            $p_Sig      = $p . 'Sig';

            if ($p == 'g_Redirect') {
                $p_Fragment = $p . 'PHPFragment';
            }
            elseif ($p == 'g_Phishing') {
                $p_Sig = $p . 'SigFragment';
            }

            $count = count($this->vars->{$p});
            for ($i = 0; $i < $count; $i++) {
                $id = $this->vars->{$p}[$i];
                if ($this->vars->structure['crc'][$id] !== 0 && in_array($this->vars->structure['crc'][$id], $list)) {
                    unset($this->vars->{$p}[$i], $this->vars->{$p_Sig}[$i], $this->vars->{$p_Fragment}[$i]);
                }
            }

            $this->vars->{$p}             = array_values($this->vars->{$p});
            $this->vars->{$p_Fragment}    = array_values($this->vars->{$p_Fragment});
            if (!empty($this->vars->{$p_Sig})) {
                $this->vars->{$p_Sig} = array_values($this->vars->{$p_Sig});
            }
        }
        return array($snum, $i);
    }

    public function check_whitelist($list, &$snum)
    {
        if (empty($list)) {
            return array();
        }

        $avdb = '';
        $file = dirname(__FILE__) . '/AIBOLIT-WHITELIST.db';
        if ((isset($this->vars->options['avdb']) && !empty($this->vars->options['avdb']) && ($avdb = $this->vars->options['avdb'])) || (isset($this->vars->options['c']) && !empty($this->vars->options['c']) && ($avdb = $this->vars->options['c']))) {
            if (file_exists($avdb)) {
                $file = dirname($avdb) . '/AIBOLIT-WHITELIST.db';
            }
        }

        try {
            $db = FileHashMemoryDb::open($file);
        } catch (Exception $e) {
            stdOut("\nAn error occurred while loading the white list database from " . $file . "\n");
            return array();
        }

        $snum = $db->count();
        stdOut("\nLoaded " . ceil($snum) . " known files from " . $file . "\n");

        return $db->find($list);
    }

    private function check_binmalware($hash)
    {
        if (isset($this->vars->blacklist)) {
            return count($this->vars->blacklist->find(array($hash))) > 0;
        }

        return false;
    }

///////////////////////////////////////////////////////////////////////////

    private function isFileTooBigForScanWithSignatures($filesize)
    {
        return (MAX_SIZE_TO_SCAN > 0 && $filesize > MAX_SIZE_TO_SCAN) || ($filesize < 0);
    }

    private function isFileTooBigForCloudscan($filesize)
    {
        return (MAX_SIZE_TO_CLOUDSCAN > 0 && $filesize > MAX_SIZE_TO_CLOUDSCAN) || ($filesize < 0);
    }
}


class ScanUnit
{
    public static function QCR_ScanContent($checkers, $l_Unwrapped, $l_Content, $signs, $debug = null, $precheck = null, $processResult = null, &$return = null)
    {
        foreach ($checkers as $checker => $full) {
            $l_pos = 0;
            $l_SignId = '';
            if (isset($precheck) && is_callable($precheck)) {
                if (!$precheck($checker, $l_Unwrapped) || ($full && !$precheck($checker, $l_Content))) {
                    continue;
                }
            }
            $flag = ScanCheckers::{$checker}($l_Unwrapped, $l_pos, $l_SignId, $signs, $debug);
            if ($flag && isset($processResult) && is_callable($processResult)) {
                $processResult($checker, $l_Unwrapped, $l_pos, $l_SignId, $return);
            }

            if (!$flag && $full) {
                $flag = ScanCheckers::{$checker}($l_Content, $l_pos, $l_SignId, $signs, $debug);
                if ($flag && isset($processResult) && is_callable($processResult)) {
                    $processResult($checker, $l_Content, $l_pos, $l_SignId, $return);
                }
            }
            if ($flag) {
                return true;
            }
        }
        return false;
    }
}


class ScanCheckers
{
    const URL_GRAB = '~(?:https?:)?\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+\~#=]{2,256}\.[a-z]{2,4}\b(?:[-a-zA-Z0-9@:%_\+.\~#?&/=]*)~msi';

    public static function WarningPHP($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->_SusDB as $l_Item) {
            if (preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);
                    return true;
                }
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function Adware($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Res = false;

        foreach ($signs->_AdwareSig as $l_Item) {
            $offset = 0;
            while (preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos = $l_Found[0][1];
                    $l_SigId = 'adware';
                    return true;
                }

                $offset = $l_Found[0][1] + 1;
            }
        }

        return $l_Res;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CheckException(&$l_Content, &$l_Found, $signs, $debug = null)
    {
        $l_FoundStrPlus = substr($l_Content, max($l_Found[0][1] - 10, 0), 70);

        foreach ($signs->_ExceptFlex as $l_ExceptItem) {
            if (@preg_match('~' . $l_ExceptItem . '~smi', $l_FoundStrPlus, $l_Detected)) {
                return true;
            }
        }

        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function Phishing($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Res = false;

        foreach ($signs->_PhishingSig as $l_Item) {
            $offset = 0;
            while (preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "Phis: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return $l_Pos;
                }
                $offset = $l_Found[0][1] + 1;

            }
        }

        return $l_Res;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CriticalJS($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Res = false;

        foreach ($signs->_JSVirSig as $l_Item) {
            $offset = 0;
            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_start = microtime(true);
            }

            while (preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "JS: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    $l_Res = true;
                    break;
                }

                $offset = $l_Found[0][1] + 1;

            }

            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_stop = microtime(true);
                $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start);
            }

        }

        return $l_Res;
    }

    public static function CriticalJS_PARA($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->X_JSVirSig as $l_Item) {
            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_start = microtime(true);
            }

            if (preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    //$l_SigId = myCheckSum($l_Item);
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "JS PARA: $l_Content matched [$l_Item] in $l_Pos\n";
                    }
                    return true;
                }
            }

            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_stop = microtime(true);
                $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start);
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CriticalPHPGIF($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        if (strpos($l_Content, 'GIF89') === 0) {
            $l_Pos = 0;
            $l_SigId = 'GIF';
            if (is_object($debug) && $debug->getDebugMode() == true) {
                echo "CRIT 6: $l_Content matched [GIF] in $l_Pos\n";
            }

            return true;
        }
        return false;
    }

    public static function CriticalPHPUploader($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        // detect uploaders / droppers
        $l_Found = null;
        if ((strlen($l_Content) < 2048) && ((($l_Pos = strpos($l_Content, 'multipart/form-data')) > 0) || (($l_Pos = strpos($l_Content, '$_FILE[') > 0)) || (($l_Pos = strpos($l_Content, 'move_uploaded_file')) > 0) || (preg_match('|\bcopy\s*\(|smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)))) {
            if ($l_Found != null) {
                $l_Pos = $l_Found[0][1];
                $l_SigId = 'uploader';
            }
            if (is_object($debug) && $debug->getDebugMode() == true) {
                echo "CRIT 7: $l_Content matched [uploader] in $l_Pos\n";
            }

            return true;
        }
    }

    public static function CriticalPHP_3($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->X_FlexDBShe as $l_Item) {
            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_start = microtime(true);
            }

            if (preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "CRIT 3: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }
            }

            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_stop = microtime(true);
                $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start);
            }
        }
        return false;
    }

    public static function CriticalPHP_2($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->XX_FlexDBShe as $l_Item) {
            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_start = microtime(true);
            }

            if (preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "CRIT 2: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }
            }

            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_stop = microtime(true);
                $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start);
            }
        }
        return false;
    }

    public static function CriticalPHP_4($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Content_lo = strtolower($l_Content);

        foreach ($signs->_DBShe as $l_Item) {
            $l_Pos = strpos($l_Content_lo, $l_Item);
            if ($l_Pos !== false) {
                $l_SigId = AibolitHelpers::myCheckSum($l_Item);

                if (is_object($debug) && $debug->getDebugMode() == true) {
                    echo "CRIT 4: $l_Content matched [$l_Item] in $l_Pos\n";
                }

                return true;
            }
        }
        return false;
    }

    public static function CriticalPHP_5($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Content_lo = strtolower($l_Content);

        foreach ($signs->X_DBShe as $l_Item) {
            $l_Pos = strpos($l_Content_lo, $l_Item);
            if ($l_Pos !== false) {
                $l_SigId = AibolitHelpers::myCheckSum($l_Item);

                if (is_object($debug) && $debug->getDebugMode() == true) {
                    echo "CRIT 5: $l_Content matched [$l_Item] in $l_Pos\n";
                }

                return true;
            }
        }
        return false;
    }

    public static function CriticalPHP($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->_FlexDBShe as $l_Item) {
            $offset = 0;

            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_start = microtime(true);
            }
            while (preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    //$l_SigId = myCheckSum($l_Item);
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "CRIT 1: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }

                $offset = $l_Found[0][1] + 1;

            }
            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_stop = microtime(true);
                $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start);
            }

        }

        return false;
    }

    public static function isOwnUrl($url, $own_domain)
    {
        if (!isset($own_domain)) {
            return false;
        }
        return (bool)preg_match('~^(http(s)?:)?//(www\.)?' . preg_quote($own_domain) . '~msi', $url);
    }

    public static function isUrlInList($url, $list)
    {
        if (isset($list)) {
            foreach ($list as $item) {
                if (preg_match('~' . $item . '~msiS', $url, $id, PREG_OFFSET_CAPTURE)) {
                    return $id;
                }
            }
        }

        return false;
    }

    public static function UrlChecker($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Pos      = [];
        $l_SigId    = [];
        $offset     = 0;
        
        while (preg_match(self::URL_GRAB, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
            if (!self::isOwnUrl($l_Found[0][0], $signs->getOwnUrl())
                && (isset($signs->whiteUrls) && !self::isUrlInList($l_Found[0][0], $signs->whiteUrls->getDb()))
            ) {
                if ($id = self::isUrlInList($l_Found[0][0], $signs->blackUrls->getDb())) {
                    $l_Pos['black'][] = $l_Found[0][1];
                    $l_SigId['black'][] = $signs->blackUrls->getSig($id);
                } else {
                    $l_Pos['unk'][] = $l_Found[0][1];
                    $l_SigId['unk'][] = $l_Found[0][0];
                }
            }
            $offset = $l_Found[0][1] + strlen($l_Found[0][0]);
        }
        return !empty($l_Pos);
    }
}


class TemplateList
{
    /**
     * #############
     * # MAIN_PAGE #
     * #############
     */
    const MAIN_PAGE = <<<MAIN_PAGE
<html>
<head>
    <!-- revisium.com/ai/ -->
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" >
    <META NAME="ROBOTS" CONTENT="NOINDEX,NOFOLLOW">
    <title>@@HEAD_TITLE@@</title>
    <style type="text/css" title="currentStyle">
        @import "https://cdn.revisium.com/ai/media/css/demo_page2.css";
        @import "https://cdn.revisium.com/ai/media/css/jquery.dataTables2.css";
    </style>

    <script type="text/javascript" language="javascript" src="https://cdn.revisium.com/ai/jquery.js"></script>
    <script type="text/javascript" language="javascript" src="https://cdn.revisium.com/ai/datatables.min.js"></script>
    <style>
        body {
            font-family: Tahoma, sans-serif;
            color: #5a5a5a;
            background: #FFFFFF;
            font-size: 14px;
            margin: 20px;
            padding: 0;
        }

        .header {
            font-size: 34px;
            margin: 0 0 10px 0;
        }

        .hidd {
            display: none;
        }

        .ok {
            color: green;
        }

        .line_no {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            background: #DAF2C1;
            padding: 2px 5px 2px 5px;
            margin: 0 5px 0 5px;
        }

        .credits_header {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            background: #F2F2F2;
            padding: 10px;
            font-size: 11px;
            margin: 0 0 10px 0;
        }

        .marker {
            color: #FF0090;
            font-weight: 100;
            background: #FF0090;
            padding: 2px 0 2px 0;
            width: 2px;
        }

        .title {
            font-size: 24px;
            margin: 20px 0 10px 0;
            color: #9CA9D1;
        }

        .summary {
            float: left;
            width: 500px;
        }

        .summary TD {
            font-size: 12px;
            border-bottom: 1px solid #F0F0F0;
            font-weight: 700;
            padding: 10px 0 10px 0;
        }

        .crit, .vir {
            color: #D84B55;
        }

        .intitem {
            color: #4a6975;
        }

        .spacer {
            margin: 0 0 50px 0;
            clear: both;
        }

        .warn {
            color: #F6B700;
        }

        .clear {
            clear: both;
        }

        .offer {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            width: 500px;
            background: #F2F2F2;
            color: #747474;
            font-family: Helvetica, Arial, sans-serif;
            padding: 30px;
            margin: 20px 0 0 550px;
            font-size: 14px;
        }

        .offer-our-products {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            width: 500px;
            background: #f6f5e0;
            color: #747474;
            font-family: Helvetica, Arial, sans-serif;
            padding: 30px;
            margin: 20px 0 0 550px;
            font-size: 14px;
        }


        HR {
            margin-top: 15px;
            margin-bottom: 15px;
            opacity: .2;
        }

        .flist {
            font-family: Henvetica, Arial, sans-serif;
        }

        .flist TD {
            font-size: 11px;
            padding: 5px;
        }

        .flist TH {
            font-size: 12px;
            height: 30px;
            padding: 5px;
            background: #CEE9EF;
        }


        .it {
            font-size: 14px;
            font-weight: 100;
            margin-top: 10px;
        }

        .crit .it A {
            color: #E50931;
            line-height: 25px;
            text-decoration: none;
        }

        .warn .it A {
            color: #F2C900;
            line-height: 25px;
            text-decoration: none;
        }


        .details {
            font-family: Calibri, sans-serif;
            font-size: 12px;
            margin: 10px 10px 10px 0;
        }

        .crit .details {
            color: #A08080;
        }

        .warn .details {
            color: #808080;
        }

        .details A {
            color: #FFF;
            font-weight: 700;
            text-decoration: none;
            padding: 2px;
            background: #E5CEDE;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;
        }

        .details A:hover {
            background: #A0909B;
        }

        .ctd {
            margin: 10px 0 10px 0;
            align: center;
        }

        .ctd A {
            color: #0D9922;
        }

        .disclaimer {
            color: darkgreen;
            margin: 10px 10px 10px 0;
        }

        .note_vir {
            margin: 10px 0 10px 0;
        / / padding: 10 px;
            color: #FF4F4F;
            font-size: 15px;
            font-weight: 700;
            clear: both;

        }

        .note_warn {
            margin: 10px 0 10px 0;
            color: #F6B700;
            font-size: 15px;
            font-weight: 700;
            clear: both;
        }

        .note_int {
            margin: 10px 0 10px 0;
            color: #60b5d6;
            font-size: 15px;
            font-weight: 700;
            clear: both;
        }

        .updateinfo {
            color: #FFF;
            text-decoration: none;
            background: #E5CEDE;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;

            margin: 10px 0 10px 0;
            padding: 10px;
        }


        .caution {
            color: #EF7B75;
            text-decoration: none;
            margin: 20px 0 0 0;
            font-size: 12px;
        }

        .footer {
            color: #303030;
            text-decoration: none;
            background: #F4F4F4;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;

            margin: 80px 0 10px 0px;
            padding: 10px;
        }

        .rep {
            color: #303030;
            text-decoration: none;
            background: #94DDDB;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;

            margin: 10px 0 10px 0;
            padding: 10px;
            font-size: 12px;
        }

    </style>
</head>
<body>

<div class="header">@@MAIN_TITLE@@ @@PATH_URL@@ (@@MODE@@)</div>
<div class="credits_header">@@CREDITS@@</div>
<div class="details_header">
    @@STAT@@<br/>
    @@SCANNED@@ @@MEMORY@@.
</div>

@@WARN_QUICK@@

<div class="summary">
    @@SUMMARY@@
</div>

<div class="offer">
    @@OFFER@@
</div>

<div class="offer-our-products">
    @@OFFER_OUR_PRODUCTS@@
</div>

<div class="clear"></div>

@@MAIN_CONTENT@@

<div class="footer">
    @@FOOTER@@
</div>

<script language="javascript">
    function hsig(id) {
        var divs = document.getElementsByTagName("tr");
        for(var i = 0; i < divs.length; i++){

            if (divs[i].getAttribute('o') == id) {
                divs[i].innerHTML = '';
            }
        }

        return false;
    }


    $(document).ready(function(){
        $('#table_crit').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "paging": true,
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending": "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            }

        } );

    });

    $(document).ready(function(){
        $('#table_vir').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "paging": true,
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending":  "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            },

        } );

    });

    if ($('#table_warn0')) {
        $('#table_warn0').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "paging": true,
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending":  "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            }

        } );
    }

    if ($('#table_warn1')) {
        $('#table_warn1').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "paging": true,
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending":  "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            }

        } );
    }
</script>
<!-- @@SERVICE_INFO@@  -->
</body>
</html>
MAIN_PAGE;

    #region templates ru
    /**
     * #############
     * # FOOTER_RU #
     * #############
     */
    const FOOTER_RU = <<<FOOTER
   <div class="disclaimer"><span class="vir">[!]</span> Отказ от гарантий: невозможно гарантировать обнаружение всех вредоносных скриптов. Поэтому разработчик сканера не несет ответственности за возможные последствия работы сканера AI-Bolit или неоправданные ожидания пользователей относительно функциональности и возможностей.
   </div>
   <div class="thanx">
      Мы будем чрезвычайно благодарны за любые упоминания сканера AI-Bolit на вашем сайте, в блоге, среди друзей, знакомых и клиентов. <br/>Ссылку можно поставить на страницу <a href="https://revisium.com/ai/">https://revisium.com/ai/</a>.<br/>
    </div>
FOOTER;

    /**
     * ###########################
     * # OFFER_RU #
     * ###########################
     */
    const OFFER_RU = <<<OFFER_ON_VIRUS_FOUND
    <div>
     <div class="crit" style="font-size: 17px; margin-bottom: 20px"><b>Внимание! Наш сканер обнаружил подозрительный или вредоносный код</b>.</div> 
     <p>Возможно, ваш сайт был взломан. Рекомендуем срочно <a href="https://revisium.com/ru/order/#fform" target=_blank>проконсультироваться со специалистами</a> по данному отчету.</p>
     <p><hr size=1></p>
     <p>Рекомендуем также проверить сайт бесплатным <b><a href="https://rescan.pro/?utm=aibolit" target=_blank>онлайн-сканером ReScan.Pro</a></b>.</p>
     <p><hr size=1></p>
         <div class="caution">@@CAUTION@@</div>
    </div>
OFFER_ON_VIRUS_FOUND;

    /**
     * #########################
     * # OFFER_OUR_PRODUCTS_RU #
     * #########################
     */
    const OFFER_OUR_PRODUCTS_RU = <<<OFFER_OUR_PRODUCTS
       <b>Наши продукты:</b><br/>
              <ul>
               <li style="margin-top: 10px"><font color=red><sup>[new]</sup></font><b><a href="https://revisium.com/ru/products/antivirus_for_ispmanager/" target=_blank>Антивирус для ISPmanager Lite</a></b> &mdash;  сканирование и лечение сайтов прямо в панели хостинга</li>
               <li style="margin-top: 10px"><b><a href="https://revisium.com/ru/blog/revisium-antivirus-for-plesk.html" target=_blank>Антивирус для Plesk</a> Onyx 17.x</b> &mdash;  сканирование и лечение сайтов прямо в панели хостинга</li>
               <li style="margin-top: 10px"><b><a href="https://cloudscan.pro/ru/" target=_blank>Облачный антивирус CloudScan.Pro</a> для веб-специалистов</b> &mdash; лечение сайтов в один клик</li>
               <li style="margin-top: 10px"><b><a href="https://revisium.com/ru/antivirus-server/" target=_blank>Антивирус для сервера</a></b> &mdash; для хостинг-компаний, веб-студий и агентств.</li>
              </ul>  
    </div>
OFFER_OUR_PRODUCTS;
    #endregion

    #region templates eng
    /**
     * #############
     * # FOOTER_EN #
     * #############
     */
    const FOOTER_EN = <<<FOOTER
           <div class="disclaimer"><span class="vir">[!]</span> Disclaimer: We're not liable to you for any damages, including general, special, incidental or consequential damages arising out of the use or inability to use the script (including but not limited to loss of data or report being rendered inaccurate or failure of the script). There's no warranty for the program. Use at your own risk. 
           </div>
           <div class="thanx">
              We're greatly appreciate for any references in the social medias, forums or blogs to our scanner AI-BOLIT <a href="https://revisium.com/aibo/">https://revisium.com/aibo/</a>.<br/>
            </div>
FOOTER;

    /**
     * ###########################
     * # OFFER_ON_VIRUS_FOUND_EN #
     * ###########################
     */
    const OFFER_EN = <<<OFFER_ON_VIRUS_FOUND
<div>
 <div class="crit" style="font-size: 17px;"><b>Attention! The scanner has detected suspicious or malicious files.</b></div> 
 <br/>Most likely the website has been compromised. Please, <a href="https://revisium.com/en/contacts/" target=_blank>contact web security experts</a> from Revisium to check the report or clean the malware.
 <p><hr size=1></p>
 Also check your website for viruses with our free <b><a href="http://rescan.pro/?en&utm=aibo" target=_blank>online scanner ReScan.Pro</a></b>.
</div>
<br/>
<div>
   Revisium contacts: <a href="https://revisium.com/en/contacts/">https://revisium.com/en/home/</a>
</div>
<div class="caution">@@CAUTION@@</div>
OFFER_ON_VIRUS_FOUND;


    /**
     * #########################
     * # OFFER_OUR_PRODUCTS_EN #
     * #########################
     */
    const OFFER_OUR_PRODUCTS_EN = <<<OFFER_OUR_PRODUCTS
<b>Special Offers:</b><br/>
              <ul>
               <li style="margin-top: 10px"><font color=red><sup>[new]</sup></font><b><a href="http://ext.plesk.com/packages/b71916cf-614e-4b11-9644-a5fe82060aaf-revisium-antivirus">Antivirus for Plesk Onyx</a></b> hosting panel with one-click malware cleanup and scheduled website scanning.</li>
               <li style="margin-top: 10px"><font color=red></font><b><a href="https://www.ispsystem.com/addons-modules/revisium">Antivirus for ISPmanager Lite</a></b> hosting panel with one-click malware cleanup and scheduled website scanning.</li>
               <li style="margin-top: 10px">Professional malware cleanup and web-protection service with 6 month guarantee for only $99 (one-time payment): <a href="https://revisium.com/en/home/#order_form">https://revisium.com/en/home/</a>.</li>
              </ul>  
    </div>
OFFER_OUR_PRODUCTS;
    #endregion
}


class TranslateList
{
    const RU = [
        //Переменные для javascript
        'data_table.length_menu'           => 'Отображать по _MENU_ записей',
        'data_table.zero_records'          => 'Ничего не найдено',
        'data_table.info'                  => 'Отображается c _START_ по _END_ из _TOTAL_ файлов',
        'data_table.info_empty'            => 'Нет файлов',
        'data_table.info_filtered'         => '(всего записей _MAX_)',
        'data_table.search'                => 'Поиск:',
        'data_table.paginate.first'        => 'Первая',
        'data_table.paginate.previous'     => 'Предыдущая',
        'data_table.paginate.next'         => 'Следующая',
        'data_table.paginate.last'         => 'Последняя',
        'data_table.aria.sort_ascending'   => ': активировать для сортировки столбца по возрастанию',
        'data_table.aria.sort_descending'  => ': активировать для сортировки столбцов по убыванию',
        'header.scan_report_title'         => 'Отчет сканера <a href="https://revisium.com/ai/">AI-Bolit</a> v@@VERSION@@:',
        'offer.when_no_critical'           => 'Обращаем внимание на то, что большинство CMS <b>без дополнительной защиты</b> рано или поздно <b>взламывают</b>.<p> Компания <a href="https://revisium.com/">"Ревизиум"</a> предлагает услугу превентивной защиты сайта от взлома с использованием уникальной <b>процедуры "цементирования сайта"</b>. Подробно на <a href="https://revisium.com/ru/client_protect/">странице услуги</a>. <p>Лучшее лечение &mdash; это профилактика.',
        'offer_our_products'               => TemplateList::OFFER_OUR_PRODUCTS_RU,
        'offer.when_has_critical'          => TemplateList::OFFER_RU,
        'сaution.aibolit_file'             => 'Не оставляйте файл отчета на сервере, и не давайте на него прямых ссылок с других сайтов. Информация из отчета может быть использована злоумышленниками для взлома сайта, так как содержит информацию о настройках сервера, файлах и каталогах.',
        'сaution.scanner_set_password'     => "Сканер AI-Bolit запускается с паролем. Если это первый запуск сканера, вам нужно придумать сложный пароль и вписать его в файле ai-bolit.php в строке №34. <p>Например, <b>'PASS', =>'%s',</b><p>
После этого откройте сканер в браузере, указав пароль в параметре \"p\". <p>Например, так <b>http://mysite.ru/ai-bolit.php?p=%s</b>. ",
        'сaution.quick_scanned'            => '<div class="rep" style="color: #0000A0">Внимание, скрипт выполнил быструю проверку сайта. Проверяются только наиболее критические файлы, но часть вредоносных скриптов может быть не обнаружена. Пожалуйста, запустите скрипт из командной строки для выполнения полного тестирования. Подробнее смотрите в <a href="https://revisium.com/ai/faq.php">FAQ вопрос №10</a>.</div>',
        'warning.weak_password'            => "Вы установили слабый пароль на скрипт AI-BOLIT. Укажите пароль не менее 8 символов, содержащий латинские буквы в верхнем и нижнем регистре, а также цифры. Например, такой <b>%s</b>",
        'warning.folder_read_permission'   => 'Текущая директория не доступна для чтения скрипту. Пожалуйста, укажите права на доступ <b>rwxr-xr-x</b> или с помощью командной строки <b>chmod +r имя_директории</b>',
        'warnings'                         => 'Предупреждения',
        'warning.reading_error'            => 'Непроверенные файлы - ошибка чтения',
        'info.time_elapsed'                => "Затрачено времени: <b>%s</b>. Сканирование начато %s, сканирование завершено %s",
        'info.files_checked'               => 'Всего проверено %s директорий и %s файлов.',
        'info.non_commercial_use'          => 'Сканер бесплатный только для личного некоммерческого использования. Информация по <a href="https://revisium.com/ai/faq.php#faq11" target=_blank>коммерческой лицензии</a> (пункт №11). <a href="https://revisium.com/images/mini_aibolit.jpg">Авторское свидетельство</a> о гос. регистрации в РосПатенте №2012619254 от 12 октября 2012 г.',
        'critical.title'                   => '<div class="title">Критические замечания</div>',
        'not_detected.shell_scripts'       => 'Вирусы и вредоносные скрипты не обнаружены.',
        'detected.shell_scripts'           => 'Эти файлы могут быть вредоносными или хакерскими скриптами',
        'detected.javascript'              => 'Эти файлы могут быть javascript вирусами',
        'detected.executables'             => 'Обнаружены сигнатуры исполняемых файлов unix и нехарактерных скриптов. Они могут быть вредоносными файлами',
        'detected.bad_links'               => 'Дорвеи, реклама, спам-ссылки, редиректы',
        'detected.phishing_pages'          => 'Обнаружены фишинговые страницы',
        'file.not_found.more_than'         => 'Не найдено файлов больше чем %s',
        'file.recommend_to_remove'         => 'Временные файлы или файлы(каталоги) - кандидаты на удаление по ряду причин',
        'file.scanned_manual'              => 'Просканированы только файлы, перечисленные в %s. Для полного сканирования удалите файл %s и запустите сканер повторно.',
        'file.suspicion.heuristic_analyze' => 'Эвристический анализ обнаружил подозрительные файлы. Проверьте их на наличие вредоносного кода.',
        'file.encrypted'                   => 'Зашифрованных файлов',
        'file.hidden'                      => 'Скрытых файлов',
        'file.added'                       => "Добавленные файлы",
        'file.updated'                     => "Измененные файлы",
        'file.deleted'                     => "Удаленные файлы",
        'file_structure.updates'           => "Изменения в файловой структуре",
        'hidden_files'                     => 'Скрытые файлы',
        'doorway.might'                    => 'Возможно, каталог с дорвеем',
        'doorway.not_found'                => 'Не найдено директорий c дорвеями',
        'suspicion.multiple'               => 'Двойное расширение, зашифрованный контент или подозрение на вредоносный скрипт. Требуется дополнительный анализ',
        'suspicion.malicious'              => 'Подозрение на вредоносный скрипт',
        'suspicion.htaccess'               => 'Подозрение на мобильный редирект, подмену расширений или автовнедрение кода',
        'suspicion.non_php'                => 'В не .php файле содержится стартовая сигнатура PHP кода. Возможно, там вредоносный код',
        'suspicion.hidden_link'            => 'Невидимые ссылки. Подозрение на ссылочный спам',
        'suspicion.doorway'                => 'Подозрение на дорвей',
        'suspicion.code'                   => 'Скрипт использует код, который часто встречается во вредоносных скриптах',
        'suspicion.obfuscated_variables'   => 'Подозрение на обфусцированные переменные',
        'suspicion.global_array'           => 'Подозрительное использование массива глобальных переменных',
        'suspicion.file_time'              => "Подозрительные параметры времени изменения файла",
        'suspicion.file_attributes'        => "Подозрительные атрибуты файла",
        'suspicion.file_location'          => "Подозрительное местоположение файла",
        'symlinks'                         => 'Символические ссылки (symlinks)',
        'hidden_links'                     => 'Невидимые ссылки',
        'link.symbolic'                    => 'Символических ссылок',
        'links.adware_spam'                => 'Рекламных ссылок и кодов',
        'links.empty'                      => 'Пустых ссылок',
        'display_only_first'               => 'Отображены только первые ',
        'skipped.adirignore'               => 'Директории из файла .adirignore были пропущены при сканировании',
        'founded_CMS'                      => 'Версии найденных CMS',
        'folder.unsafe_writable'           => 'Потенциально небезопасно! Директории, доступные скрипту на запись',
        'folder.unsafe_writable_not_found' => 'Не найдено директорий, доступных на запись скриптом',
        'folder.added'                     => "Добавленные каталоги",
        'folder.deleted'                   => "Удаленные каталоги",
        'memory_used'                      => 'Использовано памяти при сканировании: ',
        'notice.scan_express'              => '<div class="rep">Внимание! Выполнена экспресс-проверка сайта. Просканированы только файлы с расширением .php, .js, .html, .htaccess. В этом режиме могут быть пропущены вирусы и хакерские скрипты в файлах с другими расширениями. Чтобы выполнить более тщательное сканирование, поменяйте значение настройки на <b>\'scan_all_files\' => 1</b> в строке 50 или откройте сканер в браузере с параметром full: <b><a href="ai-bolit.php?p=&full">ai-bolit.php?p=&full</a></b>. <p>Не забудьте перед повторным запуском удалить файл %s</div>',
        'feedback_for_script'              => 'Мы будем чрезвычайно благодарны за любые упоминания скрипта AI-Bolit на вашем сайте, в блоге, среди друзей, знакомых и клиентов. Ссылочку можно поставить на <a href="https://revisium.com/ai/">https://revisium.com/ai/</a>.',
        'report_for'                       => 'Отчет по ',
        'function.many_reference'          => 'Много косвенных вызовов функции',
        'str.abnormal_split'               => 'Дробление строки на символы',
        'scan.offer_modes_after_express'   => 'Сканирование выполнено в экспресс-режиме. Многие вредоносные скрипты могут быть не обнаружены.<br> Рекомендуем проверить сайт в режиме "Эксперт" или "Параноидальный". Подробно описано в <a href="https://revisium.com/ai/faq.php">FAQ</a> и инструкции к скрипту.',
        'mobile_redirects'                 => 'Мобильных редиректов',
        'skipped.large_file'               => 'Большие файлы (больше чем %s). Пропущено',
        'malware'                          => 'Вредоносных скриптов',
        'js_virused'                       => 'JS Вирусов',
        'phishing_pages'                   => 'Фишинговых страниц',
        'executable_files'                 => 'Исполняемых файлов',
        'iframe_injections'                => 'IFRAME вставок',
        'skipped_large_file'               => 'Пропущенных больших файлов',
        'error.read_file'                  => 'Ошибок чтения файлов',
        'suspicious'                       => 'Подозрительных',
        'report.summary'                   => 'Сводный отчет',
        'footer'                           => TemplateList::FOOTER_RU,
        'notice.files_may_not_malicious'   => "Обращаем внимание, что обнаруженные файлы не всегда являются вирусами и хакерскими скриптами. Сканер минимизирует число ложных обнаружений, но это не всегда возможно, так как найденный фрагмент может встречаться как во вредоносных скриптах, так и в обычных.<p>Для диагностического сканирования без ложных срабатываний мы разработали специальную версию <u><a href=\"https://revisium.com/ru/blog/ai-bolit-4-ISP.html\" target=_blank style=\"background: none; color: #303030\">сканера для хостинг-компаний</a></u>.",
        'script.vulnerable'                => "Уязвимости в скриптах",
        'path'                             => 'Путь',
        'property_change'                  => 'Изменение свойств',
        'content_change'                   => 'Изменение содержимого',
        'size'                             => 'Размер',
        'php_config'                       => 'Конфигурация PHP',
    ];

    const EN = [
        //variables for javascript
        'data_table.length_menu'           => 'Display _MENU_ records',
        'data_table.zero_records'          => 'Not found',
        'data_table.info'                  => 'Display from _START_ to _END_ of _TOTAL_ files',
        'data_table.info_empty'            => 'No files',
        'data_table.info_filtered'         => '(total _MAX_)',
        'data_table.search'                => 'Filter/Search:',
        'data_table.paginate.first'        => 'First',
        'data_table.paginate.previous'     => 'Previous',
        'data_table.paginate.next'         => 'Next',
        'data_table.paginate.last'         => 'Last',
        'data_table.aria.sort_ascending'   => ': activate to sort row ascending order',
        'data_table.aria.sort_descending'  => ': activate to sort row descending order',
        'header.scan_report_title'         => 'AI-Bolit v@@VERSION@@ Scan Report:',
        'offer.when_no_critical'           => '',
        'offer_our_products'               => TemplateList::OFFER_OUR_PRODUCTS_EN,
        'offer.when_has_critical'          => TemplateList::OFFER_EN,
        'сaution.aibolit_file'             => 'Caution! Do not leave either ai-bolit.php or report file on server and do not provide direct links to the report file. Report file contains sensitive information about your website which could be used by hackers. So keep it in safe place and don\'t leave on website!',
        'сaution.scanner_set_password'     => "Open AI-BOLIT with password specified in the beggining of file in PASS variable. <br/>E.g. http://you_website.com/ai-bolit.php?p=<b>%s</b>",
        'сaution.quick_scanned'            => '<div class="rep" style="color: #0000A0">Attention! Script has performed quick scan. It scans only .html/.js/.php files  in quick scan mode so some of malicious scripts might not be detected. <br>Please launch script from a command line thru SSH to perform full scan.',
        'warning.weak_password'            => "Your password for AI-BOLIT is too weak. Password must be more than 8 character length, contain both latin letters in upper and lower case, and digits. E.g. <b>%s</b>",
        'warning.folder_read_permission'   => 'Current folder is not readable. Please change permission for <b>rwxr-xr-x</b> or using command line <b>chmod +r folder_name</b>',
        'warnings'                         => 'Warnings',
        'warning.reading_error'            => 'Reading error. Skipped.',
        'info.time_elapsed'                => "<div class=\"rep\">%s malicious signatures known, %s virus signatures and other malicious code. Elapsed: <b>%s</b
>.<br/>Started: %s. Stopped: %s</div> ",
        'info.files_checked'               => 'Scanned %s folders and %s files.',
        'info.non_commercial_use'          => 'For non-commercial use only.',
        'critical.title'                   => '<div class="title">Critical</div>',
        'detected.shell_scripts'           => 'Shell script signatures detected. Might be a malicious or hacker\'s scripts',
        'not_detected.shell_scripts'       => 'Shell scripts signatures not detected.',
        'detected.javascript'              => 'Javascript virus signatures detected:',
        'detected.executables'             => 'Unix executables signatures and odd scripts detected. They might be a malicious binaries or rootkits:',
        'detected.bad_links'               => 'This script has black-SEO links or linkfarm. Check if it was installed by yourself:',
        'detected.phishing_pages'          => 'Phishing pages detected:',
        'file.not_found.more_than'         => 'Files greater than %s not found',
        'file.recommend_to_remove'         => 'Files recommended to be remove due to security reason:',
        'file.scanned_manual'              => 'Quick scan through the files from %s. For full scan remove %s and launch scanner once again.',
        'file.suspicion.heuristic_analyze' => 'Heuristic Analyzer has detected suspicious files. Check if they are malware.',
        'file.encrypted'                   => 'Encrypted files',
        'file.hidden'                      => 'Hidden files',
        'files_may_not_malicious'          => "Notice! Some of detected files may not contain malicious code. Scanner tries to minimize a number of false positives, but sometimes it's impossible, because same piece of code may be used either in malware or in normal scripts.",
        'file.added'                       => "Added files",
        'file.updated'                     => "Modified files",
        'file.deleted'                     => "Deleted files",
        'file_structure.updates'           => "Integrity Check Report",
        'hidden_files'                     => 'Hidden files:',
        'doorway.might'                    => 'Files might be a part of doorway:',
        'doorway.not_found'                => 'Doorway folders not detected',
        'suspicion.multiple'               => 'Suspicious encoded strings, extra .php extention or external includes detected in PHP files. Might be a malicious or hacker\'s script:',
        'suspicion.malicious'              => 'Might be a malicious or hacker\'s script:',
        'suspicion.htaccess'               => 'Malicious code in .htaccess (redirect to external server, extention handler replacement or malicious code auto-append):',
        'suspicion.non_php'                => 'Non-PHP file has PHP signature. Check for malicious code:',
        'suspicion.hidden_link'            => 'These files have invisible links, might be black-seo stuff:',
        'suspicion.doorway'                => 'Folders contained too many .php or .html files. Might be a doorway:',
        'suspicion.code'                   => 'Suspicious code detected. It\'s usually used in malicious scrips:',
        'suspicion.obfuscated_variables'   => 'Suspected for obfuscated variables',
        'suspicion.global_array'           => 'Suspected for $GLOBAL array usage',
        'suspicion.file_time'              => "Suspicious file mtime and ctime",
        'suspicion.file_attributes'        => "Suspicious file permissions",
        'suspicion.file_location'          => "Suspicious file location",
        'symlinks'                         => 'Symlinks:',
        'hidden_links'                     => 'List of invisible links:',
        'link.symbolic'                    => 'Symbolic links',
        'links.adware_spam'                => 'Adware and spam links',
        'links.empty'                      => 'Empty links',
        'display_only_first'               => 'Displayed first ',
        'skipped.adirignore'               => 'The following list of files specified in .adirignore has been skipped:',
        'founded_CMS'                      => 'CMS found:',
        'folder.unsafe_writable'           => 'Potentially unsafe! Folders which are writable for scripts:',
        'folder.unsafe_writable_not_found' => 'Writable folders not found',
        'folder.added'                     => "Added directories",
        'folder.deleted'                   => "Deleted directories",
        'memory_used'                      => 'Memory used: ',
        'notice.scan_express'              => '<div class="notice"><span class="vir">[!]</span> Ai-BOLIT is working in quick scan mode, only .php, .html, .htaccess files will be checked. Change the following setting \'scan_all_files\' => 1 to perform full scanning.</b>. </div>',
        'feedback_for_script'              => "I'm sincerely appreciate reports for any bugs you may found in the script. Please email me: <a href=\"mailto:audit@revisium.com\">audit@revisium.com</a>.<p> Also I appriciate any reference to the script in your blog or forum posts. Thank you for the link to download page: <a href=\"https://revisium.com/aibo/\">https://revisium.com/aibo/</a>",
        'report_for'                       => 'Report for ',
        'function.many_reference'          => 'Function called by reference',
        'str.abnormal_split'               => 'Abnormal split of string',
        'scan.offer_modes_after_express'   => 'Scanning has been done in simple mode. It is strongly recommended to perform scanning in "Expert" mode. See readme.txt for details.',
        'mobile_redirects'                 => 'Mobile redirects',
        'skipped.large_file'               => 'Large files (greater than %s! Skipped:',
        'malware'                          => 'Malware',
        'js_virused'                       => 'JS viruses',
        'phishing_pages'                   => 'Phishing pages',
        'executable_files'                 => 'Unix executables',
        'iframe_injections'                => 'IFRAME injections',
        'skipped_large_file'               => 'Skipped big files',
        'critical.error_read_file'         => 'Reading errors',
        'suspicious'                       => 'Suspicious',
        'report.summary'                   => 'Summary',
        'footer'                           => TemplateList::FOOTER_EN,
        'script.vulnerable'                => "Vulnerable Scripts",
        'path'                             => 'Path',
        'property_change'                  => 'iNode Changed',
        'content_change'                   => 'Modified',
        'size'                             => 'Size',
        'php_config'                       => 'PHP Info',
    ];
}


class UserList
{
    private $users = [];

    public function add($uid)
    {
        $this->users[$uid] = '';
    }

    public function getList()
    {
        ksort($this->users);
        return array_keys($this->users);
    }

    public function setList($list)
    {
        $this->users = $list;
    }
}

class OsReleaseInfo
{
    private $prefix = '';
    private $release_file = '';
    const DEBIAN = ['debian'];
    const RHEL_FEDORA_CENTOS = ['rhel', 'fedora', 'centos'];
    const UNKNOWN = ['unknown'];

    private $_supported_dists = [
        'SuSE', 'debian', 'fedora', 'redhat', 'centos',
        'mandrake', 'mandriva', 'rocks', 'slackware', 'yellowdog', 'gentoo',
        'UnitedLinux', 'turbolinux'];

    private $_release_filename = '(\w+)[-_](release|version)';
    private $_lsb_release_version = '(.+)'
    . ' release '
    . '([\d.]+)'
    . '[^(]*(?:\((.+)\))?';
    private $_release_version = '([^0-9]+)'
    . '(?: release )?'
    . '([\d.]+)'
    . '[^(]*(?:\((.+)\))?';

    private $release = [];

    public function __construct($prefix = '', $release_file = '/etc/os-release')
    {
        $this->prefix = $prefix;
        $this->release_file = $this->prefix . $release_file;
        $this->getRelease($this->release_file);
    }

    private function getOsReleaseAndVersion()
    {
        $ver = rtrim(@file_get_contents($this->prefix . '/etc/system-release'));
        return $ver ?: $this->release['VERSION'];
    }

    public function getOsVersion($release_and_version = false)
    {
        $rv = $release_and_version ? $release_and_version : $this->getOsReleaseAndVersion();
        if ($rv) {
            if (preg_match('~\s*(\d+\.\d+\S*)(\s|$)~', $rv, $m)) {
                return $m[1];
            }
        }
        return $this->release['VERSION_ID'] ? $this->release['VERSION_ID'] : false;
    }

    private function linuxDistribution($distname = '', $version = '', $id = '')
    {
        $dists = array_flip($this->_supported_dists);
        if (!file_exists($this->prefix . '/etc')) {
            return [$distname, $version, $id];
        }
        $file = '';
        $etc = scandir($this->prefix . '/etc');
        foreach ($etc as $file) {
            if (preg_match('~' . $this->_release_filename . '~', $file, $m)) {
                if (isset($dists[$m[1]])) {
                    $_distname = $m[1];
                    $distname = $m[1];
                    break;
                }
            }
        }
        $f = fopen($this->prefix . '/etc/' . $file, 'r');
        $firstline = fgets($f);
        fclose($f);
        list($_distname, $_version, $_id) = $this->_parseReleaseFile($firstline);

        if ($_distname) {
            $distname = $_distname;
        }

        if ($_version) {
            $version = $_version;
        }

        if ($_id) {
            $id = $_id;
        }

        return [$distname, $version, $id];
    }

    private function _parseReleaseFile($firstline)
    {
        $version = '';
        $id = '';
        if (preg_match('~' . $this->_lsb_release_version . '~', $firstline, $m)) {
            return [$m[1], $m[2], $m[3]];
        }

        if (preg_match('~' . $this->_release_version . '~', $firstline, $m)) {
            return [$m[1], $m[2], $m[3]];
        }

        $l = preg_split("~\s+~", trim($firstline), -1, PREG_SPLIT_NO_EMPTY);
        if (!empty($l)) {
            $version = $l[0];
            if (count($l) > 1) {
                $id = $l[1];
            }
        }
        return ['', $version, $id];
    }

    private function getReleaseFromFile($release_file)
    {
        $lines = file($release_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        foreach ($lines as $line) {
            list($k, $v) = explode('=', rtrim($line), 2);
            $this->release[$k] = trim($v, '"');
        }
        if (isset($this->release['ID_LIKE'])) {
            $this->release['ID_LIKE'] = preg_split('~\s+~', $this->release['ID_LIKE'], -1, PREG_SPLIT_NO_EMPTY);
        } else {
            $this->release['ID_LIKE'] = [$this->release['ID']];
        }
    }

    private function getRelease($release_file = '')
    {
        if (count($this->release) != 0) {
            return $this->release;
        }
        if ($this->release_file) {
            $release_file = $this->release_file;
        }
        $osid = '';
        if (file_exists($release_file)) {
            $this->getReleaseFromFile($release_file);
        } else {
            $d = $this->linuxDistribution();
            if ($d && isset($d[0])) {
                $osid = current(preg_split('~\s+~', strtolower($d[0]), -1, PREG_SPLIT_NO_EMPTY));
                if ($osid == 'red' && strpos($d[0], 'Red Hat Enterprise Linux')) {
                    $osid = 'rhel';
                }
                $this->release['ID'] = $osid;
                $this->release['PRETTY_NAME'] = "{$d[0]} {$d[1]} ({$d[2]})";
                if (in_array($osid, ['cloudlinux', 'centos', 'rhel'])) {
                    $this->release['ID_LIKE'] = self::RHEL_FEDORA_CENTOS;
                } else if (in_array($osid, ['ubuntu', 'debian'])) {
                    $this->release['ID_LIKE'] = self::DEBIAN;
                } else {
                    $this->release['ID_LIKE'] = self::UNKNOWN;
                }
            } else {
                $this->release['ID'] = 'unknown';
                $this->release['ID_LIKE'] = self::UNKNOWN;
                $this->release['PRETTY_NAME'] = 'unknown';
            }
        }
        return $this->release;
    }

    public function getIdLike()
    {
        $rel = $this->getRelease();
        return $rel['ID_LIKE'];
    }

    public function isIdLikeCentos()
    {
        $rel = $this->getRelease();
        foreach (self::RHEL_FEDORA_CENTOS as $os) {
            if (in_array($os, $rel['ID_LIKE'])) {
                return true;
            }
        }
        return false;
    }

    public function getPrettyName()
    {
        $rel = $this->getRelease();
        return $rel['PRETTY_NAME'];
    }

    public function getOs()
    {
        $rel = $this->getRelease();
        return $rel['ID'];
    }

    public function isRhel()
    {
        return $this->getOs() == 'rhel';
    }

    public function isCentos()
    {
        return $this->getOs() == 'centos';
    }

    public function isUbuntu()
    {
        return $this->getOs() == 'ubuntu';
    }

    public function isCloudlinux()
    {
        return $this->getOs() == 'cloudlinux';
    }

    public function isDebian()
    {
        return $this->getOs() == 'debian';
    }
}

/**
 * Class FileHashMemoryDb.
 *
 * Implements operations to load the file hash database into memory and work with it.
 */
class FileHashMemoryDb
{
    const HEADER_SIZE = 1024;
    const ROW_SIZE = 20;

    /**
     * @var int
     */
    private $count;
    /**
     * @var array
     */
    private $header;
    /**
     * @var resource
     */
    private $fp;
    /**
     * @var array
     */
    private $data;

    /**
     * Creates a new DB file and open it.
     *
     * @param $filepath
     * @return FileHashMemoryDb
     * @throws Exception
     */
    public static function create($filepath)
    {
        if (file_exists($filepath)) {
            throw new Exception('File \'' . $filepath . '\' already exists.');
        }

        $value = pack('V', 0);
        $header = array_fill(0, 256, $value);
        file_put_contents($filepath, implode($header));

        return new self($filepath);
    }

    /**
     * Opens a particular DB file.
     *
     * @param $filepath
     * @return FileHashMemoryDb
     * @throws Exception
     */
    public static function open($filepath)
    {
        if (!file_exists($filepath)) {
            throw new Exception('File \'' . $filepath . '\' does not exist.');
        }

        return new self($filepath);
    }

    /**
     * FileHashMemoryDb constructor.
     *
     * @param mixed $filepath
     * @throws Exception
     */
    private function __construct($filepath)
    {
        $this->fp = fopen($filepath, 'rb');

        if (false === $this->fp) {
            throw new Exception('File \'' . $filepath . '\' can not be opened.');
        }

        try {
            $this->header = unpack('V256', fread($this->fp, self::HEADER_SIZE));
            $this->count = (int) (max(0, filesize($filepath) - self::HEADER_SIZE) / self::ROW_SIZE);
            foreach ($this->header as $chunk_id => $chunk_size) {
                if ($chunk_size > 0) {
                    $str = fread($this->fp, $chunk_size);
                } else {
                    $str = '';
                }
                $this->data[$chunk_id] = $str;
            }
        } catch (Exception $e) {
            throw new Exception('File \'' . $filepath . '\' is not a valid DB file. An original error: \'' . $e->getMessage() . '\'');
        }
    }

    /**
     * Calculates and returns number of hashes stored in a loaded database.
     *
     * @return int number of hashes stored in a DB
     */
    public function count()
    {
        return $this->count;
    }

    /**
     * Find hashes in a DB.
     *
     * @param array $list of hashes to find in a DB
     * @return array list of hashes from the $list parameter that are found in a DB
     */
    public function find($list)
    {
        sort($list);
        
        $hash = reset($list);

        $found = array();

        foreach ($this->header as $chunk_id => $chunk_size) {
            if ($chunk_size > 0) {
                $str = $this->data[$chunk_id];

                do {
                    $raw = pack("H*", $hash);
                    $id  = ord($raw[0]) + 1;

                    if ($chunk_id == $id AND $this->binarySearch($str, $raw)) {
                        $found[] = (string)$hash;
                    }

                } while ($chunk_id >= $id AND $hash = next($list));

                if ($hash === false) {
                    break;
                }
            }
        }

        return $found;
    }

    /**
     * Searches $item in the $str using an implementation of the binary search algorithm.
     *
     * @param $str
     * @param $item
     * @return bool
     */
    private function binarySearch($str, $item) {
        $item_size = strlen($item);
        if ($item_size == 0) {
            return false;
        }

        $first = 0;

        $last = floor(strlen($str) / $item_size);

        while ($first < $last) {
            $mid = $first + (($last - $first) >> 1);
            $b   = substr($str, $mid * $item_size, $item_size);
            if (strcmp($item, $b) <= 0) {
                $last = $mid;
            } else {
                $first = $mid + 1;
            }
        }

        $b = substr($str, $last * $item_size, $item_size);
        if ($b == $item) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * FileHashDB destructor.
     */
    public function __destruct()
    {
        fclose($this->fp);
    }
}

class FilepathEscaper
{
    public static function encodeFilepath($filepath)
    {
        return str_replace(array('\\', "\n", "\r"), array('\\\\', '\\n', '\\r'), $filepath);
    }
    
    public static function decodeFilepath($filepath)
    {
        return preg_replace_callback('~(\\\\+)(.)~', function ($matches) {
            $count = strlen($matches[1]);
            if ($count % 2 === 0) {
                return str_repeat('\\', $count/2) . $matches[2];
            }
            return str_repeat('\\', floor($count/2)) . stripcslashes('\\' . $matches[2]);
        }, $filepath);
    }
    
    public static function encodeFilepathByBase64($filepath)
    {
        return base64_encode($filepath);
    }
    
    public static function decodeFilepathByBase64($filepath_base64)
    {
        return base64_decode($filepath_base64);
    }
}


class StringToStreamWrapper {

    const WRAPPER_NAME = 'var';

    private static $_content;
    private $_position;

    /**
     * Prepare a new memory stream with the specified content
     * @return string
     */
    public static function prepare($content)
    {
        if (!in_array(self::WRAPPER_NAME, stream_get_wrappers())) {
            stream_wrapper_register(self::WRAPPER_NAME, get_class());
        }
        self::$_content = $content;
    }

    public function stream_open($path, $mode, $options, &$opened_path)
    {
        $this->_position = 0;
        return true;
    }

    public function stream_read($count)
    {
        $ret = substr(self::$_content, $this->_position, $count);
        $this->_position += strlen($ret);
        return $ret;
    }

    public function stream_stat()
    {
        return array();
    }

    public function stream_eof()
    {
        return $this->_position >= strlen(self::$_content);
    }

    public function stream_set_option($option , $arg1, $arg2 )
    {
        return true;
    }
}

class Normalization
{
    const MAX_ITERATION = 10;

    private static $confusables = "YToxNTYyOntzOjM6IuKAqCI7czoxOiIgIjtzOjM6IuKAqSI7czoxOiIgIjtzOjM6IuGagCI7czoxOiIgIjtzOjM6IuKAgCI7czoxOiIgIjtzOjM6IuKAgSI7czoxOiIgIjtzOjM6IuKAgiI7czoxOiIgIjtzOjM6IuKAgyI7czoxOiIgIjtzOjM6IuKAhCI7czoxOiIgIjtzOjM6IuKAhSI7czoxOiIgIjtzOjM6IuKAhiI7czoxOiIgIjtzOjM6IuKAiCI7czoxOiIgIjtzOjM6IuKAiSI7czoxOiIgIjtzOjM6IuKAiiI7czoxOiIgIjtzOjM6IuKBnyI7czoxOiIgIjtzOjI6IsKgIjtzOjE6IiAiO3M6Mzoi4oCHIjtzOjE6IiAiO3M6Mzoi4oCvIjtzOjE6IiAiO3M6Mjoiw4IiO3M6MToiICI7czoyOiLfuiI7czoxOiJfIjtzOjM6Iu+5jSI7czoxOiJfIjtzOjM6Iu+5jiI7czoxOiJfIjtzOjM6Iu+5jyI7czoxOiJfIjtzOjM6IuKAkCI7czoxOiItIjtzOjM6IuKAkSI7czoxOiItIjtzOjM6IuKAkiI7czoxOiItIjtzOjM6IuKAkyI7czoxOiItIjtzOjM6Iu+5mCI7czoxOiItIjtzOjI6ItuUIjtzOjE6Ii0iO3M6Mzoi4oGDIjtzOjE6Ii0iO3M6Mjoiy5ciO3M6MToiLSI7czozOiLiiJIiO3M6MToiLSI7czozOiLinpYiO3M6MToiLSI7czozOiLisroiO3M6MToiLSI7czoyOiLYjSI7czoxOiIsIjtzOjI6ItmrIjtzOjE6IiwiO3M6Mzoi4oCaIjtzOjE6IiwiO3M6MjoiwrgiO3M6MToiLCI7czozOiLqk7kiO3M6MToiLCI7czoyOiLNviI7czoxOiI7IjtzOjM6IuCkgyI7czoxOiI6IjtzOjM6IuCqgyI7czoxOiI6IjtzOjM6Iu+8miI7czoxOiI6IjtzOjI6ItaJIjtzOjE6IjoiO3M6Mjoi3IMiO3M6MToiOiI7czoyOiLchCI7czoxOiI6IjtzOjM6IuGbrCI7czoxOiI6IjtzOjM6Iu+4sCI7czoxOiI6IjtzOjM6IuGggyI7czoxOiI6IjtzOjM6IuGgiSI7czoxOiI6IjtzOjM6IuKBmiI7czoxOiI6IjtzOjI6IteDIjtzOjE6IjoiO3M6Mjoiy7giO3M6MToiOiI7czozOiLqnokiO3M6MToiOiI7czozOiLiiLYiO3M6MToiOiI7czoyOiLLkCI7czoxOiI6IjtzOjM6IuqTvSI7czoxOiI6IjtzOjM6Iu+8gSI7czoxOiIhIjtzOjI6IseDIjtzOjE6IiEiO3M6Mzoi4rWRIjtzOjE6IiEiO3M6MjoiypQiO3M6MToiPyI7czoyOiLJgSI7czoxOiI/IjtzOjM6IuClvSI7czoxOiI/IjtzOjM6IuGOriI7czoxOiI/IjtzOjM6IuqbqyI7czoxOiI/IjtzOjQ6IvCdha0iO3M6MToiLiI7czozOiLigKQiO3M6MToiLiI7czoyOiLcgSI7czoxOiIuIjtzOjI6ItyCIjtzOjE6Ii4iO3M6Mzoi6piOIjtzOjE6Ii4iO3M6NDoi8JCpkCI7czoxOiIuIjtzOjI6ItmgIjtzOjE6Ii4iO3M6Mjoi27AiO3M6MToiLiI7czozOiLqk7giO3M6MToiLiI7czozOiLjg7siO3M6MToityI7czozOiLvvaUiO3M6MToityI7czozOiLhm6siO3M6MToityI7czoyOiLOhyI7czoxOiK3IjtzOjM6IuK4sSI7czoxOiK3IjtzOjQ6IvCQhIEiO3M6MToityI7czozOiLigKIiO3M6MToityI7czozOiLigKciO3M6MToityI7czozOiLiiJkiO3M6MToityI7czozOiLii4UiO3M6MToityI7czozOiLqno8iO3M6MToityI7czozOiLhkKciO3M6MToityI7czoyOiLVnSI7czoxOiInIjtzOjM6Iu+8hyI7czoxOiInIjtzOjM6IuKAmCI7czoxOiInIjtzOjM6IuKAmSI7czoxOiInIjtzOjM6IuKAmyI7czoxOiInIjtzOjM6IuKAsiI7czoxOiInIjtzOjM6IuKAtSI7czoxOiInIjtzOjI6ItWaIjtzOjE6IiciO3M6Mjoi17MiO3M6MToiJyI7czoxOiJgIjtzOjE6IiciO3M6Mzoi4b+vIjtzOjE6IiciO3M6Mzoi772AIjtzOjE6IiciO3M6MjoiwrQiO3M6MToiJyI7czoyOiLOhCI7czoxOiInIjtzOjM6IuG/vSI7czoxOiInIjtzOjM6IuG+vSI7czoxOiInIjtzOjM6IuG+vyI7czoxOiInIjtzOjM6IuG/viI7czoxOiInIjtzOjI6Isq5IjtzOjE6IiciO3M6MjoizbQiO3M6MToiJyI7czoyOiLLiCI7czoxOiInIjtzOjI6IsuKIjtzOjE6IiciO3M6Mjoiy4siO3M6MToiJyI7czoyOiLLtCI7czoxOiInIjtzOjI6Isq7IjtzOjE6IiciO3M6Mjoiyr0iO3M6MToiJyI7czoyOiLKvCI7czoxOiInIjtzOjI6Isq+IjtzOjE6IiciO3M6Mzoi6p6MIjtzOjE6IiciO3M6Mjoi15kiO3M6MToiJyI7czoyOiLftCI7czoxOiInIjtzOjI6It+1IjtzOjE6IiciO3M6Mzoi4ZGKIjtzOjE6IiciO3M6Mzoi4ZuMIjtzOjE6IiciO3M6NDoi8Ja9kSI7czoxOiInIjtzOjQ6IvCWvZIiO3M6MToiJyI7czozOiLvvLsiO3M6MToiKCI7czozOiLinagiO3M6MToiKCI7czozOiLinbIiO3M6MToiKCI7czozOiLjgJQiO3M6MToiKCI7czozOiLvtL4iO3M6MToiKCI7czozOiLvvL0iO3M6MToiKSI7czozOiLinakiO3M6MToiKSI7czozOiLinbMiO3M6MToiKSI7czozOiLjgJUiO3M6MToiKSI7czozOiLvtL8iO3M6MToiKSI7czozOiLinbQiO3M6MToieyI7czo0OiLwnYSUIjtzOjE6InsiO3M6Mzoi4p21IjtzOjE6In0iO3M6Mzoi4ri/IjtzOjE6IrYiO3M6Mzoi4oGOIjtzOjE6IioiO3M6Mjoi2a0iO3M6MToiKiI7czozOiLiiJciO3M6MToiKiI7czo0OiLwkIyfIjtzOjE6IioiO3M6Mzoi4Zy1IjtzOjE6Ii8iO3M6Mzoi4oGBIjtzOjE6Ii8iO3M6Mzoi4oiVIjtzOjE6Ii8iO3M6Mzoi4oGEIjtzOjE6Ii8iO3M6Mzoi4pWxIjtzOjE6Ii8iO3M6Mzoi4p+LIjtzOjE6Ii8iO3M6Mzoi4qe4IjtzOjE6Ii8iO3M6NDoi8J2IuiI7czoxOiIvIjtzOjM6IuOHkyI7czoxOiIvIjtzOjM6IuOAsyI7czoxOiIvIjtzOjM6IuKzhiI7czoxOiIvIjtzOjM6IuODjiI7czoxOiIvIjtzOjM6IuS4vyI7czoxOiIvIjtzOjM6IuK8gyI7czoxOiIvIjtzOjM6Iu+8vCI7czoxOiJcIjtzOjM6Iu+5qCI7czoxOiJcIjtzOjM6IuKIliI7czoxOiJcIjtzOjM6IuKfjSI7czoxOiJcIjtzOjM6IuKntSI7czoxOiJcIjtzOjM6IuKnuSI7czoxOiJcIjtzOjQ6IvCdiI8iO3M6MToiXCI7czo0OiLwnYi7IjtzOjE6IlwiO3M6Mzoi44eUIjtzOjE6IlwiO3M6Mzoi5Li2IjtzOjE6IlwiO3M6Mzoi4ryCIjtzOjE6IlwiO3M6Mzoi6p24IjtzOjE6IiYiO3M6Mjoiy4QiO3M6MToiXiI7czoyOiLLhiI7czoxOiJeIjtzOjM6IuK4sCI7czoxOiKwIjtzOjI6IsuaIjtzOjE6IrAiO3M6Mzoi4oiYIjtzOjE6IrAiO3M6Mzoi4peLIjtzOjE6IrAiO3M6Mzoi4pemIjtzOjE6IrAiO3M6Mzoi4pK4IjtzOjE6IqkiO3M6Mzoi4pOHIjtzOjE6Iq4iO3M6Mzoi4ZutIjtzOjE6IisiO3M6Mzoi4p6VIjtzOjE6IisiO3M6NDoi8JCKmyI7czoxOiIrIjtzOjM6IuKelyI7czoxOiL3IjtzOjM6IuKAuSI7czoxOiI8IjtzOjM6IuKdriI7czoxOiI8IjtzOjI6IsuCIjtzOjE6IjwiO3M6NDoi8J2ItiI7czoxOiI8IjtzOjM6IuGQuCI7czoxOiI8IjtzOjM6IuGasiI7czoxOiI8IjtzOjM6IuGQgCI7czoxOiI9IjtzOjM6IuK5gCI7czoxOiI9IjtzOjM6IuOCoCI7czoxOiI9IjtzOjM6IuqTvyI7czoxOiI9IjtzOjM6IuKAuiI7czoxOiI+IjtzOjM6IuKdryI7czoxOiI+IjtzOjI6IsuDIjtzOjE6Ij4iO3M6NDoi8J2ItyI7czoxOiI+IjtzOjM6IuGQsyI7czoxOiI+IjtzOjQ6IvCWvL8iO3M6MToiPiI7czozOiLigZMiO3M6MToifiI7czoyOiLLnCI7czoxOiJ+IjtzOjM6IuG/gCI7czoxOiJ+IjtzOjM6IuKIvCI7czoxOiJ+IjtzOjM6IuKCpCI7czoxOiKjIjtzOjQ6IvCdn5AiO3M6MToiMiI7czo0OiLwnZ+aIjtzOjE6IjIiO3M6NDoi8J2fpCI7czoxOiIyIjtzOjQ6IvCdn64iO3M6MToiMiI7czo0OiLwnZ+4IjtzOjE6IjIiO3M6Mzoi6p2aIjtzOjE6IjIiO3M6MjoixqciO3M6MToiMiI7czoyOiLPqCI7czoxOiIyIjtzOjM6IuqZhCI7czoxOiIyIjtzOjM6IuGSvyI7czoxOiIyIjtzOjM6IuqbryI7czoxOiIyIjtzOjQ6IvCdiIYiO3M6MToiMyI7czo0OiLwnZ+RIjtzOjE6IjMiO3M6NDoi8J2fmyI7czoxOiIzIjtzOjQ6IvCdn6UiO3M6MToiMyI7czo0OiLwnZ+vIjtzOjE6IjMiO3M6NDoi8J2fuSI7czoxOiIzIjtzOjM6IuqeqyI7czoxOiIzIjtzOjI6IsicIjtzOjE6IjMiO3M6MjoixrciO3M6MToiMyI7czozOiLqnaoiO3M6MToiMyI7czozOiLis4wiO3M6MToiMyI7czoyOiLQlyI7czoxOiIzIjtzOjI6ItOgIjtzOjE6IjMiO3M6NDoi8Ja8uyI7czoxOiIzIjtzOjQ6IvCRo4oiO3M6MToiMyI7czo0OiLwnZ+SIjtzOjE6IjQiO3M6NDoi8J2fnCI7czoxOiI0IjtzOjQ6IvCdn6YiO3M6MToiNCI7czo0OiLwnZ+wIjtzOjE6IjQiO3M6NDoi8J2fuiI7czoxOiI0IjtzOjM6IuGPjiI7czoxOiI0IjtzOjQ6IvCRoq8iO3M6MToiNCI7czo0OiLwnZ+TIjtzOjE6IjUiO3M6NDoi8J2fnSI7czoxOiI1IjtzOjQ6IvCdn6ciO3M6MToiNSI7czo0OiLwnZ+xIjtzOjE6IjUiO3M6NDoi8J2fuyI7czoxOiI1IjtzOjI6Isa8IjtzOjE6IjUiO3M6NDoi8JGiuyI7czoxOiI1IjtzOjQ6IvCdn5QiO3M6MToiNiI7czo0OiLwnZ+eIjtzOjE6IjYiO3M6NDoi8J2fqCI7czoxOiI2IjtzOjQ6IvCdn7IiO3M6MToiNiI7czo0OiLwnZ+8IjtzOjE6IjYiO3M6Mzoi4rOSIjtzOjE6IjYiO3M6Mjoi0LEiO3M6MToiNiI7czozOiLhj64iO3M6MToiNiI7czo0OiLwkaOVIjtzOjE6IjYiO3M6NDoi8J2IkiI7czoxOiI3IjtzOjQ6IvCdn5UiO3M6MToiNyI7czo0OiLwnZ+fIjtzOjE6IjciO3M6NDoi8J2fqSI7czoxOiI3IjtzOjQ6IvCdn7MiO3M6MToiNyI7czo0OiLwnZ+9IjtzOjE6IjciO3M6NDoi8JCTkiI7czoxOiI3IjtzOjQ6IvCRo4YiO3M6MToiNyI7czozOiLgrIMiO3M6MToiOCI7czozOiLgp6oiO3M6MToiOCI7czozOiLgqaoiO3M6MToiOCI7czo0OiLwnqOLIjtzOjE6IjgiO3M6NDoi8J2fliI7czoxOiI4IjtzOjQ6IvCdn6AiO3M6MToiOCI7czo0OiLwnZ+qIjtzOjE6IjgiO3M6NDoi8J2ftCI7czoxOiI4IjtzOjQ6IvCdn74iO3M6MToiOCI7czoyOiLIoyI7czoxOiI4IjtzOjI6IsiiIjtzOjE6IjgiO3M6NDoi8JCMmiI7czoxOiI4IjtzOjM6IuCppyI7czoxOiI5IjtzOjM6IuCtqCI7czoxOiI5IjtzOjM6IuCnrSI7czoxOiI5IjtzOjM6IuC1rSI7czoxOiI5IjtzOjQ6IvCdn5ciO3M6MToiOSI7czo0OiLwnZ+hIjtzOjE6IjkiO3M6NDoi8J2fqyI7czoxOiI5IjtzOjQ6IvCdn7UiO3M6MToiOSI7czo0OiLwnZ+/IjtzOjE6IjkiO3M6Mzoi6p2uIjtzOjE6IjkiO3M6Mzoi4rOKIjtzOjE6IjkiO3M6NDoi8JGjjCI7czoxOiI5IjtzOjQ6IvCRoqwiO3M6MToiOSI7czo0OiLwkaOWIjtzOjE6IjkiO3M6Mzoi4o26IjtzOjE6ImEiO3M6Mzoi772BIjtzOjE6ImEiO3M6NDoi8J2QmiI7czoxOiJhIjtzOjQ6IvCdkY4iO3M6MToiYSI7czo0OiLwnZKCIjtzOjE6ImEiO3M6NDoi8J2StiI7czoxOiJhIjtzOjQ6IvCdk6oiO3M6MToiYSI7czo0OiLwnZSeIjtzOjE6ImEiO3M6NDoi8J2VkiI7czoxOiJhIjtzOjQ6IvCdloYiO3M6MToiYSI7czo0OiLwnZa6IjtzOjE6ImEiO3M6NDoi8J2XriI7czoxOiJhIjtzOjQ6IvCdmKIiO3M6MToiYSI7czo0OiLwnZmWIjtzOjE6ImEiO3M6NDoi8J2aiiI7czoxOiJhIjtzOjI6IsmRIjtzOjE6ImEiO3M6MjoizrEiO3M6MToiYSI7czo0OiLwnZuCIjtzOjE6ImEiO3M6NDoi8J2bvCI7czoxOiJhIjtzOjQ6IvCdnLYiO3M6MToiYSI7czo0OiLwnZ2wIjtzOjE6ImEiO3M6NDoi8J2eqiI7czoxOiJhIjtzOjI6ItCwIjtzOjE6ImEiO3M6Mzoi77yhIjtzOjE6IkEiO3M6NDoi8J2QgCI7czoxOiJBIjtzOjQ6IvCdkLQiO3M6MToiQSI7czo0OiLwnZGoIjtzOjE6IkEiO3M6NDoi8J2SnCI7czoxOiJBIjtzOjQ6IvCdk5AiO3M6MToiQSI7czo0OiLwnZSEIjtzOjE6IkEiO3M6NDoi8J2UuCI7czoxOiJBIjtzOjQ6IvCdlawiO3M6MToiQSI7czo0OiLwnZagIjtzOjE6IkEiO3M6NDoi8J2XlCI7czoxOiJBIjtzOjQ6IvCdmIgiO3M6MToiQSI7czo0OiLwnZi8IjtzOjE6IkEiO3M6NDoi8J2ZsCI7czoxOiJBIjtzOjI6Is6RIjtzOjE6IkEiO3M6NDoi8J2aqCI7czoxOiJBIjtzOjQ6IvCdm6IiO3M6MToiQSI7czo0OiLwnZycIjtzOjE6IkEiO3M6NDoi8J2dliI7czoxOiJBIjtzOjQ6IvCdnpAiO3M6MToiQSI7czoyOiLQkCI7czoxOiJBIjtzOjM6IuGOqiI7czoxOiJBIjtzOjM6IuGXhSI7czoxOiJBIjtzOjM6IuqTriI7czoxOiJBIjtzOjQ6IvCWvYAiO3M6MToiQSI7czo0OiLwkIqgIjtzOjE6IkEiO3M6MjoiyKciO3M6MToi5SI7czoyOiLIpiI7czoxOiLFIjtzOjQ6IvCdkJsiO3M6MToiYiI7czo0OiLwnZGPIjtzOjE6ImIiO3M6NDoi8J2SgyI7czoxOiJiIjtzOjQ6IvCdkrciO3M6MToiYiI7czo0OiLwnZOrIjtzOjE6ImIiO3M6NDoi8J2UnyI7czoxOiJiIjtzOjQ6IvCdlZMiO3M6MToiYiI7czo0OiLwnZaHIjtzOjE6ImIiO3M6NDoi8J2WuyI7czoxOiJiIjtzOjQ6IvCdl68iO3M6MToiYiI7czo0OiLwnZijIjtzOjE6ImIiO3M6NDoi8J2ZlyI7czoxOiJiIjtzOjQ6IvCdmosiO3M6MToiYiI7czoyOiLGhCI7czoxOiJiIjtzOjI6ItCsIjtzOjE6ImIiO3M6Mzoi4Y+PIjtzOjE6ImIiO3M6Mzoi4ZGyIjtzOjE6ImIiO3M6Mzoi4ZavIjtzOjE6ImIiO3M6Mzoi77yiIjtzOjE6IkIiO3M6Mzoi4oSsIjtzOjE6IkIiO3M6NDoi8J2QgSI7czoxOiJCIjtzOjQ6IvCdkLUiO3M6MToiQiI7czo0OiLwnZGpIjtzOjE6IkIiO3M6NDoi8J2TkSI7czoxOiJCIjtzOjQ6IvCdlIUiO3M6MToiQiI7czo0OiLwnZS5IjtzOjE6IkIiO3M6NDoi8J2VrSI7czoxOiJCIjtzOjQ6IvCdlqEiO3M6MToiQiI7czo0OiLwnZeVIjtzOjE6IkIiO3M6NDoi8J2YiSI7czoxOiJCIjtzOjQ6IvCdmL0iO3M6MToiQiI7czo0OiLwnZmxIjtzOjE6IkIiO3M6Mzoi6p60IjtzOjE6IkIiO3M6MjoizpIiO3M6MToiQiI7czo0OiLwnZqpIjtzOjE6IkIiO3M6NDoi8J2boyI7czoxOiJCIjtzOjQ6IvCdnJ0iO3M6MToiQiI7czo0OiLwnZ2XIjtzOjE6IkIiO3M6NDoi8J2ekSI7czoxOiJCIjtzOjI6ItCSIjtzOjE6IkIiO3M6Mzoi4Y+0IjtzOjE6IkIiO3M6Mzoi4Ze3IjtzOjE6IkIiO3M6Mzoi6pOQIjtzOjE6IkIiO3M6NDoi8JCKgiI7czoxOiJCIjtzOjQ6IvCQiqEiO3M6MToiQiI7czo0OiLwkIyBIjtzOjE6IkIiO3M6Mzoi772DIjtzOjE6ImMiO3M6Mzoi4oW9IjtzOjE6ImMiO3M6NDoi8J2QnCI7czoxOiJjIjtzOjQ6IvCdkZAiO3M6MToiYyI7czo0OiLwnZKEIjtzOjE6ImMiO3M6NDoi8J2SuCI7czoxOiJjIjtzOjQ6IvCdk6wiO3M6MToiYyI7czo0OiLwnZSgIjtzOjE6ImMiO3M6NDoi8J2VlCI7czoxOiJjIjtzOjQ6IvCdlogiO3M6MToiYyI7czo0OiLwnZa8IjtzOjE6ImMiO3M6NDoi8J2XsCI7czoxOiJjIjtzOjQ6IvCdmKQiO3M6MToiYyI7czo0OiLwnZmYIjtzOjE6ImMiO3M6NDoi8J2ajCI7czoxOiJjIjtzOjM6IuG0hCI7czoxOiJjIjtzOjI6Is+yIjtzOjE6ImMiO3M6Mzoi4rKlIjtzOjE6ImMiO3M6Mjoi0YEiO3M6MToiYyI7czozOiLqrq8iO3M6MToiYyI7czo0OiLwkJC9IjtzOjE6ImMiO3M6NDoi8J+djCI7czoxOiJDIjtzOjQ6IvCRo7IiO3M6MToiQyI7czo0OiLwkaOpIjtzOjE6IkMiO3M6Mzoi77yjIjtzOjE6IkMiO3M6Mzoi4oWtIjtzOjE6IkMiO3M6Mzoi4oSCIjtzOjE6IkMiO3M6Mzoi4oStIjtzOjE6IkMiO3M6NDoi8J2QgiI7czoxOiJDIjtzOjQ6IvCdkLYiO3M6MToiQyI7czo0OiLwnZGqIjtzOjE6IkMiO3M6NDoi8J2SniI7czoxOiJDIjtzOjQ6IvCdk5IiO3M6MToiQyI7czo0OiLwnZWuIjtzOjE6IkMiO3M6NDoi8J2WoiI7czoxOiJDIjtzOjQ6IvCdl5YiO3M6MToiQyI7czo0OiLwnZiKIjtzOjE6IkMiO3M6NDoi8J2YviI7czoxOiJDIjtzOjQ6IvCdmbIiO3M6MToiQyI7czoyOiLPuSI7czoxOiJDIjtzOjM6IuKypCI7czoxOiJDIjtzOjI6ItChIjtzOjE6IkMiO3M6Mzoi4Y+fIjtzOjE6IkMiO3M6Mzoi6pOaIjtzOjE6IkMiO3M6NDoi8JCKoiI7czoxOiJDIjtzOjQ6IvCQjIIiO3M6MToiQyI7czo0OiLwkJCVIjtzOjE6IkMiO3M6NDoi8JCUnCI7czoxOiJDIjtzOjM6IuKFviI7czoxOiJkIjtzOjM6IuKFhiI7czoxOiJkIjtzOjQ6IvCdkJ0iO3M6MToiZCI7czo0OiLwnZGRIjtzOjE6ImQiO3M6NDoi8J2ShSI7czoxOiJkIjtzOjQ6IvCdkrkiO3M6MToiZCI7czo0OiLwnZOtIjtzOjE6ImQiO3M6NDoi8J2UoSI7czoxOiJkIjtzOjQ6IvCdlZUiO3M6MToiZCI7czo0OiLwnZaJIjtzOjE6ImQiO3M6NDoi8J2WvSI7czoxOiJkIjtzOjQ6IvCdl7EiO3M6MToiZCI7czo0OiLwnZilIjtzOjE6ImQiO3M6NDoi8J2ZmSI7czoxOiJkIjtzOjQ6IvCdmo0iO3M6MToiZCI7czoyOiLUgSI7czoxOiJkIjtzOjM6IuGPpyI7czoxOiJkIjtzOjM6IuGRryI7czoxOiJkIjtzOjM6IuqTkiI7czoxOiJkIjtzOjM6IuKFriI7czoxOiJEIjtzOjM6IuKFhSI7czoxOiJEIjtzOjQ6IvCdkIMiO3M6MToiRCI7czo0OiLwnZC3IjtzOjE6IkQiO3M6NDoi8J2RqyI7czoxOiJEIjtzOjQ6IvCdkp8iO3M6MToiRCI7czo0OiLwnZOTIjtzOjE6IkQiO3M6NDoi8J2UhyI7czoxOiJEIjtzOjQ6IvCdlLsiO3M6MToiRCI7czo0OiLwnZWvIjtzOjE6IkQiO3M6NDoi8J2WoyI7czoxOiJEIjtzOjQ6IvCdl5ciO3M6MToiRCI7czo0OiLwnZiLIjtzOjE6IkQiO3M6NDoi8J2YvyI7czoxOiJEIjtzOjQ6IvCdmbMiO3M6MToiRCI7czozOiLhjqAiO3M6MToiRCI7czozOiLhl54iO3M6MToiRCI7czozOiLhl6oiO3M6MToiRCI7czozOiLqk5MiO3M6MToiRCI7czozOiLihK4iO3M6MToiZSI7czozOiLvvYUiO3M6MToiZSI7czozOiLihK8iO3M6MToiZSI7czozOiLihYciO3M6MToiZSI7czo0OiLwnZCeIjtzOjE6ImUiO3M6NDoi8J2RkiI7czoxOiJlIjtzOjQ6IvCdkoYiO3M6MToiZSI7czo0OiLwnZOuIjtzOjE6ImUiO3M6NDoi8J2UoiI7czoxOiJlIjtzOjQ6IvCdlZYiO3M6MToiZSI7czo0OiLwnZaKIjtzOjE6ImUiO3M6NDoi8J2WviI7czoxOiJlIjtzOjQ6IvCdl7IiO3M6MToiZSI7czo0OiLwnZimIjtzOjE6ImUiO3M6NDoi8J2ZmiI7czoxOiJlIjtzOjQ6IvCdmo4iO3M6MToiZSI7czozOiLqrLIiO3M6MToiZSI7czoyOiLQtSI7czoxOiJlIjtzOjI6ItK9IjtzOjE6ImUiO3M6Mjoiw6kiO3M6MToiZSI7czozOiLii78iO3M6MToiRSI7czozOiLvvKUiO3M6MToiRSI7czozOiLihLAiO3M6MToiRSI7czo0OiLwnZCEIjtzOjE6IkUiO3M6NDoi8J2QuCI7czoxOiJFIjtzOjQ6IvCdkawiO3M6MToiRSI7czo0OiLwnZOUIjtzOjE6IkUiO3M6NDoi8J2UiCI7czoxOiJFIjtzOjQ6IvCdlLwiO3M6MToiRSI7czo0OiLwnZWwIjtzOjE6IkUiO3M6NDoi8J2WpCI7czoxOiJFIjtzOjQ6IvCdl5giO3M6MToiRSI7czo0OiLwnZiMIjtzOjE6IkUiO3M6NDoi8J2ZgCI7czoxOiJFIjtzOjQ6IvCdmbQiO3M6MToiRSI7czoyOiLOlSI7czoxOiJFIjtzOjQ6IvCdmqwiO3M6MToiRSI7czo0OiLwnZumIjtzOjE6IkUiO3M6NDoi8J2coCI7czoxOiJFIjtzOjQ6IvCdnZoiO3M6MToiRSI7czo0OiLwnZ6UIjtzOjE6IkUiO3M6Mjoi0JUiO3M6MToiRSI7czozOiLitLkiO3M6MToiRSI7czozOiLhjqwiO3M6MToiRSI7czozOiLqk7AiO3M6MToiRSI7czo0OiLwkaKmIjtzOjE6IkUiO3M6NDoi8JGiriI7czoxOiJFIjtzOjQ6IvCQioYiO3M6MToiRSI7czo0OiLwnZCfIjtzOjE6ImYiO3M6NDoi8J2RkyI7czoxOiJmIjtzOjQ6IvCdkociO3M6MToiZiI7czo0OiLwnZK7IjtzOjE6ImYiO3M6NDoi8J2TryI7czoxOiJmIjtzOjQ6IvCdlKMiO3M6MToiZiI7czo0OiLwnZWXIjtzOjE6ImYiO3M6NDoi8J2WiyI7czoxOiJmIjtzOjQ6IvCdlr8iO3M6MToiZiI7czo0OiLwnZezIjtzOjE6ImYiO3M6NDoi8J2YpyI7czoxOiJmIjtzOjQ6IvCdmZsiO3M6MToiZiI7czo0OiLwnZqPIjtzOjE6ImYiO3M6Mzoi6qy1IjtzOjE6ImYiO3M6Mzoi6p6ZIjtzOjE6ImYiO3M6Mjoixb8iO3M6MToiZiI7czozOiLhup0iO3M6MToiZiI7czoyOiLWhCI7czoxOiJmIjtzOjQ6IvCdiJMiO3M6MToiRiI7czozOiLihLEiO3M6MToiRiI7czo0OiLwnZCFIjtzOjE6IkYiO3M6NDoi8J2QuSI7czoxOiJGIjtzOjQ6IvCdka0iO3M6MToiRiI7czo0OiLwnZOVIjtzOjE6IkYiO3M6NDoi8J2UiSI7czoxOiJGIjtzOjQ6IvCdlL0iO3M6MToiRiI7czo0OiLwnZWxIjtzOjE6IkYiO3M6NDoi8J2WpSI7czoxOiJGIjtzOjQ6IvCdl5kiO3M6MToiRiI7czo0OiLwnZiNIjtzOjE6IkYiO3M6NDoi8J2ZgSI7czoxOiJGIjtzOjQ6IvCdmbUiO3M6MToiRiI7czozOiLqnpgiO3M6MToiRiI7czoyOiLPnCI7czoxOiJGIjtzOjQ6IvCdn4oiO3M6MToiRiI7czozOiLhlrQiO3M6MToiRiI7czozOiLqk50iO3M6MToiRiI7czo0OiLwkaOCIjtzOjE6IkYiO3M6NDoi8JGioiI7czoxOiJGIjtzOjQ6IvCQiociO3M6MToiRiI7czo0OiLwkIqlIjtzOjE6IkYiO3M6NDoi8JCUpSI7czoxOiJGIjtzOjM6Iu+9hyI7czoxOiJnIjtzOjM6IuKEiiI7czoxOiJnIjtzOjQ6IvCdkKAiO3M6MToiZyI7czo0OiLwnZGUIjtzOjE6ImciO3M6NDoi8J2SiCI7czoxOiJnIjtzOjQ6IvCdk7AiO3M6MToiZyI7czo0OiLwnZSkIjtzOjE6ImciO3M6NDoi8J2VmCI7czoxOiJnIjtzOjQ6IvCdlowiO3M6MToiZyI7czo0OiLwnZeAIjtzOjE6ImciO3M6NDoi8J2XtCI7czoxOiJnIjtzOjQ6IvCdmKgiO3M6MToiZyI7czo0OiLwnZmcIjtzOjE6ImciO3M6NDoi8J2akCI7czoxOiJnIjtzOjI6IsmhIjtzOjE6ImciO3M6Mzoi4baDIjtzOjE6ImciO3M6Mjoixo0iO3M6MToiZyI7czoyOiLWgSI7czoxOiJnIjtzOjQ6IvCdkIYiO3M6MToiRyI7czo0OiLwnZC6IjtzOjE6IkciO3M6NDoi8J2RriI7czoxOiJHIjtzOjQ6IvCdkqIiO3M6MToiRyI7czo0OiLwnZOWIjtzOjE6IkciO3M6NDoi8J2UiiI7czoxOiJHIjtzOjQ6IvCdlL4iO3M6MToiRyI7czo0OiLwnZWyIjtzOjE6IkciO3M6NDoi8J2WpiI7czoxOiJHIjtzOjQ6IvCdl5oiO3M6MToiRyI7czo0OiLwnZiOIjtzOjE6IkciO3M6NDoi8J2ZgiI7czoxOiJHIjtzOjQ6IvCdmbYiO3M6MToiRyI7czoyOiLUjCI7czoxOiJHIjtzOjM6IuGPgCI7czoxOiJHIjtzOjM6IuGPsyI7czoxOiJHIjtzOjM6IuqTliI7czoxOiJHIjtzOjM6Iu+9iCI7czoxOiJoIjtzOjM6IuKEjiI7czoxOiJoIjtzOjQ6IvCdkKEiO3M6MToiaCI7czo0OiLwnZKJIjtzOjE6ImgiO3M6NDoi8J2SvSI7czoxOiJoIjtzOjQ6IvCdk7EiO3M6MToiaCI7czo0OiLwnZSlIjtzOjE6ImgiO3M6NDoi8J2VmSI7czoxOiJoIjtzOjQ6IvCdlo0iO3M6MToiaCI7czo0OiLwnZeBIjtzOjE6ImgiO3M6NDoi8J2XtSI7czoxOiJoIjtzOjQ6IvCdmKkiO3M6MToiaCI7czo0OiLwnZmdIjtzOjE6ImgiO3M6NDoi8J2akSI7czoxOiJoIjtzOjI6ItK7IjtzOjE6ImgiO3M6Mjoi1bAiO3M6MToiaCI7czozOiLhj4IiO3M6MToiaCI7czozOiLvvKgiO3M6MToiSCI7czozOiLihIsiO3M6MToiSCI7czozOiLihIwiO3M6MToiSCI7czozOiLihI0iO3M6MToiSCI7czo0OiLwnZCHIjtzOjE6IkgiO3M6NDoi8J2QuyI7czoxOiJIIjtzOjQ6IvCdka8iO3M6MToiSCI7czo0OiLwnZOXIjtzOjE6IkgiO3M6NDoi8J2VsyI7czoxOiJIIjtzOjQ6IvCdlqciO3M6MToiSCI7czo0OiLwnZebIjtzOjE6IkgiO3M6NDoi8J2YjyI7czoxOiJIIjtzOjQ6IvCdmYMiO3M6MToiSCI7czo0OiLwnZm3IjtzOjE6IkgiO3M6MjoizpciO3M6MToiSCI7czo0OiLwnZquIjtzOjE6IkgiO3M6NDoi8J2bqCI7czoxOiJIIjtzOjQ6IvCdnKIiO3M6MToiSCI7czo0OiLwnZ2cIjtzOjE6IkgiO3M6NDoi8J2eliI7czoxOiJIIjtzOjM6IuKyjiI7czoxOiJIIjtzOjI6ItCdIjtzOjE6IkgiO3M6Mzoi4Y67IjtzOjE6IkgiO3M6Mzoi4ZW8IjtzOjE6IkgiO3M6Mzoi6pOnIjtzOjE6IkgiO3M6NDoi8JCLjyI7czoxOiJIIjtzOjI6IsubIjtzOjE6ImkiO3M6Mzoi4o2zIjtzOjE6ImkiO3M6Mzoi772JIjtzOjE6ImkiO3M6Mzoi4oWwIjtzOjE6ImkiO3M6Mzoi4oS5IjtzOjE6ImkiO3M6Mzoi4oWIIjtzOjE6ImkiO3M6NDoi8J2QoiI7czoxOiJpIjtzOjQ6IvCdkZYiO3M6MToiaSI7czo0OiLwnZKKIjtzOjE6ImkiO3M6NDoi8J2SviI7czoxOiJpIjtzOjQ6IvCdk7IiO3M6MToiaSI7czo0OiLwnZSmIjtzOjE6ImkiO3M6NDoi8J2VmiI7czoxOiJpIjtzOjQ6IvCdlo4iO3M6MToiaSI7czo0OiLwnZeCIjtzOjE6ImkiO3M6NDoi8J2XtiI7czoxOiJpIjtzOjQ6IvCdmKoiO3M6MToiaSI7czo0OiLwnZmeIjtzOjE6ImkiO3M6NDoi8J2akiI7czoxOiJpIjtzOjI6IsSxIjtzOjE6ImkiO3M6NDoi8J2apCI7czoxOiJpIjtzOjI6IsmqIjtzOjE6ImkiO3M6MjoiyakiO3M6MToiaSI7czoyOiLOuSI7czoxOiJpIjtzOjM6IuG+viI7czoxOiJpIjtzOjI6Is26IjtzOjE6ImkiO3M6NDoi8J2biiI7czoxOiJpIjtzOjQ6IvCdnIQiO3M6MToiaSI7czo0OiLwnZy+IjtzOjE6ImkiO3M6NDoi8J2duCI7czoxOiJpIjtzOjQ6IvCdnrIiO3M6MToiaSI7czoyOiLRliI7czoxOiJpIjtzOjM6IuqZhyI7czoxOiJpIjtzOjI6ItOPIjtzOjE6ImkiO3M6Mzoi6q21IjtzOjE6ImkiO3M6Mzoi4Y6lIjtzOjE6ImkiO3M6NDoi8JGjgyI7czoxOiJpIjtzOjI6IsOtIjtzOjE6ImkiO3M6Mzoi772KIjtzOjE6ImoiO3M6Mzoi4oWJIjtzOjE6ImoiO3M6NDoi8J2QoyI7czoxOiJqIjtzOjQ6IvCdkZciO3M6MToiaiI7czo0OiLwnZKLIjtzOjE6ImoiO3M6NDoi8J2SvyI7czoxOiJqIjtzOjQ6IvCdk7MiO3M6MToiaiI7czo0OiLwnZSnIjtzOjE6ImoiO3M6NDoi8J2VmyI7czoxOiJqIjtzOjQ6IvCdlo8iO3M6MToiaiI7czo0OiLwnZeDIjtzOjE6ImoiO3M6NDoi8J2XtyI7czoxOiJqIjtzOjQ6IvCdmKsiO3M6MToiaiI7czo0OiLwnZmfIjtzOjE6ImoiO3M6NDoi8J2akyI7czoxOiJqIjtzOjI6Is+zIjtzOjE6ImoiO3M6Mjoi0ZgiO3M6MToiaiI7czozOiLvvKoiO3M6MToiSiI7czo0OiLwnZCJIjtzOjE6IkoiO3M6NDoi8J2QvSI7czoxOiJKIjtzOjQ6IvCdkbEiO3M6MToiSiI7czo0OiLwnZKlIjtzOjE6IkoiO3M6NDoi8J2TmSI7czoxOiJKIjtzOjQ6IvCdlI0iO3M6MToiSiI7czo0OiLwnZWBIjtzOjE6IkoiO3M6NDoi8J2VtSI7czoxOiJKIjtzOjQ6IvCdlqkiO3M6MToiSiI7czo0OiLwnZedIjtzOjE6IkoiO3M6NDoi8J2YkSI7czoxOiJKIjtzOjQ6IvCdmYUiO3M6MToiSiI7czo0OiLwnZm5IjtzOjE6IkoiO3M6Mzoi6p6yIjtzOjE6IkoiO3M6Mjoizb8iO3M6MToiSiI7czoyOiLQiCI7czoxOiJKIjtzOjM6IuGOqyI7czoxOiJKIjtzOjM6IuGSjSI7czoxOiJKIjtzOjM6IuqTmSI7czoxOiJKIjtzOjQ6IvCdkKQiO3M6MToiayI7czo0OiLwnZGYIjtzOjE6ImsiO3M6NDoi8J2SjCI7czoxOiJrIjtzOjQ6IvCdk4AiO3M6MToiayI7czo0OiLwnZO0IjtzOjE6ImsiO3M6NDoi8J2UqCI7czoxOiJrIjtzOjQ6IvCdlZwiO3M6MToiayI7czo0OiLwnZaQIjtzOjE6ImsiO3M6NDoi8J2XhCI7czoxOiJrIjtzOjQ6IvCdl7giO3M6MToiayI7czo0OiLwnZisIjtzOjE6ImsiO3M6NDoi8J2ZoCI7czoxOiJrIjtzOjQ6IvCdmpQiO3M6MToiayI7czozOiLihKoiO3M6MToiSyI7czozOiLvvKsiO3M6MToiSyI7czo0OiLwnZCKIjtzOjE6IksiO3M6NDoi8J2QviI7czoxOiJLIjtzOjQ6IvCdkbIiO3M6MToiSyI7czo0OiLwnZKmIjtzOjE6IksiO3M6NDoi8J2TmiI7czoxOiJLIjtzOjQ6IvCdlI4iO3M6MToiSyI7czo0OiLwnZWCIjtzOjE6IksiO3M6NDoi8J2VtiI7czoxOiJLIjtzOjQ6IvCdlqoiO3M6MToiSyI7czo0OiLwnZeeIjtzOjE6IksiO3M6NDoi8J2YkiI7czoxOiJLIjtzOjQ6IvCdmYYiO3M6MToiSyI7czo0OiLwnZm6IjtzOjE6IksiO3M6MjoizpoiO3M6MToiSyI7czo0OiLwnZqxIjtzOjE6IksiO3M6NDoi8J2bqyI7czoxOiJLIjtzOjQ6IvCdnKUiO3M6MToiSyI7czo0OiLwnZ2fIjtzOjE6IksiO3M6NDoi8J2emSI7czoxOiJLIjtzOjM6IuKylCI7czoxOiJLIjtzOjI6ItCaIjtzOjE6IksiO3M6Mzoi4Y+mIjtzOjE6IksiO3M6Mzoi4ZuVIjtzOjE6IksiO3M6Mzoi6pOXIjtzOjE6IksiO3M6NDoi8JCUmCI7czoxOiJLIjtzOjI6IteAIjtzOjE6ImwiO3M6Mzoi4oijIjtzOjE6ImwiO3M6Mzoi4o+9IjtzOjE6ImwiO3M6Mzoi77+oIjtzOjE6ImwiO2k6MTtzOjE6ImwiO3M6Mjoi2aEiO3M6MToibCI7czoyOiLbsSI7czoxOiJsIjtzOjQ6IvCQjKAiO3M6MToibCI7czo0OiLwnqOHIjtzOjE6ImwiO3M6NDoi8J2fjyI7czoxOiJsIjtzOjQ6IvCdn5kiO3M6MToibCI7czo0OiLwnZ+jIjtzOjE6ImwiO3M6NDoi8J2frSI7czoxOiJsIjtzOjQ6IvCdn7ciO3M6MToibCI7czozOiLvvKkiO3M6MToibCI7czozOiLihaAiO3M6MToibCI7czozOiLihJAiO3M6MToibCI7czozOiLihJEiO3M6MToibCI7czo0OiLwnZCIIjtzOjE6ImwiO3M6NDoi8J2QvCI7czoxOiJsIjtzOjQ6IvCdkbAiO3M6MToibCI7czo0OiLwnZOYIjtzOjE6ImwiO3M6NDoi8J2VgCI7czoxOiJsIjtzOjQ6IvCdlbQiO3M6MToibCI7czo0OiLwnZaoIjtzOjE6ImwiO3M6NDoi8J2XnCI7czoxOiJsIjtzOjQ6IvCdmJAiO3M6MToibCI7czo0OiLwnZmEIjtzOjE6ImwiO3M6NDoi8J2ZuCI7czoxOiJsIjtzOjI6IsaWIjtzOjE6ImwiO3M6Mzoi772MIjtzOjE6ImwiO3M6Mzoi4oW8IjtzOjE6ImwiO3M6Mzoi4oSTIjtzOjE6ImwiO3M6NDoi8J2QpSI7czoxOiJsIjtzOjQ6IvCdkZkiO3M6MToibCI7czo0OiLwnZKNIjtzOjE6ImwiO3M6NDoi8J2TgSI7czoxOiJsIjtzOjQ6IvCdk7UiO3M6MToibCI7czo0OiLwnZSpIjtzOjE6ImwiO3M6NDoi8J2VnSI7czoxOiJsIjtzOjQ6IvCdlpEiO3M6MToibCI7czo0OiLwnZeFIjtzOjE6ImwiO3M6NDoi8J2XuSI7czoxOiJsIjtzOjQ6IvCdmK0iO3M6MToibCI7czo0OiLwnZmhIjtzOjE6ImwiO3M6NDoi8J2alSI7czoxOiJsIjtzOjI6IseAIjtzOjE6ImwiO3M6MjoizpkiO3M6MToibCI7czo0OiLwnZqwIjtzOjE6ImwiO3M6NDoi8J2bqiI7czoxOiJsIjtzOjQ6IvCdnKQiO3M6MToibCI7czo0OiLwnZ2eIjtzOjE6ImwiO3M6NDoi8J2emCI7czoxOiJsIjtzOjM6IuKykiI7czoxOiJsIjtzOjI6ItCGIjtzOjE6ImwiO3M6Mjoi04AiO3M6MToibCI7czoyOiLXlSI7czoxOiJsIjtzOjI6ItefIjtzOjE6ImwiO3M6Mjoi2KciO3M6MToibCI7czo0OiLwnriAIjtzOjE6ImwiO3M6NDoi8J66gCI7czoxOiJsIjtzOjM6Iu+6jiI7czoxOiJsIjtzOjM6Iu+6jSI7czoxOiJsIjtzOjI6It+KIjtzOjE6ImwiO3M6Mzoi4rWPIjtzOjE6ImwiO3M6Mzoi4ZuBIjtzOjE6ImwiO3M6Mzoi6pOyIjtzOjE6ImwiO3M6NDoi8Ja8qCI7czoxOiJsIjtzOjQ6IvCQiooiO3M6MToibCI7czo0OiLwkIyJIjtzOjE6ImwiO3M6NDoi8J2IqiI7czoxOiJMIjtzOjM6IuKFrCI7czoxOiJMIjtzOjM6IuKEkiI7czoxOiJMIjtzOjQ6IvCdkIsiO3M6MToiTCI7czo0OiLwnZC/IjtzOjE6IkwiO3M6NDoi8J2RsyI7czoxOiJMIjtzOjQ6IvCdk5siO3M6MToiTCI7czo0OiLwnZSPIjtzOjE6IkwiO3M6NDoi8J2VgyI7czoxOiJMIjtzOjQ6IvCdlbciO3M6MToiTCI7czo0OiLwnZarIjtzOjE6IkwiO3M6NDoi8J2XnyI7czoxOiJMIjtzOjQ6IvCdmJMiO3M6MToiTCI7czo0OiLwnZmHIjtzOjE6IkwiO3M6NDoi8J2ZuyI7czoxOiJMIjtzOjM6IuKzkCI7czoxOiJMIjtzOjM6IuGPniI7czoxOiJMIjtzOjM6IuGSqiI7czoxOiJMIjtzOjM6IuqToSI7czoxOiJMIjtzOjQ6IvCWvJYiO3M6MToiTCI7czo0OiLwkaKjIjtzOjE6IkwiO3M6NDoi8JGisiI7czoxOiJMIjtzOjQ6IvCQkJsiO3M6MToiTCI7czo0OiLwkJSmIjtzOjE6IkwiO3M6Mzoi77ytIjtzOjE6Ik0iO3M6Mzoi4oWvIjtzOjE6Ik0iO3M6Mzoi4oSzIjtzOjE6Ik0iO3M6NDoi8J2QjCI7czoxOiJNIjtzOjQ6IvCdkYAiO3M6MToiTSI7czo0OiLwnZG0IjtzOjE6Ik0iO3M6NDoi8J2TnCI7czoxOiJNIjtzOjQ6IvCdlJAiO3M6MToiTSI7czo0OiLwnZWEIjtzOjE6Ik0iO3M6NDoi8J2VuCI7czoxOiJNIjtzOjQ6IvCdlqwiO3M6MToiTSI7czo0OiLwnZegIjtzOjE6Ik0iO3M6NDoi8J2YlCI7czoxOiJNIjtzOjQ6IvCdmYgiO3M6MToiTSI7czo0OiLwnZm8IjtzOjE6Ik0iO3M6MjoizpwiO3M6MToiTSI7czo0OiLwnZqzIjtzOjE6Ik0iO3M6NDoi8J2brSI7czoxOiJNIjtzOjQ6IvCdnKciO3M6MToiTSI7czo0OiLwnZ2hIjtzOjE6Ik0iO3M6NDoi8J2emyI7czoxOiJNIjtzOjI6Is+6IjtzOjE6Ik0iO3M6Mzoi4rKYIjtzOjE6Ik0iO3M6Mjoi0JwiO3M6MToiTSI7czozOiLhjrciO3M6MToiTSI7czozOiLhl7AiO3M6MToiTSI7czozOiLhm5YiO3M6MToiTSI7czozOiLqk58iO3M6MToiTSI7czo0OiLwkIqwIjtzOjE6Ik0iO3M6NDoi8JCMkSI7czoxOiJNIjtzOjQ6IvCdkKciO3M6MToibiI7czo0OiLwnZGbIjtzOjE6Im4iO3M6NDoi8J2SjyI7czoxOiJuIjtzOjQ6IvCdk4MiO3M6MToibiI7czo0OiLwnZO3IjtzOjE6Im4iO3M6NDoi8J2UqyI7czoxOiJuIjtzOjQ6IvCdlZ8iO3M6MToibiI7czo0OiLwnZaTIjtzOjE6Im4iO3M6NDoi8J2XhyI7czoxOiJuIjtzOjQ6IvCdl7siO3M6MToibiI7czo0OiLwnZivIjtzOjE6Im4iO3M6NDoi8J2ZoyI7czoxOiJuIjtzOjQ6IvCdmpciO3M6MToibiI7czoyOiLVuCI7czoxOiJuIjtzOjI6ItW8IjtzOjE6Im4iO3M6Mzoi77yuIjtzOjE6Ik4iO3M6Mzoi4oSVIjtzOjE6Ik4iO3M6NDoi8J2QjSI7czoxOiJOIjtzOjQ6IvCdkYEiO3M6MToiTiI7czo0OiLwnZG1IjtzOjE6Ik4iO3M6NDoi8J2SqSI7czoxOiJOIjtzOjQ6IvCdk50iO3M6MToiTiI7czo0OiLwnZSRIjtzOjE6Ik4iO3M6NDoi8J2VuSI7czoxOiJOIjtzOjQ6IvCdlq0iO3M6MToiTiI7czo0OiLwnZehIjtzOjE6Ik4iO3M6NDoi8J2YlSI7czoxOiJOIjtzOjQ6IvCdmYkiO3M6MToiTiI7czo0OiLwnZm9IjtzOjE6Ik4iO3M6Mjoizp0iO3M6MToiTiI7czo0OiLwnZq0IjtzOjE6Ik4iO3M6NDoi8J2briI7czoxOiJOIjtzOjQ6IvCdnKgiO3M6MToiTiI7czo0OiLwnZ2iIjtzOjE6Ik4iO3M6NDoi8J2enCI7czoxOiJOIjtzOjM6IuKymiI7czoxOiJOIjtzOjM6IuqToCI7czoxOiJOIjtzOjQ6IvCQlJMiO3M6MToiTiI7czozOiLgsIIiO3M6MToibyI7czozOiLgsoIiO3M6MToibyI7czozOiLgtIIiO3M6MToibyI7czozOiLgtoIiO3M6MToibyI7czozOiLgpaYiO3M6MToibyI7czozOiLgqaYiO3M6MToibyI7czozOiLgq6YiO3M6MToibyI7czozOiLgr6YiO3M6MToibyI7czozOiLgsaYiO3M6MToibyI7czozOiLgs6YiO3M6MToibyI7czozOiLgtaYiO3M6MToibyI7czozOiLguZAiO3M6MToibyI7czozOiLgu5AiO3M6MToibyI7czozOiLhgYAiO3M6MToibyI7czoyOiLZpSI7czoxOiJvIjtzOjI6Itu1IjtzOjE6Im8iO3M6Mzoi772PIjtzOjE6Im8iO3M6Mzoi4oS0IjtzOjE6Im8iO3M6NDoi8J2QqCI7czoxOiJvIjtzOjQ6IvCdkZwiO3M6MToibyI7czo0OiLwnZKQIjtzOjE6Im8iO3M6NDoi8J2TuCI7czoxOiJvIjtzOjQ6IvCdlKwiO3M6MToibyI7czo0OiLwnZWgIjtzOjE6Im8iO3M6NDoi8J2WlCI7czoxOiJvIjtzOjQ6IvCdl4giO3M6MToibyI7czo0OiLwnZe8IjtzOjE6Im8iO3M6NDoi8J2YsCI7czoxOiJvIjtzOjQ6IvCdmaQiO3M6MToibyI7czo0OiLwnZqYIjtzOjE6Im8iO3M6Mzoi4bSPIjtzOjE6Im8iO3M6Mzoi4bSRIjtzOjE6Im8iO3M6Mzoi6qy9IjtzOjE6Im8iO3M6Mjoizr8iO3M6MToibyI7czo0OiLwnZuQIjtzOjE6Im8iO3M6NDoi8J2ciiI7czoxOiJvIjtzOjQ6IvCdnYQiO3M6MToibyI7czo0OiLwnZ2+IjtzOjE6Im8iO3M6NDoi8J2euCI7czoxOiJvIjtzOjI6Is+DIjtzOjE6Im8iO3M6NDoi8J2blCI7czoxOiJvIjtzOjQ6IvCdnI4iO3M6MToibyI7czo0OiLwnZ2IIjtzOjE6Im8iO3M6NDoi8J2egiI7czoxOiJvIjtzOjQ6IvCdnrwiO3M6MToibyI7czozOiLisp8iO3M6MToibyI7czoyOiLQviI7czoxOiJvIjtzOjM6IuGDvyI7czoxOiJvIjtzOjI6ItaFIjtzOjE6Im8iO3M6Mjoi16EiO3M6MToibyI7czoyOiLZhyI7czoxOiJvIjtzOjQ6IvCeuKQiO3M6MToibyI7czo0OiLwnrmkIjtzOjE6Im8iO3M6NDoi8J66hCI7czoxOiJvIjtzOjM6Iu+7qyI7czoxOiJvIjtzOjM6Iu+7rCI7czoxOiJvIjtzOjM6Iu+7qiI7czoxOiJvIjtzOjM6Iu+7qSI7czoxOiJvIjtzOjI6Itq+IjtzOjE6Im8iO3M6Mzoi766sIjtzOjE6Im8iO3M6Mzoi766tIjtzOjE6Im8iO3M6Mzoi766rIjtzOjE6Im8iO3M6Mzoi766qIjtzOjE6Im8iO3M6Mjoi24EiO3M6MToibyI7czozOiLvrqgiO3M6MToibyI7czozOiLvrqkiO3M6MToibyI7czozOiLvrqciO3M6MToibyI7czozOiLvrqYiO3M6MToibyI7czoyOiLblSI7czoxOiJvIjtzOjM6IuC0oCI7czoxOiJvIjtzOjM6IuGAnSI7czoxOiJvIjtzOjQ6IvCQk6oiO3M6MToibyI7czo0OiLwkaOIIjtzOjE6Im8iO3M6NDoi8JGjlyI7czoxOiJvIjtzOjQ6IvCQkKwiO3M6MToibyI7aTowO3M6MToiTyI7czoyOiLfgCI7czoxOiJPIjtzOjM6IuCnpiI7czoxOiJPIjtzOjM6IuCtpiI7czoxOiJPIjtzOjM6IuOAhyI7czoxOiJPIjtzOjQ6IvCRk5AiO3M6MToiTyI7czo0OiLwkaOgIjtzOjE6Ik8iO3M6NDoi8J2fjiI7czoxOiJPIjtzOjQ6IvCdn5giO3M6MToiTyI7czo0OiLwnZ+iIjtzOjE6Ik8iO3M6NDoi8J2frCI7czoxOiJPIjtzOjQ6IvCdn7YiO3M6MToiTyI7czozOiLvvK8iO3M6MToiTyI7czo0OiLwnZCOIjtzOjE6Ik8iO3M6NDoi8J2RgiI7czoxOiJPIjtzOjQ6IvCdkbYiO3M6MToiTyI7czo0OiLwnZKqIjtzOjE6Ik8iO3M6NDoi8J2TniI7czoxOiJPIjtzOjQ6IvCdlJIiO3M6MToiTyI7czo0OiLwnZWGIjtzOjE6Ik8iO3M6NDoi8J2VuiI7czoxOiJPIjtzOjQ6IvCdlq4iO3M6MToiTyI7czo0OiLwnZeiIjtzOjE6Ik8iO3M6NDoi8J2YliI7czoxOiJPIjtzOjQ6IvCdmYoiO3M6MToiTyI7czo0OiLwnZm+IjtzOjE6Ik8iO3M6Mjoizp8iO3M6MToiTyI7czo0OiLwnZq2IjtzOjE6Ik8iO3M6NDoi8J2bsCI7czoxOiJPIjtzOjQ6IvCdnKoiO3M6MToiTyI7czo0OiLwnZ2kIjtzOjE6Ik8iO3M6NDoi8J2eniI7czoxOiJPIjtzOjM6IuKyniI7czoxOiJPIjtzOjI6ItCeIjtzOjE6Ik8iO3M6Mjoi1ZUiO3M6MToiTyI7czozOiLitZQiO3M6MToiTyI7czozOiLhi5AiO3M6MToiTyI7czozOiLgrKAiO3M6MToiTyI7czo0OiLwkJOCIjtzOjE6Ik8iO3M6Mzoi6pOzIjtzOjE6Ik8iO3M6NDoi8JGitSI7czoxOiJPIjtzOjQ6IvCQipIiO3M6MToiTyI7czo0OiLwkIqrIjtzOjE6Ik8iO3M6NDoi8JCQhCI7czoxOiJPIjtzOjQ6IvCQlJYiO3M6MToiTyI7czozOiLigbAiO3M6MToiuiI7czozOiLhtZIiO3M6MToiuiI7czoyOiLFkCI7czoxOiLWIjtzOjM6IuKNtCI7czoxOiJwIjtzOjM6Iu+9kCI7czoxOiJwIjtzOjQ6IvCdkKkiO3M6MToicCI7czo0OiLwnZGdIjtzOjE6InAiO3M6NDoi8J2SkSI7czoxOiJwIjtzOjQ6IvCdk4UiO3M6MToicCI7czo0OiLwnZO5IjtzOjE6InAiO3M6NDoi8J2UrSI7czoxOiJwIjtzOjQ6IvCdlaEiO3M6MToicCI7czo0OiLwnZaVIjtzOjE6InAiO3M6NDoi8J2XiSI7czoxOiJwIjtzOjQ6IvCdl70iO3M6MToicCI7czo0OiLwnZixIjtzOjE6InAiO3M6NDoi8J2ZpSI7czoxOiJwIjtzOjQ6IvCdmpkiO3M6MToicCI7czoyOiLPgSI7czoxOiJwIjtzOjI6Is+xIjtzOjE6InAiO3M6NDoi8J2bkiI7czoxOiJwIjtzOjQ6IvCdm6AiO3M6MToicCI7czo0OiLwnZyMIjtzOjE6InAiO3M6NDoi8J2cmiI7czoxOiJwIjtzOjQ6IvCdnYYiO3M6MToicCI7czo0OiLwnZ2UIjtzOjE6InAiO3M6NDoi8J2egCI7czoxOiJwIjtzOjQ6IvCdno4iO3M6MToicCI7czo0OiLwnZ66IjtzOjE6InAiO3M6NDoi8J2fiCI7czoxOiJwIjtzOjM6IuKyoyI7czoxOiJwIjtzOjI6ItGAIjtzOjE6InAiO3M6Mzoi77ywIjtzOjE6IlAiO3M6Mzoi4oSZIjtzOjE6IlAiO3M6NDoi8J2QjyI7czoxOiJQIjtzOjQ6IvCdkYMiO3M6MToiUCI7czo0OiLwnZG3IjtzOjE6IlAiO3M6NDoi8J2SqyI7czoxOiJQIjtzOjQ6IvCdk58iO3M6MToiUCI7czo0OiLwnZSTIjtzOjE6IlAiO3M6NDoi8J2VuyI7czoxOiJQIjtzOjQ6IvCdlq8iO3M6MToiUCI7czo0OiLwnZejIjtzOjE6IlAiO3M6NDoi8J2YlyI7czoxOiJQIjtzOjQ6IvCdmYsiO3M6MToiUCI7czo0OiLwnZm/IjtzOjE6IlAiO3M6MjoizqEiO3M6MToiUCI7czo0OiLwnZq4IjtzOjE6IlAiO3M6NDoi8J2bsiI7czoxOiJQIjtzOjQ6IvCdnKwiO3M6MToiUCI7czo0OiLwnZ2mIjtzOjE6IlAiO3M6NDoi8J2eoCI7czoxOiJQIjtzOjM6IuKyoiI7czoxOiJQIjtzOjI6ItCgIjtzOjE6IlAiO3M6Mzoi4Y+iIjtzOjE6IlAiO3M6Mzoi4ZGtIjtzOjE6IlAiO3M6Mzoi6pORIjtzOjE6IlAiO3M6NDoi8JCKlSI7czoxOiJQIjtzOjQ6IvCdkKoiO3M6MToicSI7czo0OiLwnZGeIjtzOjE6InEiO3M6NDoi8J2SkiI7czoxOiJxIjtzOjQ6IvCdk4YiO3M6MToicSI7czo0OiLwnZO6IjtzOjE6InEiO3M6NDoi8J2UriI7czoxOiJxIjtzOjQ6IvCdlaIiO3M6MToicSI7czo0OiLwnZaWIjtzOjE6InEiO3M6NDoi8J2XiiI7czoxOiJxIjtzOjQ6IvCdl74iO3M6MToicSI7czo0OiLwnZiyIjtzOjE6InEiO3M6NDoi8J2ZpiI7czoxOiJxIjtzOjQ6IvCdmpoiO3M6MToicSI7czoyOiLUmyI7czoxOiJxIjtzOjI6ItWjIjtzOjE6InEiO3M6Mjoi1aYiO3M6MToicSI7czozOiLihJoiO3M6MToiUSI7czo0OiLwnZCQIjtzOjE6IlEiO3M6NDoi8J2RhCI7czoxOiJRIjtzOjQ6IvCdkbgiO3M6MToiUSI7czo0OiLwnZKsIjtzOjE6IlEiO3M6NDoi8J2ToCI7czoxOiJRIjtzOjQ6IvCdlJQiO3M6MToiUSI7czo0OiLwnZW8IjtzOjE6IlEiO3M6NDoi8J2WsCI7czoxOiJRIjtzOjQ6IvCdl6QiO3M6MToiUSI7czo0OiLwnZiYIjtzOjE6IlEiO3M6NDoi8J2ZjCI7czoxOiJRIjtzOjQ6IvCdmoAiO3M6MToiUSI7czozOiLitZUiO3M6MToiUSI7czo0OiLwnZCrIjtzOjE6InIiO3M6NDoi8J2RnyI7czoxOiJyIjtzOjQ6IvCdkpMiO3M6MToiciI7czo0OiLwnZOHIjtzOjE6InIiO3M6NDoi8J2TuyI7czoxOiJyIjtzOjQ6IvCdlK8iO3M6MToiciI7czo0OiLwnZWjIjtzOjE6InIiO3M6NDoi8J2WlyI7czoxOiJyIjtzOjQ6IvCdl4siO3M6MToiciI7czo0OiLwnZe/IjtzOjE6InIiO3M6NDoi8J2YsyI7czoxOiJyIjtzOjQ6IvCdmaciO3M6MToiciI7czo0OiLwnZqbIjtzOjE6InIiO3M6Mzoi6q2HIjtzOjE6InIiO3M6Mzoi6q2IIjtzOjE6InIiO3M6Mzoi4bSmIjtzOjE6InIiO3M6Mzoi4rKFIjtzOjE6InIiO3M6Mjoi0LMiO3M6MToiciI7czozOiLqroEiO3M6MToiciI7czo0OiLwnYiWIjtzOjE6IlIiO3M6Mzoi4oSbIjtzOjE6IlIiO3M6Mzoi4oScIjtzOjE6IlIiO3M6Mzoi4oSdIjtzOjE6IlIiO3M6NDoi8J2QkSI7czoxOiJSIjtzOjQ6IvCdkYUiO3M6MToiUiI7czo0OiLwnZG5IjtzOjE6IlIiO3M6NDoi8J2ToSI7czoxOiJSIjtzOjQ6IvCdlb0iO3M6MToiUiI7czo0OiLwnZaxIjtzOjE6IlIiO3M6NDoi8J2XpSI7czoxOiJSIjtzOjQ6IvCdmJkiO3M6MToiUiI7czo0OiLwnZmNIjtzOjE6IlIiO3M6NDoi8J2agSI7czoxOiJSIjtzOjI6IsamIjtzOjE6IlIiO3M6Mzoi4Y6hIjtzOjE6IlIiO3M6Mzoi4Y+SIjtzOjE6IlIiO3M6NDoi8JCStCI7czoxOiJSIjtzOjM6IuGWhyI7czoxOiJSIjtzOjM6IuqToyI7czoxOiJSIjtzOjQ6IvCWvLUiO3M6MToiUiI7czozOiLvvZMiO3M6MToicyI7czo0OiLwnZCsIjtzOjE6InMiO3M6NDoi8J2RoCI7czoxOiJzIjtzOjQ6IvCdkpQiO3M6MToicyI7czo0OiLwnZOIIjtzOjE6InMiO3M6NDoi8J2TvCI7czoxOiJzIjtzOjQ6IvCdlLAiO3M6MToicyI7czo0OiLwnZWkIjtzOjE6InMiO3M6NDoi8J2WmCI7czoxOiJzIjtzOjQ6IvCdl4wiO3M6MToicyI7czo0OiLwnZiAIjtzOjE6InMiO3M6NDoi8J2YtCI7czoxOiJzIjtzOjQ6IvCdmagiO3M6MToicyI7czo0OiLwnZqcIjtzOjE6InMiO3M6Mzoi6pyxIjtzOjE6InMiO3M6Mjoixr0iO3M6MToicyI7czoyOiLRlSI7czoxOiJzIjtzOjM6IuquqiI7czoxOiJzIjtzOjQ6IvCRo4EiO3M6MToicyI7czo0OiLwkJGIIjtzOjE6InMiO3M6Mzoi77yzIjtzOjE6IlMiO3M6NDoi8J2QkiI7czoxOiJTIjtzOjQ6IvCdkYYiO3M6MToiUyI7czo0OiLwnZG6IjtzOjE6IlMiO3M6NDoi8J2SriI7czoxOiJTIjtzOjQ6IvCdk6IiO3M6MToiUyI7czo0OiLwnZSWIjtzOjE6IlMiO3M6NDoi8J2ViiI7czoxOiJTIjtzOjQ6IvCdlb4iO3M6MToiUyI7czo0OiLwnZayIjtzOjE6IlMiO3M6NDoi8J2XpiI7czoxOiJTIjtzOjQ6IvCdmJoiO3M6MToiUyI7czo0OiLwnZmOIjtzOjE6IlMiO3M6NDoi8J2agiI7czoxOiJTIjtzOjI6ItCFIjtzOjE6IlMiO3M6Mjoi1Y8iO3M6MToiUyI7czozOiLhj5UiO3M6MToiUyI7czozOiLhj5oiO3M6MToiUyI7czozOiLqk6IiO3M6MToiUyI7czo0OiLwlry6IjtzOjE6IlMiO3M6NDoi8JCKliI7czoxOiJTIjtzOjQ6IvCQkKAiO3M6MToiUyI7czozOiLqnrUiO3M6MToi3yI7czoyOiLOsiI7czoxOiLfIjtzOjI6Is+QIjtzOjE6It8iO3M6NDoi8J2bgyI7czoxOiLfIjtzOjQ6IvCdm70iO3M6MToi3yI7czo0OiLwnZy3IjtzOjE6It8iO3M6NDoi8J2dsSI7czoxOiLfIjtzOjQ6IvCdnqsiO3M6MToi3yI7czozOiLhj7AiO3M6MToi3yI7czo0OiLwnZCtIjtzOjE6InQiO3M6NDoi8J2RoSI7czoxOiJ0IjtzOjQ6IvCdkpUiO3M6MToidCI7czo0OiLwnZOJIjtzOjE6InQiO3M6NDoi8J2TvSI7czoxOiJ0IjtzOjQ6IvCdlLEiO3M6MToidCI7czo0OiLwnZWlIjtzOjE6InQiO3M6NDoi8J2WmSI7czoxOiJ0IjtzOjQ6IvCdl40iO3M6MToidCI7czo0OiLwnZiBIjtzOjE6InQiO3M6NDoi8J2YtSI7czoxOiJ0IjtzOjQ6IvCdmakiO3M6MToidCI7czo0OiLwnZqdIjtzOjE6InQiO3M6Mzoi4oqkIjtzOjE6IlQiO3M6Mzoi4p+ZIjtzOjE6IlQiO3M6NDoi8J+dqCI7czoxOiJUIjtzOjM6Iu+8tCI7czoxOiJUIjtzOjQ6IvCdkJMiO3M6MToiVCI7czo0OiLwnZGHIjtzOjE6IlQiO3M6NDoi8J2RuyI7czoxOiJUIjtzOjQ6IvCdkq8iO3M6MToiVCI7czo0OiLwnZOjIjtzOjE6IlQiO3M6NDoi8J2UlyI7czoxOiJUIjtzOjQ6IvCdlYsiO3M6MToiVCI7czo0OiLwnZW/IjtzOjE6IlQiO3M6NDoi8J2WsyI7czoxOiJUIjtzOjQ6IvCdl6ciO3M6MToiVCI7czo0OiLwnZibIjtzOjE6IlQiO3M6NDoi8J2ZjyI7czoxOiJUIjtzOjQ6IvCdmoMiO3M6MToiVCI7czoyOiLOpCI7czoxOiJUIjtzOjQ6IvCdmrsiO3M6MToiVCI7czo0OiLwnZu1IjtzOjE6IlQiO3M6NDoi8J2cryI7czoxOiJUIjtzOjQ6IvCdnakiO3M6MToiVCI7czo0OiLwnZ6jIjtzOjE6IlQiO3M6Mzoi4rKmIjtzOjE6IlQiO3M6Mjoi0KIiO3M6MToiVCI7czozOiLhjqIiO3M6MToiVCI7czozOiLqk5QiO3M6MToiVCI7czo0OiLwlryKIjtzOjE6IlQiO3M6NDoi8JGivCI7czoxOiJUIjtzOjQ6IvCQipciO3M6MToiVCI7czo0OiLwkIqxIjtzOjE6IlQiO3M6NDoi8JCMlSI7czoxOiJUIjtzOjQ6IvCdkK4iO3M6MToidSI7czo0OiLwnZGiIjtzOjE6InUiO3M6NDoi8J2SliI7czoxOiJ1IjtzOjQ6IvCdk4oiO3M6MToidSI7czo0OiLwnZO+IjtzOjE6InUiO3M6NDoi8J2UsiI7czoxOiJ1IjtzOjQ6IvCdlaYiO3M6MToidSI7czo0OiLwnZaaIjtzOjE6InUiO3M6NDoi8J2XjiI7czoxOiJ1IjtzOjQ6IvCdmIIiO3M6MToidSI7czo0OiLwnZi2IjtzOjE6InUiO3M6NDoi8J2ZqiI7czoxOiJ1IjtzOjQ6IvCdmp4iO3M6MToidSI7czozOiLqnp8iO3M6MToidSI7czozOiLhtJwiO3M6MToidSI7czozOiLqrY4iO3M6MToidSI7czozOiLqrZIiO3M6MToidSI7czoyOiLKiyI7czoxOiJ1IjtzOjI6Is+FIjtzOjE6InUiO3M6NDoi8J2bliI7czoxOiJ1IjtzOjQ6IvCdnJAiO3M6MToidSI7czo0OiLwnZ2KIjtzOjE6InUiO3M6NDoi8J2ehCI7czoxOiJ1IjtzOjQ6IvCdnr4iO3M6MToidSI7czoyOiLVvSI7czoxOiJ1IjtzOjQ6IvCQk7YiO3M6MToidSI7czo0OiLwkaOYIjtzOjE6InUiO3M6Mzoi4oiqIjtzOjE6IlUiO3M6Mzoi4ouDIjtzOjE6IlUiO3M6NDoi8J2QlCI7czoxOiJVIjtzOjQ6IvCdkYgiO3M6MToiVSI7czo0OiLwnZG8IjtzOjE6IlUiO3M6NDoi8J2SsCI7czoxOiJVIjtzOjQ6IvCdk6QiO3M6MToiVSI7czo0OiLwnZSYIjtzOjE6IlUiO3M6NDoi8J2VjCI7czoxOiJVIjtzOjQ6IvCdloAiO3M6MToiVSI7czo0OiLwnZa0IjtzOjE6IlUiO3M6NDoi8J2XqCI7czoxOiJVIjtzOjQ6IvCdmJwiO3M6MToiVSI7czo0OiLwnZmQIjtzOjE6IlUiO3M6NDoi8J2ahCI7czoxOiJVIjtzOjI6ItWNIjtzOjE6IlUiO3M6Mzoi4YiAIjtzOjE6IlUiO3M6NDoi8JCTjiI7czoxOiJVIjtzOjM6IuGRjCI7czoxOiJVIjtzOjM6IuqTtCI7czoxOiJVIjtzOjQ6IvCWvYIiO3M6MToiVSI7czo0OiLwkaK4IjtzOjE6IlUiO3M6Mzoi4oioIjtzOjE6InYiO3M6Mzoi4ouBIjtzOjE6InYiO3M6Mzoi772WIjtzOjE6InYiO3M6Mzoi4oW0IjtzOjE6InYiO3M6NDoi8J2QryI7czoxOiJ2IjtzOjQ6IvCdkaMiO3M6MToidiI7czo0OiLwnZKXIjtzOjE6InYiO3M6NDoi8J2TiyI7czoxOiJ2IjtzOjQ6IvCdk78iO3M6MToidiI7czo0OiLwnZSzIjtzOjE6InYiO3M6NDoi8J2VpyI7czoxOiJ2IjtzOjQ6IvCdlpsiO3M6MToidiI7czo0OiLwnZePIjtzOjE6InYiO3M6NDoi8J2YgyI7czoxOiJ2IjtzOjQ6IvCdmLciO3M6MToidiI7czo0OiLwnZmrIjtzOjE6InYiO3M6NDoi8J2anyI7czoxOiJ2IjtzOjM6IuG0oCI7czoxOiJ2IjtzOjI6Is69IjtzOjE6InYiO3M6NDoi8J2bjiI7czoxOiJ2IjtzOjQ6IvCdnIgiO3M6MToidiI7czo0OiLwnZ2CIjtzOjE6InYiO3M6NDoi8J2dvCI7czoxOiJ2IjtzOjQ6IvCdnrYiO3M6MToidiI7czoyOiLRtSI7czoxOiJ2IjtzOjI6IteYIjtzOjE6InYiO3M6NDoi8JGchiI7czoxOiJ2IjtzOjM6IuquqSI7czoxOiJ2IjtzOjQ6IvCRo4AiO3M6MToidiI7czo0OiLwnYiNIjtzOjE6IlYiO3M6Mjoi2aciO3M6MToiViI7czoyOiLbtyI7czoxOiJWIjtzOjM6IuKFpCI7czoxOiJWIjtzOjQ6IvCdkJUiO3M6MToiViI7czo0OiLwnZGJIjtzOjE6IlYiO3M6NDoi8J2RvSI7czoxOiJWIjtzOjQ6IvCdkrEiO3M6MToiViI7czo0OiLwnZOlIjtzOjE6IlYiO3M6NDoi8J2UmSI7czoxOiJWIjtzOjQ6IvCdlY0iO3M6MToiViI7czo0OiLwnZaBIjtzOjE6IlYiO3M6NDoi8J2WtSI7czoxOiJWIjtzOjQ6IvCdl6kiO3M6MToiViI7czo0OiLwnZidIjtzOjE6IlYiO3M6NDoi8J2ZkSI7czoxOiJWIjtzOjQ6IvCdmoUiO3M6MToiViI7czoyOiLRtCI7czoxOiJWIjtzOjM6IuK0uCI7czoxOiJWIjtzOjM6IuGPmSI7czoxOiJWIjtzOjM6IuGQryI7czoxOiJWIjtzOjM6IuqbnyI7czoxOiJWIjtzOjM6IuqTpiI7czoxOiJWIjtzOjQ6IvCWvIgiO3M6MToiViI7czo0OiLwkaKgIjtzOjE6IlYiO3M6NDoi8JCUnSI7czoxOiJWIjtzOjI6IsmvIjtzOjE6InciO3M6NDoi8J2QsCI7czoxOiJ3IjtzOjQ6IvCdkaQiO3M6MToidyI7czo0OiLwnZKYIjtzOjE6InciO3M6NDoi8J2TjCI7czoxOiJ3IjtzOjQ6IvCdlIAiO3M6MToidyI7czo0OiLwnZS0IjtzOjE6InciO3M6NDoi8J2VqCI7czoxOiJ3IjtzOjQ6IvCdlpwiO3M6MToidyI7czo0OiLwnZeQIjtzOjE6InciO3M6NDoi8J2YhCI7czoxOiJ3IjtzOjQ6IvCdmLgiO3M6MToidyI7czo0OiLwnZmsIjtzOjE6InciO3M6NDoi8J2aoCI7czoxOiJ3IjtzOjM6IuG0oSI7czoxOiJ3IjtzOjI6ItGhIjtzOjE6InciO3M6Mjoi1J0iO3M6MToidyI7czoyOiLVoSI7czoxOiJ3IjtzOjQ6IvCRnIoiO3M6MToidyI7czo0OiLwkZyOIjtzOjE6InciO3M6NDoi8JGcjyI7czoxOiJ3IjtzOjM6IuqugyI7czoxOiJ3IjtzOjQ6IvCRo68iO3M6MToiVyI7czo0OiLwkaOmIjtzOjE6IlciO3M6NDoi8J2QliI7czoxOiJXIjtzOjQ6IvCdkYoiO3M6MToiVyI7czo0OiLwnZG+IjtzOjE6IlciO3M6NDoi8J2SsiI7czoxOiJXIjtzOjQ6IvCdk6YiO3M6MToiVyI7czo0OiLwnZSaIjtzOjE6IlciO3M6NDoi8J2VjiI7czoxOiJXIjtzOjQ6IvCdloIiO3M6MToiVyI7czo0OiLwnZa2IjtzOjE6IlciO3M6NDoi8J2XqiI7czoxOiJXIjtzOjQ6IvCdmJ4iO3M6MToiVyI7czo0OiLwnZmSIjtzOjE6IlciO3M6NDoi8J2ahiI7czoxOiJXIjtzOjI6ItScIjtzOjE6IlciO3M6Mzoi4Y6zIjtzOjE6IlciO3M6Mzoi4Y+UIjtzOjE6IlciO3M6Mzoi6pOqIjtzOjE6IlciO3M6Mzoi4ZmuIjtzOjE6IngiO3M6Mjoiw5ciO3M6MToieCI7czozOiLipKsiO3M6MToieCI7czozOiLipKwiO3M6MToieCI7czozOiLiqK8iO3M6MToieCI7czozOiLvvZgiO3M6MToieCI7czozOiLihbkiO3M6MToieCI7czo0OiLwnZCxIjtzOjE6IngiO3M6NDoi8J2RpSI7czoxOiJ4IjtzOjQ6IvCdkpkiO3M6MToieCI7czo0OiLwnZONIjtzOjE6IngiO3M6NDoi8J2UgSI7czoxOiJ4IjtzOjQ6IvCdlLUiO3M6MToieCI7czo0OiLwnZWpIjtzOjE6IngiO3M6NDoi8J2WnSI7czoxOiJ4IjtzOjQ6IvCdl5EiO3M6MToieCI7czo0OiLwnZiFIjtzOjE6IngiO3M6NDoi8J2YuSI7czoxOiJ4IjtzOjQ6IvCdma0iO3M6MToieCI7czo0OiLwnZqhIjtzOjE6IngiO3M6Mjoi0YUiO3M6MToieCI7czozOiLhlYEiO3M6MToieCI7czozOiLhlb0iO3M6MToieCI7czozOiLhma0iO3M6MToiWCI7czozOiLilbMiO3M6MToiWCI7czo0OiLwkIyiIjtzOjE6IlgiO3M6NDoi8JGjrCI7czoxOiJYIjtzOjM6Iu+8uCI7czoxOiJYIjtzOjM6IuKFqSI7czoxOiJYIjtzOjQ6IvCdkJciO3M6MToiWCI7czo0OiLwnZGLIjtzOjE6IlgiO3M6NDoi8J2RvyI7czoxOiJYIjtzOjQ6IvCdkrMiO3M6MToiWCI7czo0OiLwnZOnIjtzOjE6IlgiO3M6NDoi8J2UmyI7czoxOiJYIjtzOjQ6IvCdlY8iO3M6MToiWCI7czo0OiLwnZaDIjtzOjE6IlgiO3M6NDoi8J2WtyI7czoxOiJYIjtzOjQ6IvCdl6siO3M6MToiWCI7czo0OiLwnZifIjtzOjE6IlgiO3M6NDoi8J2ZkyI7czoxOiJYIjtzOjQ6IvCdmociO3M6MToiWCI7czozOiLqnrMiO3M6MToiWCI7czoyOiLOpyI7czoxOiJYIjtzOjQ6IvCdmr4iO3M6MToiWCI7czo0OiLwnZu4IjtzOjE6IlgiO3M6NDoi8J2csiI7czoxOiJYIjtzOjQ6IvCdnawiO3M6MToiWCI7czo0OiLwnZ6mIjtzOjE6IlgiO3M6Mzoi4rKsIjtzOjE6IlgiO3M6Mjoi0KUiO3M6MToiWCI7czozOiLitZ0iO3M6MToiWCI7czozOiLhmrciO3M6MToiWCI7czozOiLqk6siO3M6MToiWCI7czo0OiLwkIqQIjtzOjE6IlgiO3M6NDoi8JCKtCI7czoxOiJYIjtzOjQ6IvCQjJciO3M6MToiWCI7czo0OiLwkJSnIjtzOjE6IlgiO3M6MjoiyaMiO3M6MToieSI7czozOiLhtowiO3M6MToieSI7czozOiLvvZkiO3M6MToieSI7czo0OiLwnZCyIjtzOjE6InkiO3M6NDoi8J2RpiI7czoxOiJ5IjtzOjQ6IvCdkpoiO3M6MToieSI7czo0OiLwnZOOIjtzOjE6InkiO3M6NDoi8J2UgiI7czoxOiJ5IjtzOjQ6IvCdlLYiO3M6MToieSI7czo0OiLwnZWqIjtzOjE6InkiO3M6NDoi8J2WniI7czoxOiJ5IjtzOjQ6IvCdl5IiO3M6MToieSI7czo0OiLwnZiGIjtzOjE6InkiO3M6NDoi8J2YuiI7czoxOiJ5IjtzOjQ6IvCdma4iO3M6MToieSI7czo0OiLwnZqiIjtzOjE6InkiO3M6Mjoiyo8iO3M6MToieSI7czozOiLhu78iO3M6MToieSI7czozOiLqrZoiO3M6MToieSI7czoyOiLOsyI7czoxOiJ5IjtzOjM6IuKEvSI7czoxOiJ5IjtzOjQ6IvCdm4QiO3M6MToieSI7czo0OiLwnZu+IjtzOjE6InkiO3M6NDoi8J2cuCI7czoxOiJ5IjtzOjQ6IvCdnbIiO3M6MToieSI7czo0OiLwnZ6sIjtzOjE6InkiO3M6Mjoi0YMiO3M6MToieSI7czoyOiLSryI7czoxOiJ5IjtzOjM6IuGDpyI7czoxOiJ5IjtzOjQ6IvCRo5wiO3M6MToieSI7czozOiLvvLkiO3M6MToiWSI7czo0OiLwnZCYIjtzOjE6IlkiO3M6NDoi8J2RjCI7czoxOiJZIjtzOjQ6IvCdkoAiO3M6MToiWSI7czo0OiLwnZK0IjtzOjE6IlkiO3M6NDoi8J2TqCI7czoxOiJZIjtzOjQ6IvCdlJwiO3M6MToiWSI7czo0OiLwnZWQIjtzOjE6IlkiO3M6NDoi8J2WhCI7czoxOiJZIjtzOjQ6IvCdlrgiO3M6MToiWSI7czo0OiLwnZesIjtzOjE6IlkiO3M6NDoi8J2YoCI7czoxOiJZIjtzOjQ6IvCdmZQiO3M6MToiWSI7czo0OiLwnZqIIjtzOjE6IlkiO3M6MjoizqUiO3M6MToiWSI7czoyOiLPkiI7czoxOiJZIjtzOjQ6IvCdmrwiO3M6MToiWSI7czo0OiLwnZu2IjtzOjE6IlkiO3M6NDoi8J2csCI7czoxOiJZIjtzOjQ6IvCdnaoiO3M6MToiWSI7czo0OiLwnZ6kIjtzOjE6IlkiO3M6Mzoi4rKoIjtzOjE6IlkiO3M6Mjoi0KMiO3M6MToiWSI7czoyOiLSriI7czoxOiJZIjtzOjM6IuGOqSI7czoxOiJZIjtzOjM6IuGOvSI7czoxOiJZIjtzOjM6IuqTrCI7czoxOiJZIjtzOjQ6IvCWvYMiO3M6MToiWSI7czo0OiLwkaKkIjtzOjE6IlkiO3M6NDoi8JCKsiI7czoxOiJZIjtzOjQ6IvCdkLMiO3M6MToieiI7czo0OiLwnZGnIjtzOjE6InoiO3M6NDoi8J2SmyI7czoxOiJ6IjtzOjQ6IvCdk48iO3M6MToieiI7czo0OiLwnZSDIjtzOjE6InoiO3M6NDoi8J2UtyI7czoxOiJ6IjtzOjQ6IvCdlasiO3M6MToieiI7czo0OiLwnZafIjtzOjE6InoiO3M6NDoi8J2XkyI7czoxOiJ6IjtzOjQ6IvCdmIciO3M6MToieiI7czo0OiLwnZi7IjtzOjE6InoiO3M6NDoi8J2ZryI7czoxOiJ6IjtzOjQ6IvCdmqMiO3M6MToieiI7czozOiLhtKIiO3M6MToieiI7czozOiLqrpMiO3M6MToieiI7czo0OiLwkaOEIjtzOjE6InoiO3M6NDoi8JCLtSI7czoxOiJaIjtzOjQ6IvCRo6UiO3M6MToiWiI7czozOiLvvLoiO3M6MToiWiI7czozOiLihKQiO3M6MToiWiI7czozOiLihKgiO3M6MToiWiI7czo0OiLwnZCZIjtzOjE6IloiO3M6NDoi8J2RjSI7czoxOiJaIjtzOjQ6IvCdkoEiO3M6MToiWiI7czo0OiLwnZK1IjtzOjE6IloiO3M6NDoi8J2TqSI7czoxOiJaIjtzOjQ6IvCdloUiO3M6MToiWiI7czo0OiLwnZa5IjtzOjE6IloiO3M6NDoi8J2XrSI7czoxOiJaIjtzOjQ6IvCdmKEiO3M6MToiWiI7czo0OiLwnZmVIjtzOjE6IloiO3M6NDoi8J2aiSI7czoxOiJaIjtzOjI6Is6WIjtzOjE6IloiO3M6NDoi8J2arSI7czoxOiJaIjtzOjQ6IvCdm6ciO3M6MToiWiI7czo0OiLwnZyhIjtzOjE6IloiO3M6NDoi8J2dmyI7czoxOiJaIjtzOjQ6IvCdnpUiO3M6MToiWiI7czozOiLhj4MiO3M6MToiWiI7czozOiLqk5wiO3M6MToiWiI7czo0OiLwkaKpIjtzOjE6IloiO3M6Mjoixr8iO3M6MToi/iI7czoyOiLPuCI7czoxOiL+IjtzOjI6Is+3IjtzOjE6It4iO3M6NDoi8JCThCI7czoxOiLeIjt9";

    private static function need_skip($string, $i)
    {
        $chars = " @\r\n\t";
        if (isset($string[$i]) && strpos($chars, $string[$i]) !== false) {
            $i++;
            return $i;
        }
        return false;
    }

    private static function match_shortopen_tag($string, $i, $needle, $j)
    {
        $pos_needle = false;
        $pos_string = false;
        if ((isset($needle[$j - 2]) && isset($string[$i - 2]))
            && (($needle[$j - 2] == '<') && ($string[$i - 2] == '<'))
            && (isset($needle[$j - 1]) && isset($string[$i - 1]))
            && ($needle[$j - 1] == '?' && $string[$i - 1] == '?')
        ) {
            $pos_needle = $j;
            $pos_string = $i;
        }
        if ($pos_needle && (isset($needle[$pos_needle]) && $needle[$pos_needle] == 'p')
            && (isset($needle[$pos_needle + 1]) && $needle[$pos_needle + 1] == 'h')
            && (isset($needle[$pos_needle + 2]) && $needle[$pos_needle + 2] == 'p')
        ) {
            $pos_needle = $pos_needle + 3;
        }

        if ($pos_string && (isset($string[$pos_string]) && $string[$pos_string] == 'p')
            && (isset($string[$pos_string + 1]) && $string[$pos_string + 1] == 'h')
            && (isset($string[$pos_string + 2]) && $string[$pos_string + 2] == 'p')
        ) {

            $pos_string = $pos_string + 3;
        }
        return [$pos_needle, $pos_string];
    }

    public static function strip_whitespace($string, $save_length = false)
    {
        StringToStreamWrapper::prepare($string);
        $strippedStr = @php_strip_whitespace(StringToStreamWrapper::WRAPPER_NAME . '://');

        if (!$save_length) {
            return $strippedStr;
        } else {
            $iMax = strlen($string);
            $jMax = strlen($strippedStr);

            if ($iMax != $jMax) {
                $newStr = '';
                $j = 0;

                for ($i = 0; $i < $iMax; $i++) {
                    if (isset($strippedStr[$j]) && trim($string[$i]) === trim($strippedStr[$j])) {
                        $newStr .= $string[$i];
                        $j++;
                    } else {
                        $newStr .= ' ';
                    }
                }

                return $newStr;
            }

            return $strippedStr;
        }
    }

    public static function normalize($string, $save_length = false)
    {
        $search  = array( ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. '
            , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ',  '> ', ' $', ' %', '% '
            , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? ');
        $replace = array(  ';',  '=',  ',',  '.',  '(',  ')',  '{',  '}', ';',  '=',  ',',  '.'
            ,  '(',   ')', '{',  '}',   '!',  '>',  '<',  '_', '_',  '<',   '>',   '$',  '%', '%'
            ,  '#',   '#', '^',   '^',  '&', '&',   '?', '?');

        if (!$save_length) {
            $string = str_replace('@', '', $string);
            $string = preg_replace('~\s+~smi', ' ', $string);
            $string = str_replace($search, $replace, $string);
        }

        $string = preg_replace_callback('~\bchr\(\s*([0-9a-fA-FxX]+)\s*\)~', function($m) use ($save_length) {
            if ($save_length) {
                return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' ');
            } else {
                return "'" . @chr(intval($m[1], 0)) . "'";
            }
        }, $string);

        for ($i = 0; $i < 2; $i++) {
            $string = preg_replace_callback('~%([0-9a-fA-F]{2})~', function($m) use ($save_length) {
                if ($save_length) {
                    return str_pad(chr(@hexdec($m[1])), strlen($m[0]), ' ');
                } else {
                    return @chr(hexdec($m[1]));
                }
            }, $string);
        }

        $iter = 0;
        $regexpHtmlAmp = '/\&[#\w]{2,20};/i';
        while ($iter < self::MAX_ITERATION && preg_match($regexpHtmlAmp, $string)) {
            $string = preg_replace_callback($regexpHtmlAmp, function ($m) use ($save_length) {
                if ($save_length) {
                    return str_pad(@html_entity_decode($m[0], ENT_QUOTES | ENT_HTML5), strlen($m[0]), ' ', STR_PAD_LEFT);
                } else {
                    return @html_entity_decode($m[0], ENT_QUOTES | ENT_HTML5);
                }
            }, $string);
            $iter++;
        }

        $string = preg_replace_callback('/\\\\x([a-fA-F0-9]{1,2})/i', function($m) use ($save_length) {
            if ($save_length) {
                return str_pad(chr(@hexdec($m[1])), strlen($m[0]), ' ');
            } else {
                return @chr(hexdec($m[1]));
            }
        }, $string);

        $string = preg_replace_callback('/\\\\([0-9]{1,3})/i', function($m) use ($save_length) {
            if ($save_length) {
                return str_pad(@chr(octdec($m[1])), strlen($m[0]), ' ');
            } else {
                return @chr(octdec($m[1]));
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', function($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\++\s*?[\'"]/smi', function($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        $string = preg_replace_callback('~<title[^>]{0,99}>\s*\K(.{0,300}?)(?=<\/title>)~mis', function($m) use ($save_length) {
            if(preg_match('~(?:\w[^\x00-\x7F]{1,9}|[^\x00-\x7F]{1,9}\w)~', $m[1])) {
                return self::HomoglyphNormalize($m[1]);
            }
            return $m[1];
        }, $string);

        if (!$save_length) {
            $string = str_replace('<?php', '<?php ', $string);
            $string = preg_replace('~\s+~', ' ', $string);
        }

        return $string;
    }

    public static function string_pos($string, $needle)
    {
        $j      = 0;
        $skip   = false;
        $start  = false;
        $end    = 0;
        $last_tag = [false, false];

        $string = self::strip_whitespace($string, true);
        $string = self::normalize($string, true);

        $needle = self::normalize($needle, true);

        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            if(trim($string[$i]) === '' && trim($needle[$j]) === '') {
                $string[$i] = $needle[$j] = ' ';
            }
            if ($string[$i] == $needle[$j]) {
                if ($j == 0) {
                    $start = $i;
                } elseif ($j == strlen($needle) - 1) {
                    $end = $i;
                    return [$start, $end];
                }
                $j++;
            } else {
                $match_php_tag = self::match_shortopen_tag($string, $i, $needle, $j);
                if ($match_php_tag[0] !== false && ($last_tag[0] !== $match_php_tag[0])) {
                    $j = $match_php_tag[0];
                }
                if ($match_php_tag[1] !== false && ($last_tag[1] !== $match_php_tag[1])) {
                    $i = $match_php_tag[1] - 1;
                }
                $last_tag = $match_php_tag;
                if ($match_php_tag[0] !== false || ($match_php_tag[1] !== false && (!empty($last_tag)))) {
                    continue;
                }
                $skip = self::need_skip($string, $i);
                if ($skip !== false && $start !== false) {
                    $i = $skip - 1;
                } else {
                    $j = 0;
                }
            }
        }
        return false;
    }

    private static function HomoglyphNormalize($str)
    {
        if (!is_array(self::$confusables)) {
            self::$confusables = @unserialize(@base64_decode(self::$confusables));
        }
        return str_replace(array_keys(self::$confusables), array_values(self::$confusables), $str);
    }

    /**
     * @param array $confusables
     */
    public static function setConfusables(array $confusables)
    {
        self::$confusables = $confusables;
    }
}


class Encoding
{
    // Unicode BOM is U+FEFF, but after encoded, it will look like this.

    const UTF32_BIG_ENDIAN_BOM = "\x00\x00\xFE\xFF";
    const UTF32_LITTLE_ENDIAN_BOM = "\xFF\xFE\x00\x00";
    const UTF16_BIG_ENDIAN_BOM = "\xFE\xFF";
    const UTF16_LITTLE_ENDIAN_BOM = "\xFF\xFE";
    const UTF8_BOM = "\xEF\xBB\xBF";

    public static function detectUTFEncoding($text)
    {
        $first2 = substr($text, 0, 2);
        $first3 = substr($text, 0, 3);
        $first4 = substr($text, 0, 4);

        if ($first3 == self::UTF8_BOM) {
            return 'UTF-8';
        } elseif ($first4 == self::UTF32_BIG_ENDIAN_BOM) {
            return 'UTF-32BE';
        } elseif ($first4 == self::UTF32_LITTLE_ENDIAN_BOM) {
            return 'UTF-32LE';
        } elseif ($first2 == self::UTF16_BIG_ENDIAN_BOM) {
            return 'UTF-16BE';
        } elseif ($first2 == self::UTF16_LITTLE_ENDIAN_BOM) {
            return 'UTF-16LE';
        }
        return false;
    }

    public static function iconvSupported()
    {
        return (function_exists('iconv') && is_callable('iconv'));
    }

    public static function convertToCp1251($from, $str)
    {
        $ret = @iconv($from, 'CP1251//TRANSLIT', $str);
        if ($ret === false) {
            $ret = @iconv($from, 'CP1251//IGNORE', Normalization::normalize($str));
        }
        return $ret;
    }

    public static function convertToUTF8($from, $str)
    {
        return @iconv($from, 'UTF-8//IGNORE', $str);
    }
}

/**
 * Class RapidScanStorageRecord.
 *
 * Implements db record for RapidScan
 */
class RapidScanStorageRecord
{
    const WHITE = 1; // white listed file in cloud db
    const BLACK = 6; // black listed file in cloud db
    const DUAL_USE = 2; // dual used listed file in cloud db
    const UNKNOWN = 3; // unknown file --> file not listed in cloud db
    const HEURISTIC = 4; //detected as heuristic
    const CONFLICT = 5; // we have filename hashing conflict for this file
    const NEWFILE = 0; // this is a new file (or content changed)
    const RX_MALWARE = 7; // detected as malware by rx scan
    const RX_SUSPICIOUS = 8; // detected as suspicious by rx scan
    const RX_GOOD = 9; // detected as good by rx scan

    /**
     * @var string;
     */
    private $filename;
    /**
     * @var int
     */
    private $key;
    /**
     * @var int
     */
    private $updated_ts;
    /**
     * @var int
     */
    private $verdict;
    /**
     * @var string
     */
    private $sha2;
    /**
     * @var string
     */
    private $signature = '';
    /**
     * @var string
     */
    private $snippet = '';

    /**
     * RapidScanStorageRecord constructor.
     * @param $key
     * @param $updated_ts
     * @param int $verdict
     * @param $sha2
     * @param string $signature
     */
    private function __construct($key, $updated_ts, $verdict, $sha2, $signature, $filename, $snippet)
    {
        $this->filename = $filename;
        $this->key = $key;
        $this->updated_ts = $updated_ts;
        $this->verdict = $verdict;
        $this->sha2 = $sha2;
        $this->snippet = $snippet;
        if ($signature!=='') {
            $this->signature = self::padTo10Bytes($signature);
        }
    }

    /**
     * Create db storage record from file
     * @param $filename
     * @param string $signature
     * @param int $verdict
     * @return RapidScanStorageRecord
     * @throws Exception
     */
    public static function fromFile($file, $signature = '', $verdict = self::UNKNOWN, $snippet = '')
    {
        $filename = '';
        $stat = [];
        $inode = 0;
        $ctime = 0;
        $mtime = 0;

        if (is_string($file) && file_exists($file)) {
            $filename = $file;
            $stat = stat($filename);
            $inode = $stat['ino'];
            $ctime = $stat['ctime'];
            $mtime = $stat['mtime'];
        } else if ($file instanceof FileInfo && file_exists($file->getFilename())){
            $filename = $file->getFilename();
            $inode = $file->getInode();
            $ctime = $file->getCreated();
            $mtime = $file->getModified();
        }
        if (!file_exists($filename)) {
            throw new Exception('File \'' . $filename . '\' doesn\'t exists.');
        }


        $key = (int)((string)self::fileNameHash($filename) . (string)$inode);
        $updated_ts = max($mtime, $ctime);
        $sha2 = '';
        if (!$verdict) {
            $verdict = self::NEWFILE;
        }
        if ($signature!=='') {
            $signature = self::padTo10Bytes($signature);
        }
        return new self($key, $updated_ts, $verdict, $sha2, $signature, $filename, $snippet);
    }

    /**
     * @param $array
     * @return RapidScanStorageRecord
     */
    public static function fromArray($array)
    {
        $key = $array['key'];
        $updated_ts = $array['updated_ts'];
        $sha2 = hex2bin($array['sha2']);
        $verdict = $array['verdict'];
        $signature = $array['signature'];
        return new self($key, $updated_ts, $verdict, $sha2, $signature, '', '');
    }

    /**
     * @return array
     */
    public function toArray()
    {
        $array['key'] = $this->key;
        $array['updated_ts'] = $this->updated_ts;
        $array['verdict'] = $this->verdict;
        $array['sha2'] = bin2hex($this->sha2);
        $array['signature'] = $this->signature;
        return $array;
    }

    /**
     * @return array
     */
    public function calcSha2()
    {
        $this->sha2 = hash('sha256', file_get_contents($this->filename), true);
    }

    /**
     * @param $verdict
     */
    public function setVerdict($verdict)
    {
        $this->verdict = $verdict;
    }

    /**
     * @return int
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * @param $signature
     */
    public function setSignature($signature)
    {
        if ($signature!=='') {
            $this->signature = self::padTo10Bytes($signature);
        }
    }

    /**
     * Unpack bytestring $value to RapidScanStorageRecord
     * @param $hash
     * @param $value
     * @return RapidScanStorageRecord
     */
    public static function unpack($hash, $value)
    {
        // pack format
        // 8 bytes timestamp
        // 1 byte verdict
        // 32 bytes sha2
        // 10 bytes signature (only for BLACK, DUAL_USE, RX_MALWARE, RX_SUSPICIOUS)
        // note - we will hold bloomfilter for file later on for those that are WHITE
        // it will be used to detect installed apps

        $signature = '';
        $timestamp = unpack("l", substr($value, 0, 8));
        $updated_ts = array_pop($timestamp);
        $verdict = $value[8];
        $verdict = (int)bin2hex($verdict);
        $sha2 = substr($value, 9, 32);
        if (in_array($verdict, array(self::BLACK, self::DUAL_USE, self::RX_MALWARE, self::RX_SUSPICIOUS))) {
            $signature = substr($value, 41, 10);  # 10 bytes signature string
        }
        if (strlen($value) > 51) {
            $snippet = substr($value, 51);
        } else {
            $snippet = '';
        }
        return new self($hash, $updated_ts, $verdict, $sha2, $signature, '', $snippet);
    }

    /**
     * Pack RapidScanStorageRecord to bytestring to save in db
     * @return string
     */
    public function pack()
    {
        $signature = '';
        if (strlen($this->signature) > 0) {
            $signature = $this->signature;
        }
        return (($this->updated_ts < 0) ? str_pad(pack("l", $this->updated_ts), 8, "\xff") : str_pad(pack("l", $this->updated_ts), 8, "\x00")) . pack("c", $this->verdict) . $this->sha2 . $signature . $this->snippet;
    }

    /**
     * Hash function for create hash of full filename to store in db as key
     * @param $str
     * @return int
     */
    private static function fileNameHash($str)
    {
        for ($i = 0, $h = 5381, $len = strlen($str); $i < $len; $i++) {
            $h = (($h << 5) + $h + ord($str[$i])) & 0x7FFFFFFF;
        }
        return $h;
    }

    /**
     * Convert string to utf-8 and fitting/padding it to 10 bytes
     * @param $str
     * @return string
     */
    private static function padTo10Bytes($str)
    {
        # convert string to bytes in UTF8, and add 0 bytes to pad it to 10
        # cut to 10 bytes of necessary
        $str = utf8_encode($str);
        $len = strlen($str);
        if ($len < 10) {
            $str = str_pad($str, 10, "\x00");
        } elseif ($len > 10) {
            $str = substr($str, 0, 10);
        }
        return $str;
    }

    /**
     * @return int
     */
    public function getUpdatedTs()
    {
        return $this->updated_ts;
    }

    /**
     * @return int
     */
    public function getVerdict()
    {
        return $this->verdict;
    }

    /**
     * @return string
     */
    public function getSha2()
    {
        return $this->sha2;
    }

    /**
     * @return string
     */
    public function getSignature()
    {
        return $this->signature;
    }

    /**
     * @return string
     */
    public function getFilename()
    {
        return $this->filename;
    }

    /**
     * @param $filename
     */
    public function setFilename($filename)
    {
        $this->filename = $filename;
    }

    /**
     * @return string
     */
    public function getSnippet()
    {
        return $this->snippet;
    }

    /**
     * @param $filename
     */
    public function setSnippet($snippet)
    {
        $this->snippet = $snippet;
    }
}


/**
 * Interface RapidScanStorage implements class to work with RapidScan db
 * @package Aibolit\Lib\Scantrack
 */
class RapidScanStorage
{
    /**
     * @var string
     */
    protected $old_dir;
    /**
     * @var string
     */
    protected $new_dir;
    /**
     * @var resource
     */
    protected $new_db;
    /**
     * @var resource
     */
    protected $old_db;
    /**
     * @var resource
     */
    private $wb;
    /**
     * @var int
     */
    public $batch_count;

    /**
     * RapidScanStorage constructor.
     * @param $base - folder where db located
     */
    public function __construct($base)
    {
        if(!is_dir($base) && !mkdir($base) && !is_dir($base)) {
            throw new Exception(sprintf('Directory "%s" was not created', $base));
        }

        $this->old_dir = $base . '/current';
        $this->new_dir = $base . '/new';
        $options = array('create_if_missing' => true, 'compression'=> LEVELDB_NO_COMPRESSION);

        $this->new_db = new LevelDB($this->new_dir, $options);
        $this->old_db = new LevelDB($this->old_dir, $options);

        $this->wb = NULL;  // will be use to track writing to batch
        $this->batch_count = 0;
    }

    /**
     * @param RapidScanStorageRecord $record
     * @return bool
     */
    public function put(RapidScanStorageRecord $record)
    {
        $this->startBatch();
        $this->batch_count++;
        $value = $this->wb->put($record->getKey(), $record->pack());
        return $value;
    }

    /**
     * @param $hash
     * @return bool|RapidScanStorageRecord
     */
    public function getNew($hash)
    {
        $value = $this->new_db->get($hash);
        if($value) {
            $return = RapidScanStorageRecord::unpack($hash, $value);
            return $return;
        }
        return false;
    }

    /**
     * @param $hash
     * @return bool|RapidScanStorageRecord
     */
    public function getOld($hash)
    {
        $value = $this->old_db->get($hash);
        if($value) {
            $return = RapidScanStorageRecord::unpack($hash, $value);
            return $return;
        }
        return false;
    }

    /**
     * @param $hash
     * @return bool
     */
    public function delete($hash)
    {
        $return = $this->new_db->delete($hash);
        return $return;
    }

    /**
     * Close db, remove old db, move new to a new space
     */
    public function finish()
    {
        $this->old_db->close();
        $this->flushBatch();
        $this->new_db->close();

        self::rmtree($this->old_dir);
        rename($this->new_dir, $this->old_dir);
    }

    /**
     * Start batch operations
     */
    private function startBatch()
    {
        if(!$this->wb) {
            $this->wb = new LevelDBWriteBatch();
            $this->batch_count = 0;
        }
    }

    /**
     *  write all data in a batch, reset batch
     */
    public function flushBatch()
    {
        if ($this->wb) {
            $this->new_db->write($this->wb);
            $this->batch_count = 0;
            $this->wb = NULL;
        }
    }
    /**
     * Helper function to remove folder tree
     * @param $path
     */
    public static function rmTree($path)
    {
        if (is_dir($path)) {
            foreach (scandir($path) as $name) {
                if (in_array($name, array('.', '..'))) {
                    continue;
                }
                $subpath = $path.DIRECTORY_SEPARATOR . $name;
                self::rmTree($subpath);
            }
            rmdir($path);
        } else {
            unlink($path);
        }
    }
}

/**
 * For work with Cloud Assisted Storage
 * @package Aibolit\Lib\Scantrack
 */
class CloudAssistedStorage
{
    private $db_filepath = '';

    public function __construct($folder)
    {
        if(!is_dir($folder) && !mkdir($folder) && !is_dir($folder)) {
            throw new Exception(sprintf('Directory "%s" was not created', $folder));
        }
        $this->db_filepath = $folder . DIRECTORY_SEPARATOR . 'cloud_assisted_verdicts.json';
    }

    public function getList()
    {
        if (!file_exists($this->db_filepath)) {
            return [];
        }
        $content = file_get_contents($this->db_filepath);
        if (!$content) {
            return [];
        }
        $list = json_decode($content, true);
        if (!$list || !is_array($list)) {
            return [];
        }
        return $list;
    }

    public function putList($list)
    {
        file_put_contents($this->db_filepath, json_encode($list));
    }
    
    public function delete()
    {
        if (!file_exists($this->db_filepath)) {
            return;
        }
        unlink($this->db_filepath);
    }
}

/**
 * This is actual class that does account level scan
 * and remembers the state of scan
 * Class RapidAccountScan
 * @package Aibolit\Lib\Scantrack
 */
class RapidAccountScan
{
    const RESCAN_ALL        = 0; // mode of operation --> rescan all files that are not white/black/dual_use using cloud scanner & regex scanner
    const RESCAN_NONE       = 1; // don't re-scan any files that we already scanned
    const RESCAN_SUSPICIOUS = 2; // only re-scan suspicious files using only regex scanner

    const MAX_BATCH     = 1000; // max files to write in a db batch write
    const MAX_TO_SCAN   = 1000; // max files to scan using cloud/rx scanner at a time

    private $db;
    private $cas_db;
    private $cas_list = [];
    private $vars = null;
    private $scanlist;
    private $collisions;
    private $processedFiles;
    private $rescan_count = 0;
    private $counter = 0;
    private $str_error = false;
    private $scanner = null;

    /**
     * RapidAccountScan constructor.
     * @param RapidScanStorage $rapidScanStorage
     */
    public function __construct($scanner, $rapidScanStorage, $cloudAssistedStorage, &$vars, $counter = 0)
    {
        $this->db = $rapidScanStorage;
        $this->cas_db = $cloudAssistedStorage;
        $this->vars = $vars;
        $this->scanlist = array();
        $this->collisions = array();
        $this->processedFiles = 0;
        $this->counter = $counter;
        $this->scanner = $scanner;
    }

    /**
     * Get str error
     */
    public function getStrError()
    {
        return $this->str_error;
    }

    /**
     * Get count of rescan(regexp) files
     */
    public function getRescanCount()
    {
        return $this->rescan_count;
    }

    /**
     * placeholder for actual regex scan
     * return RX_GOOD, RX_MALWARE, RX_SUSPICIOUS and signature from regex scaner
     * if we got one
     */
    private function regexScan($filename, $i, $vars)
    {
        $this->rescan_count++;
        printProgress(++$this->processedFiles, $filename, $vars);
        $return = $this->scanner->QCR_ScanFile($filename, $vars, null, $i, false);
        return $return;
    }

    /**
     * we will have batch of new files that we will scan
     * here we will write them into db once we scanned them
     * we need to check that there is no conflicts/collisions
     * in names, for that we check for data in db if such filename_hash
     * already exists, but we also keep set of filename_hashes of given
     * batch, to rule out conflicts in current batch as well
     */
    private function writeNew()
    {
        $this->collisions = array();
        foreach ($this->scanlist as $fileinfo) {
            if (in_array($fileinfo->getKey(), $this->collisions) || $this->db->getNew($fileinfo->getKey())) {
                $fileinfo->setVerdict(RapidScanStorageRecord::CONFLICT);
            }
            $this->collisions [] = $fileinfo->getKey();
            $this->db->put($fileinfo);
        }
    }

    /**
     * given a batch do cloudscan
     * @throws \Exception
     */
    private function doCloudScan()
    {
        if (count($this->scanlist) <= 0) {
            return;
        }

        $index_table    = [];
        $blackfiles     = [];
        $sha_list       = [];

        foreach ($this->scanlist as $i => $fileinfo) {
            $sha_list[] = bin2hex($fileinfo->getSha2());
            $index_table[] = $i;
            $fileinfo->setVerdict(RapidScanStorageRecord::UNKNOWN);
        }

        $ca = Factory::instance()->create(CloudAssistedRequest::class, [CLOUD_ASSIST_TOKEN]);

        $white_raw          = [];
        $black_raw          = [];
        $verdicts_black_raw = [];
        
        try {
            list($white_raw, $black_raw, $verdicts_black_raw) = $ca->checkFilesByHash($sha_list);
        } catch (\Exception $e) {
            $this->str_error = $e->getMessage();
        }
        
        $dual = array_intersect($white_raw, $black_raw);

        $black_raw = array_diff($black_raw, $white_raw);

        foreach ($white_raw as $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::WHITE);
        }
        $signatures_db = [];
        foreach ($black_raw as $i => $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::BLACK);
            $signature      = isset($verdicts_black_raw[$i]) ? $verdicts_black_raw[$i] : '';
            $signature_id   = 'c_' . hash('crc32', $signature);
            $signatures_db[$signature_id] = $signature;
            $this->scanlist[$index_table[$index]]->setSignature($signature_id);
            $blackfiles[$this->scanlist[$index_table[$index]]->getFilename()] = [
                'h'         => $sha_list[$index],
                'ts'        => time(),
                'sn'        => $signature,
                'ras_sigid' => $signature_id,
            ];
        }

        $signatures_list = $this->cas_db->getList();
        foreach ($signatures_db as $hash => $sig) {
            $this->cas_list[$hash] = $sig;
            if (isset($signatures_list[$hash])) {
                continue;
            }
            $signatures_list[$hash] = $sig;
        }
        $this->cas_db->putList($signatures_list);
        
        foreach ($dual as $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::DUAL_USE);
            $this->scanlist[$index_table[$index]]->setSignature('DUAL'); //later on we will get sig info from cloud
        }

        // we can now update verdicts in batch for those that we know
        //add entries to report, when needed

        $this->vars->blackFiles = array_merge($this->vars->blackFiles, $blackfiles);

        unset($white_raw, $black_raw, $dual, $sha_list, $index_table);
    }

    /**
     * regex scan a single file, add entry to report if needed
     * @param $fileInfo
     * @param $i
     */
    private function _regexScan($fileInfo, $i, $vars)
    {
        $regex_res = $this->regexScan($fileInfo->getFilename(), $i, $vars);
        if (!is_array($regex_res)) {
            return;
        }
        list($result, $sigId, $snippet) = $regex_res;
        $fileInfo->setVerdict($result);
        if ($result !== RapidScanStorageRecord::RX_GOOD) {
            $fileInfo->setSignature($sigId);
            $fileInfo->setSnippet($snippet);
        }
    }

    /**
     * regex scan batch of files.
     */
    private function doRegexScan($vars)
    {
        foreach ($this->scanlist as $i => $fileinfo) {
            if (!in_array($fileinfo->getVerdict(), array(
                RapidScanStorageRecord::WHITE,
                RapidScanStorageRecord::BLACK,
                RapidScanStorageRecord::DUAL_USE
            ))
            ) {
                $this->_regexScan($fileinfo, $i, $vars);
            }
        }
    }

    private function processScanList($vars)
    {
        $this->doCloudScan();
        $this->doRegexScan($vars);
        $this->writeNew();
        $this->scanlist = [];
    }

    private function scanFile($filename, $rescan, $i, $vars)
    {
        if ($vars->fileinfo !== null) {
            if($filename !== $vars->fileinfo->getFilename()) {
                unset($file);
                $vars->fileinfo = null;
            }
        }
      
        if ($vars->fileinfo == null) {
            $file = new FileInfo($filename, $i);
            $vars->fileinfo = $file;
        }

        $file = $vars->fileinfo;

        if (!file_exists($filename)) {
            return false;
        }
        $file = RapidScanStorageRecord::fromFile($file);

        $old_value = $this->db->getOld($file->getKey());
        $old_mtime = 0;
        if ($old_value) {
            $old_mtime = $old_value->getUpdatedTs();
            if ($file->getUpdatedTs() == $old_mtime) {
                $file = $old_value;
                $file->setFilename($filename);
            }
        }

        if ($file->getVerdict() == RapidScanStorageRecord::UNKNOWN
            || $file->getVerdict() == RapidScanStorageRecord::CONFLICT
            || $file->getUpdatedTs() !== $old_mtime
        ) {
            // these files has changed or we know nothing about them, lets re-calculate sha2
            // and do full scan
            $file->calcSha2();
            $file->setVerdict(RapidScanStorageRecord::NEWFILE);
            $this->scanlist[$i] = $file;
        } elseif ($file->getVerdict() == RapidScanStorageRecord::BLACK) {
            //these files hasn't changed, but need to be reported as they are on one of the lists
            $signature_id   = $file->getSignature();
            $signature      = isset($this->cas_list[$signature_id]) ? $this->cas_list[$signature_id] : '';
            $this->vars->blackFiles[$filename] = [
                'h'         => bin2hex($file->getSha2()),
                'ts'        => time(),
                'sn'        => $signature,
                'ras_sigid' => $signature_id,
            ];
            $this->db->put($file);
        } elseif ($file->getVerdict() == RapidScanStorageRecord::DUAL_USE) {
            $this->db->put($file);
        } elseif (($rescan == self::RESCAN_SUSPICIOUS || $rescan == self::RESCAN_NONE)
            && $file->getVerdict() == RapidScanStorageRecord::RX_MALWARE
        ) {
            //this files were detected as rx malware before, let's report them

            $sigId = trim($file->getSignature(), "\0");

            if (isset($sigId) && isset($vars->signs->_Mnemo[$sigId])) {
                $sigName = $vars->signs->_Mnemo[$sigId];
                $snippet = $file->getSnippet();
                if (strpos($sigName, 'SUS') !== false && AI_EXTRA_WARN) {
                    $vars->warningPHP[] = $i;
                    $vars->warningPHPFragment[] = $snippet;
                    $vars->warningPHPSig[] = $sigId;
                } elseif (strtolower(pathinfo($filename, PATHINFO_EXTENSION)) == 'js') {
                    $vars->criticalJS[] = $i;
                    $vars->criticalJSFragment[] = $snippet;
                    $vars->criticalJSSig[] = $sigId;
                } else {
                    $vars->criticalPHP[] = $i;
                    $vars->criticalPHPFragment[] = $snippet;
                    $vars->criticalPHPSig[] = $sigId;
                }
                $this->scanner->AddResult($vars->fileinfo, $i, $vars);
                $this->db->put($file);
            } else {
                $this->scanlist[$i] = $file;
            }
        } elseif ((
                $rescan == self::RESCAN_ALL
                && in_array($file->getVerdict(), array(
                    RapidScanStorageRecord::RX_SUSPICIOUS,
                    RapidScanStorageRecord::RX_GOOD,
                    RapidScanStorageRecord::RX_MALWARE
                ))
            )
            || (
                $rescan == self::RESCAN_SUSPICIOUS
                && $file->getVerdict() == RapidScanStorageRecord::RX_SUSPICIOUS
            )
        ) {
            //rescan all mode, all none white/black/dual listed files need to be re-scanned fully

            $this->scanlist[$i] = $file;
        } else {
            //in theory -- we should have only white files here...
            $this->db->put($file);
        }

        if (count($this->scanlist) >= self::MAX_TO_SCAN) {
            // our scan list is big enough
            // let's flush db, and scan the list
            $this->db->flushBatch();
            $this->processScanList($vars);
        }

        if ($this->db->batch_count >= self::MAX_BATCH) {
            //we have added many entries to db, time to flush it
            $this->db->flushBatch();
            $this->processScanList($vars);
        }
        unset($file);
        $vars->fileinfo = null;
    }

    public function scan($files, $vars, $rescan = self::RESCAN_SUSPICIOUS)
    {
        $i = 0;
        $this->cas_list = $this->cas_db->getList();
        
        foreach ($files as $filepath) {
            $counter = $this->counter + $i;
            $vars->totalFiles++;
            $this->processedFiles = $counter - $vars->totalFolder - count($this->scanlist);
            printProgress($this->processedFiles, $filepath, $vars);
            $this->scanFile($filepath, $rescan, $counter, $vars);
            $i++;
        }
        
        if ($rescan == self::RESCAN_ALL) {
            $this->cas_db->delete();
            $this->cas_list = [];
            foreach ($this->vars->blackFiles as $blackfile) {
                $this->cas_list[$blackfile['ras_sigid']] = $blackfile['sn'];
            }
            $this->cas_db->putList($this->cas_list);
        }

        //let's flush db again
        $this->db->flushBatch();

        //process whatever is left in our scan list
        if (count($this->scanlist) > 0) {
            $this->processScanList($vars);
        }

        // whitelist

        $snum = 0;
        $list = $this->scanner->check_whitelist($vars->structure['crc'], $snum);
        $keys = array(
            'criticalPHP',
            'criticalJS',
            'g_Iframer',
            'g_Base64',
            'phishing',
            'adwareList',
            'g_Redirect',
            'warningPHP'
        );
        foreach ($keys as $p) {
            if (empty($vars->{$p})) {
                continue;
            }
            $p_Fragment = $p . 'Fragment';
            $p_Sig      = $p . 'Sig';
            if ($p == 'g_Redirect') {
                $p_Fragment = $p . 'PHPFragment';
            }
            if ($p == 'g_Phishing') {
                $p_Sig = $p . 'SigFragment';
            }

            $count = count($vars->{$p});
            for ($i = 0; $i < $count; $i++) {
                $id = $vars->{$p}[$i];
                if ($vars->structure['crc'][$id] !== 0 && in_array($vars->structure['crc'][$id], $list)) {
                    $rec = RapidScanStorageRecord::fromFile($vars->structure['n'][$id]);
                    $rec->calcSha2();
                    $rec->setVerdict(RapidScanStorageRecord::RX_GOOD);
                    $this->db->put($rec);
                    unset($vars->{$p}[$i], $vars->{$p_Sig}[$i], $vars->{$p_Fragment}[$i]);
                }
            }

            $vars->{$p}             = array_values($vars->{$p});
            $vars->{$p_Fragment}    = array_values($vars->{$p_Fragment});
            if (!empty($vars->{$p_Sig})) {
                $vars->{$p_Sig} = array_values($vars->{$p_Sig});
            }
        }
        //close databases and rename new into 'current'
        $this->db->finish();
    }
}

/**
 * DbFolderSpecification class file.
 */

/**
 * Class DbFolderSpecification.
 *
 * It can be use for checking requirements for a folder that is used for storing a RapidScan DB.
 */
class DbFolderSpecification
{
    /**
     * Check whether a particular folder satisfies requirements.
     *
     * @param string $folder
     * @return bool
     */
    public function satisfiedBy($folder)
    {
        if (!file_exists($folder) || !is_dir($folder)) {
            return false;
        }

        $owner_id = (int)fileowner($folder);
        if (function_exists('posix_getpwuid')) {
            $owner = posix_getpwuid($owner_id);
            if (!isset($owner['name']) || $owner['name'] !== 'root') {
                return false;
            }
        }
        elseif ($owner_id != 0) {
            return false;
        }

        $perms = fileperms($folder);
        if (($perms & 0x0100)                           // owner r
            && ($perms & 0x0080)                        // owner w
            && ($perms & 0x0040) && !($perms & 0x0800)  // owner x
            && !($perms & 0x0020)                       // group without r
            && !($perms & 0x0010)                       // group without w
            && (!($perms & 0x0008) || ($perms & 0x0400))// group without x
            && !($perms & 0x0004)                       // other without r
            && !($perms & 0x0002)                       // other without w
            && (!($perms & 0x0001) || ($perms & 0x0200))// other without x
        ) {
            return true;
        }
        return false;
    }
}
/**
 * CriticalFileSpecification class file.
 */

/**
 * Class CriticalFileSpecification.
 */
class CriticalFileSpecification
{
    /**
     * @var array list of extension
     */
    private $extensions = [
        'php',
        'htaccess',
        'cgi',
        'pl',
        'o',
        'so',
        'py',
        'sh',
        'phtml',
        'php3',
        'php4',
        'php5',
        'php6',
        'php7',
        'pht',
        'shtml',
        'susp',
        'suspected',
        'infected',
        'vir',
        'ico',
        'js',
        'json',
        'com',
        ''
    ];

    private $js_extensions = [
        'js',
        'json',
        'html',
        'htm',
        'suspicious'
    ];

    private $phish_extensions = [
        'js',
        'html',
        'htm',
        'suspected',
        'php',
        'phtml',
        'pht',
        'php7'
    ];

    private static $critical_content = '^\s*<\?php'
        . '|^\s*<\?='
        . '|^#!/usr'
        . '|^#!/bin'
        . '|\beval'
        . '|assert'
        . '|base64_decode'
        . '|\bsystem'
        . '|create_function'
        . '|\bexec'
        . '|\bpopen'
        . '|\bfwrite'
        . '|\bfputs'
        . '|file_get_'
        . '|call_user_func'
        . '|file_put_'
        . '|\$_REQUEST'
        . '|ob_start'
        . '|\$_GET'
        . '|\$_POST'
        . '|\$_SERVER'
        . '|\$_FILES'
        . '|\bmove'
        . '|\bcopy'
        . '|\barray_'
        . '|reg_replace'
        . '|\bmysql_'
        . '|\bchr'
        . '|fsockopen'
        . '|\$GLOBALS'
        . '|sqliteCreateFunction'
        . '|EICAR-STANDARD-ANTIVIRUS-TEST-FILE';

    private static $critical_js_content = '<script'
        . '|<iframe'
        . '|<object'
        . '|<embed'
        . '|fromCharCode'
        . '|setTimeout'
        . '|setInterval'
        . '|location\.'
        . '|document\.'
        . '|window\.'
        . '|navigator\.'
        . '|\$(this)\.'; /**$g_VirusEntries**/

    private static $critical_phish_content = '<\s*title'
        . '|<\s*html'
        . '|<\s*form'
        . '|<\s*body'
        . '|bank'
        . '|account'; /**$g_PhishEntries*/

    public function __construct()
    {
        $this->extensions = array_flip($this->extensions);
        $this->js_extensions = array_flip($this->js_extensions);
        $this->phish_extensions = array_flip($this->phish_extensions);
    }

    /**
     * Check whether a particular file with specified extension is critical.
     *
     * @param string $ext
     * @param string $type
     * @return bool
     */
    public function satisfiedBy($ext, $type)
    {
        return isset($this->{$type}[$ext]);
    }

    /**
     * Check whether a particular content is critical.
     *
     * @param string $content
     * @param string $type
     * @return bool
     */
    public function satisfiedByContent($content, $type)
    {
        return preg_match('~' . $this->{$type} . '~smiS', $content, $l_Found) ? true : false;
    }
}
class Helpers
{

    public static function normalize($string, $save_length = false)
    {
        $search  = [ ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. '
        , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ',  '> ', ' $', ' %', '% '
        , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? '];
        $replace = [  ';',  '=',  ',',  '.',  '(',  ')',  '{',  '}', ';',  '=',  ',',  '.'
        ,  '(',   ')', '{',  '}',   '!',  '>',  '<',  '_', '_',  '<',   '>',   '$',  '%', '%'
        ,  '#',   '#', '^',   '^',  '&', '&',   '?', '?'];

        if (!$save_length) {
            $string = str_replace('@', '', $string);
            $string = preg_replace('~\s+~smi', ' ', $string);
            $string = str_replace($search, $replace, $string);
        }

        $string = preg_replace_callback('~\bchr\(\s*([0-9a-fA-FxX]+)\s*\)~', function($m) use ($save_length) {
            if ($save_length) {
                return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' ');
            } else {
                return "'" . @chr(intval($m[1], 0)) . "'";
            }
        }, $string);

        $string = preg_replace_callback('/\&\#([0-9]{1,3});/i', function($m) use ($save_length) {
            if ($save_length) {
                return str_pad(@chr((int)$m[1]), strlen($m[0]), ' ');
            } else {
                return @chr((int)$m[1]);
            }
        }, $string);

        $string = preg_replace_callback('/\\\\x([a-fA-F0-9]{1,2})/i', function($m) use ($save_length) {
            if ($save_length) {
                return str_pad(chr(@hexdec($m[1])), strlen($m[0]), ' ');
            } else {
                return @chr(hexdec($m[1]));
            }
        }, $string);

        $string = preg_replace_callback('/\\\\([0-9]{1,3})/i', function($m) use ($save_length) {
            if ($save_length) {
                return str_pad(@chr(octdec($m[1])), strlen($m[0]), ' ');
            } else {
                return @chr(octdec($m[1]));
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', function($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\++\s*?[\'"]/smi', function($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        if (!$save_length) {
            $string = str_replace('<?php', '<?php ', $string);
            $string = preg_replace('~\s+~', ' ', $string);
        }

        return $string;
    }

    public static function format($source)
    {
        $t_count = 0;
        $in_object = false;
        $in_at = false;
        $in_php = false;
        $in_for = false;
        $in_comp = false;
        $in_quote = false;
        $in_var = false;

        if (!defined('T_ML_COMMENT')) {
            define('T_ML_COMMENT', T_COMMENT);
        }

        $result = '';
        @$tokens = token_get_all($source);
        foreach ($tokens as $token) {
            if (is_string($token)) {
                $token = trim($token);
                if ($token == '{') {
                    if ($in_for) {
                        $in_for = false;
                    }
                    if (!$in_quote && !$in_var) {
                        $t_count++;
                        $result = rtrim($result) . ' ' . $token . "\n" . str_repeat('    ', $t_count);
                    } else {
                        $result = rtrim($result) . $token;
                    }
                } elseif ($token == '$') {
                    $in_var = true;
                    $result .= $token;
                } elseif ($token == '}') {
                    if (!$in_quote && !$in_var) {
                        $new_line = true;
                        $t_count--;
                        if ($t_count < 0) {
                            $t_count = 0;
                        }
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) .
                            $token . "\n" . @str_repeat('    ', $t_count);
                    } else {
                        $result = rtrim($result) . $token;
                    }
                    if ($in_var) {
                        $in_var = false;
                    }
                } elseif ($token == ';') {
                    if ($in_comp) {
                        $in_comp = false;
                    }
                    if ($in_for) {
                        $result .= $token . ' ';
                    } else {
                        $result .= $token . "\n" . str_repeat('    ', $t_count);
                    }
                } elseif ($token == ':') {
                    if ($in_comp) {
                        $result .= ' ' . $token . ' ';
                    } else {
                        $result .= $token . "\n" . str_repeat('    ', $t_count);
                    }
                } elseif ($token == '(') {
                    $result .= ' ' . $token;
                } elseif ($token == ')') {
                    $result .= $token;
                } elseif ($token == '@') {
                    $in_at = true;
                    $result .= $token;
                } elseif ($token == '.') {
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '=') {
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '?') {
                    $in_comp = true;
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '"') {
                    if ($in_quote) {
                        $in_quote = false;
                    } else {
                        $in_quote = true;
                    }
                    $result .= $token;
                } else {
                    $result .= $token;
                }
            } else {
                list($id, $text) = $token;
                switch ($id) {
                    case T_OPEN_TAG:
                    case T_OPEN_TAG_WITH_ECHO:
                        $in_php = true;
                        $result .= trim($text) . "\n";
                        break;
                    case T_CLOSE_TAG:
                        $in_php = false;
                        $result .= trim($text);
                        break;
                    case T_FOR:
                        $in_for = true;
                        $result .= trim($text);
                        break;
                    case T_OBJECT_OPERATOR:
                        $result .= trim($text);
                        $in_object = true;
                        break;

                    case T_ENCAPSED_AND_WHITESPACE:
                    case T_WHITESPACE:
                        $result .= trim($text);
                        break;
                    case T_RETURN:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_ELSE:
                    case T_ELSEIF:
                        $result = rtrim($result) . ' ' . trim($text) . ' ';
                        break;
                    case T_CASE:
                    case T_DEFAULT:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count - 1) . trim($text) . ' ';
                        break;
                    case T_FUNCTION:
                    case T_CLASS:
                        $result .= "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_AND_EQUAL:
                    case T_AS:
                    case T_BOOLEAN_AND:
                    case T_BOOLEAN_OR:
                    case T_CONCAT_EQUAL:
                    case T_DIV_EQUAL:
                    case T_DOUBLE_ARROW:
                    case T_IS_EQUAL:
                    case T_IS_GREATER_OR_EQUAL:
                    case T_IS_IDENTICAL:
                    case T_IS_NOT_EQUAL:
                    case T_IS_NOT_IDENTICAL:
                    case T_LOGICAL_AND:
                    case T_LOGICAL_OR:
                    case T_LOGICAL_XOR:
                    case T_MINUS_EQUAL:
                    case T_MOD_EQUAL:
                    case T_MUL_EQUAL:
                    case T_OR_EQUAL:
                    case T_PLUS_EQUAL:
                    case T_SL:
                    case T_SL_EQUAL:
                    case T_SR:
                    case T_SR_EQUAL:
                    case T_START_HEREDOC:
                    case T_XOR_EQUAL:
                        $result = rtrim($result) . ' ' . trim($text) . ' ';
                        break;
                    case T_COMMENT:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_ML_COMMENT:
                        $result = rtrim($result) . "\n";
                        $lines = explode("\n", $text);
                        foreach ($lines as $line) {
                            $result .= str_repeat('    ', $t_count) . trim($line);
                        }
                        $result .= "\n";
                        break;
                    case T_INLINE_HTML:
                        $result .= $text;
                        break;
                    default:
                        $result .= trim($text);
                        break;
                }
            }
        }
        return $result;
    }

    public static function replaceCreateFunction($str)
    {
        $hangs = 20;
        while (strpos($str, 'create_function') !== false && $hangs--) {
            $start_pos = strpos($str, 'create_function');
            $end_pos = 0;
            $brackets = 0;
            $started = false;
            $opened = 0;
            $closed = 0;
            for ($i = $start_pos, $iMax = strlen($str); $i < $iMax; $i++) {
                if ($str[$i] == '(') {
                    $started = true;
                    $brackets++;
                    $opened++;
                } else if ($str[$i] == ')') {
                    $closed++;
                    $brackets--;
                }
                if ($brackets == 0 && $started) {
                    $end_pos = $i + 1;
                    break;
                }
            }

            $cr_func = substr($str, $start_pos, $end_pos - $start_pos);
            $func = implode('function(', explode('create_function(\'', $cr_func, 2));
            //$func = substr_replace('create_function(\'', 'function(', $cr_func);
            //$func = str_replace('\',\'', ') {', $func);
            $func = implode(') {', explode('\',\'', $func, 2));
            $func = substr($func, 0, -2) . '}';
            $str = str_replace($cr_func, $func, $str);
        }
        return $str;
    }

    public static function calc($expr)
    {
        if (is_array($expr)) {
            $expr = $expr[0];
        }
        preg_match('~(chr|min|max|round)?\(([^\)]+)\)~msi', $expr, $expr_arr);
        if (@$expr_arr[1] == 'min' || @$expr_arr[1] == 'max') {
            return $expr_arr[1](explode(',', $expr_arr[2]));
        } elseif (@$expr_arr[1] == 'chr') {
            if ($expr_arr[2][0] === '(') {
                $expr_arr[2] = substr($expr_arr[2], 1);
            }
            $expr_arr[2] = self::calc($expr_arr[2]);
            return $expr_arr[1](intval($expr_arr[2]));
        } elseif (@$expr_arr[1] == 'round') {
            $expr_arr[2] = self::calc($expr_arr[2]);
            return $expr_arr[1]($expr_arr[2]);
        } else {
            preg_match_all('~([\d\.a-fx]+)([\*\/\-\+\^\|\&])?~', $expr, $expr_arr);
            foreach ($expr_arr[1] as &$expr_arg) {
                if (strpos($expr_arg, "0x")!==false) {
                    $expr = str_replace($expr_arg, hexdec($expr_arg), $expr);
                    $expr_arg = hexdec($expr_arg);
                }
            }
            if (in_array('*', $expr_arr[2]) !== false) {
                $pos = array_search('*', $expr_arr[2]);
                $res = $expr_arr[1][$pos] * $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('/', $expr_arr[2]) !== false) {
                $pos = array_search('/', $expr_arr[2]);
                $res = $expr_arr[1][$pos] / $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '/' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '/' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('-', $expr_arr[2]) !== false) {
                $pos = array_search('-', $expr_arr[2]);
                $res = $expr_arr[1][$pos] - $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('+', $expr_arr[2]) !== false) {
                $pos = array_search('+', $expr_arr[2]);
                $res = $expr_arr[1][$pos] + $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('^', $expr_arr[2]) !== false) {
                $pos = array_search('^', $expr_arr[2]);
                $res = $expr_arr[1][$pos] ^ $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('|', $expr_arr[2]) !== false) {
                $pos = array_search('|', $expr_arr[2]);
                $res = $expr_arr[1][$pos] | $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('&', $expr_arr[2]) !== false) {
                $pos = array_search('&', $expr_arr[2]);
                $res = $expr_arr[1][$pos] & $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } else {
                return $expr;
            }

            return $expr;
        }
    }

    public static function getEvalCode($string)
    {
        preg_match("/eval\(([^\)]+)\)/msi", $string, $matches);
        return (empty($matches)) ? '' : end($matches);
    }

    public static function getTextInsideQuotes($string)
    {
        if (preg_match_all('/("(.*)")/msi', $string, $matches)) {
            return @end(end($matches));
        } elseif (preg_match_all('/\((\'(.*)\')/msi', $string, $matches)) {
            return @end(end($matches));
        } else {
            return '';
        }
    }

    public static function getNeedles($string)
    {
        preg_match_all("/'(.*?)'/msi", $string, $matches);

        return (empty($matches)) ? [] : $matches[1];
    }

    public static function getHexValues($string)
    {
        preg_match_all('/0x[a-fA-F0-9]{1,8}/msi', $string, $matches);
        return (empty($matches)) ? [] : $matches[0];
    }

    public static function formatPHP($string)
    {
        $string = str_replace('<?php', '', $string);
        $string = str_replace('?>', '', $string);
        $string = str_replace(PHP_EOL, "", $string);
        $string = str_replace(";", ";\n", $string);
        $string = str_replace("}", "}\n", $string);
        return $string;
    }

    public static function detect_utf_encoding($text)
    {
        $first2 = substr($text, 0, 2);
        $first3 = substr($text, 0, 3);
        $first4 = substr($text, 0, 4);

        if ($first4 == chr(0x00) . chr(0x00) . chr(0xFE) . chr(0xFF)) {
            return 'UTF-32BE';
        } elseif ($first4 == chr(0xFF) . chr(0xFE) . chr(0x00) . chr(0x00)) {
            return 'UTF-32LE';
        } elseif ($first2 == chr(0xFE) . chr(0xFF)) {
            return 'UTF-16BE';
        } elseif ($first2 == chr(0xFF) . chr(0xFE)) {
            return 'UTF-16LE';
        }

        return false;
    }

    //from sample_16
    public static function someDecoder($str)
    {
        $str = base64_decode($str);
        $TC9A16C47DA8EEE87 = 0;
        $TA7FB8B0A1C0E2E9E = 0;
        $T17D35BB9DF7A47E4 = 0;
        $T65CE9F6823D588A7 = (ord($str[1]) << 8) + ord($str[2]);
        $i = 3;
        $T77605D5F26DD5248 = 0;
        $block = 16;
        $T7C7E72B89B83E235 = "";
        $T43D5686285035C13 = "";
        $len = strlen($str);

        $T6BBC58A3B5B11DC4 = 0;

        for (; $i < $len;) {
            if ($block == 0) {
                $T65CE9F6823D588A7 = (ord($str[$i++]) << 8);
                $T65CE9F6823D588A7 += ord($str[$i++]);
                $block = 16;
            }
            if ($T65CE9F6823D588A7 & 0x8000) {
                $TC9A16C47DA8EEE87 = (ord($str[$i++]) << 4);
                $TC9A16C47DA8EEE87 += (ord($str[$i]) >> 4);
                if ($TC9A16C47DA8EEE87) {
                    $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) & 0x0F) + 3;
                    for ($T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E; $T17D35BB9DF7A47E4++) {
                        $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4] =
                            $T7C7E72B89B83E235[$T77605D5F26DD5248 - $TC9A16C47DA8EEE87 + $T17D35BB9DF7A47E4];
                    }
                    $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E;
                } else {
                    $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) << 8);
                    $TA7FB8B0A1C0E2E9E += ord($str[$i++]) + 16;
                    for ($T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E;
                         $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4++] = $str[$i]) {
                    }
                    $i++;
                    $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E;
                }
            } else {
                $T7C7E72B89B83E235[$T77605D5F26DD5248++] = $str[$i++];
            }
            $T65CE9F6823D588A7 <<= 1;
            $block--;
            if ($i == $len) {
                $T43D5686285035C13 = $T7C7E72B89B83E235;
                if (is_array($T43D5686285035C13)) {
                    $T43D5686285035C13 = implode($T43D5686285035C13);
                }
                $T43D5686285035C13 = "?" . ">" . $T43D5686285035C13;
                return $T43D5686285035C13;
            }
        }
    }
    //

    public static function someDecoder2($WWAcmoxRAZq, $sBtUiFZaz)   //sample_05
    {
        $JYekrRTYM = str_rot13(gzinflate(str_rot13(base64_decode('y8svKCwqLiktK6+orFdZV0FWWljPyMzKzsmNNzQyNjE1M7ewNAAA'))));
        if ($WWAcmoxRAZq == 'asedferg456789034689gd') {
            $cEerbvwKPI = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[17] . $JYekrRTYM[4] . $JYekrRTYM[21];
            return $cEerbvwKPI($sBtUiFZaz);
        } elseif ($WWAcmoxRAZq == 'zfcxdrtgyu678954ftyuip') {
            $JWTDeUKphI = $JYekrRTYM[1] . $JYekrRTYM[0] . $JYekrRTYM[18] . $JYekrRTYM[4] . $JYekrRTYM[32] .
                $JYekrRTYM[30] . $JYekrRTYM[26] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] .
                $JYekrRTYM[3] . $JYekrRTYM[4];
            return $JWTDeUKphI($sBtUiFZaz);
        } elseif ($WWAcmoxRAZq == 'gyurt456cdfewqzswexcd7890df') {
            $rezmMBMev = $JYekrRTYM[6] . $JYekrRTYM[25] . $JYekrRTYM[8] . $JYekrRTYM[13] . $JYekrRTYM[5] . $JYekrRTYM[11] . $JYekrRTYM[0] . $JYekrRTYM[19] . $JYekrRTYM[4];
            return $rezmMBMev($sBtUiFZaz);
        } elseif ($WWAcmoxRAZq == 'zcdfer45dferrttuihvs4321890mj') {
            $WbbQXOQbH = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[26] . $JYekrRTYM[17] . $JYekrRTYM[14] . $JYekrRTYM[19] . $JYekrRTYM[27] . $JYekrRTYM[29];
            return $WbbQXOQbH($sBtUiFZaz);
        } elseif ($WWAcmoxRAZq == 'zsedrtre4565fbghgrtyrssdxv456') {
            $jPnPLPZcMHgH = $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[13] . $JYekrRTYM[21] . $JYekrRTYM[4] . $JYekrRTYM[17] . $JYekrRTYM[19] . $JYekrRTYM[26] . $JYekrRTYM[20] . $JYekrRTYM[20] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[3] . $JYekrRTYM[4];
            return $jPnPLPZcMHgH($sBtUiFZaz);
        }
    }

    public static function someDecoder3($str)
    {
        $l = base64_decode($str);
        $lllllll = 0;
        $lllll = 3;
        $llllll = (ord($l[1]) << 8) + ord($l[2]);
        $lllllllll = 16;
        $llllllll = [];
        for ($lllllMax = strlen($l); $lllll < $lllllMax;) {
            if ($lllllllll == 0) {
                $llllll = (ord($l[$lllll++]) << 8);
                $llllll+= ord($l[$lllll++]);
                $lllllllll = 16;
            }
            if ($llllll & 0x8000) {
                $lll = (ord($l[$lllll++]) << 4);
                $lll+= (ord($l[$lllll]) >> 4);
                if ($lll) {
                    $ll = (ord($l[$lllll++]) & 0x0f) + 3;
                    for ($llll = 0;$llll < $ll;$llll++) $llllllll[$lllllll + $llll] = $llllllll[$lllllll - $lll + $llll];
                    $lllllll+= $ll;
                } else {
                    $ll = (ord($l[$lllll++]) << 8);
                    $ll+= ord($l[$lllll++]) + 16;
                    for ($llll = 0;$llll < $ll;$llllllll[$lllllll + $llll++] = ord($l[$lllll]));
                    $lllll++;
                    $lllllll+= $ll;
                }
            } else {
                $llllllll[$lllllll++] = ord($l[$lllll++]);
            }
            $llllll <<= 1;
            $lllllllll--;
        }
        $lllll = 0;
        $lllllllll="?".chr(62);
        $llllllllll = "";
        for (;$lllll < $lllllll;) {
            $llllllllll.= chr($llllllll[$lllll++] ^ 0x07);
        }
        $lllllllll.=$llllllllll.chr(60)."?";
        return $lllllllll;
    }

    public static function PHPJiaMi_decoder($str, $md5, $rand, $lower_range = '')
    {
        $md5_xor = md5($md5);
        $lower_range = !$lower_range ? ord($rand) : $lower_range;
        $layer1 = '';
        for ($i=0, $iMax = strlen($str); $i < $iMax; $i++) {
            $layer1 .= ord($str[$i]) < 245 ? ((ord($str[$i]) > $lower_range && ord($str[$i]) < 245) ? chr(ord($str[$i]) / 2) : $str[$i]) : '';
        }
        $layer1 = base64_decode($layer1);
        $result = '';
        $j = $len_md5_xor = strlen($md5_xor);
        for ($i=0, $iMax = strlen($layer1); $i < $iMax; $i++) {
            $j = $j ? $j : $len_md5_xor;
            $j--;
            $result .= $layer1[$i] ^ $md5_xor[$j];
        }
        return $result;
    }

    public static function someDecoder4($ae, $key)
    {
        $at = [];
        for ($i = 0, $iMax = strlen($key); $i < $iMax; $i++) {
            if ((int)$key[$i] > 0) {
                $at[$i] = $key[$i];
            }
        }
        $at = array_values($at);
        $str = "";
        for ($i = 0, $iMax = count($ae); $i < $iMax; $i++) {
            if ($i < count($ae) - 1) {
                $str .= str_replace(md5($at[$i]), "", $ae[$i]);
            } else {
                $str .= $ae[$i];
            }
        }
        return $str;
    }

    public static function OELoveDecoder($arg1, $arg2 = '')
    {
        if (empty($arg1)) {
            return '';
        }
        $arg1 = base64_decode($arg1);
        if ($arg2 == '') return ~$arg1;
        //if ($arg2 == '-1') @271552362217();
        $len = strlen($arg1);
        $arg2 = str_pad($arg2, $len, $arg2);
        return $arg2 ^ $arg1;
    }

    public static function stripsquoteslashes($str)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($str); $i < $iMax; $i++) {
            if (isset($str[$i+1]) && ($str[$i] == '\\' && ($str[$i+1] == '\\' || $str[$i+1] == '\''))) {
                continue;
            } else {
                $res .= $str[$i];
            }
        }
        return $res;
    }

    public static function isSafeFunc($str)
    {
        $safeFuncs = [
            'base64_decode', 'gzinflate', 'gzuncompress', 'strrev',
            'str_rot13', 'urldecode', 'rawurldecode', 'stripslashes',
            'htmlspecialchars_decode', 'convert_uudecode','pack',
            'str_repeat', 'sprintf', 'str_replace', 'strtr', 'hex2bin'
        ];
        return in_array(strtolower($str), $safeFuncs);

    }

    public static function aanKFMDigitsDecode($digits)
    {
        $res = '';
        $len = ceil(strlen($digits) / 3) * 3;
        $cipher = str_pad($digits, $len, '0', STR_PAD_LEFT);
        for ($i = 0; $i < (strlen($cipher) / 3);$i++) {
            $res .= chr(substr(strval($cipher), $i * 3, 3));
        }
        return $res;
    }

    public static function obf20200414_1_decrypt($data, $key)
    {
        $key = md5($key);
        $x = 0;
        $data = base64_decode($data);
        $len = strlen($data);
        $l = strlen($key);
        $char = '';
        for ($i = 0; $i < $len; $i++) {
            if ($x == $l) {
                $x = 0;
            }
            $char .= substr($key, $x, 1);
            $x++;
        }
        $str = '';
        for ($i = 0; $i < $len; $i++) {
            if (ord(substr($data, $i, 1)) < ord(substr($char, $i, 1))) {
                $str .= chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1)));
            } else {
                $str .= chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1)));
            }
        }
        return $str;
    }

    public static function Xtea_decrypt($text, $key)
    {
        $_key = '';
        $cbc = 1;

        if(is_array($key)) {
            $_key = $key;
        } else if(isset($key) && !empty($key)) {
            $_key = self::_str2long(str_pad($key, 16, $key));
        } else {
            $_key = [0, 0, 0, 0];
        }

        $plain = [];
        $cipher = self::_str2long(base64_decode($text));

        if($cbc == 1) {
            $i = 2;
        } else {
            $i = 0;
        }

        for ($i, $iMax = count($cipher); $i < $iMax; $i += 2) {
            $return = self::block_decrypt($cipher[$i], $cipher[$i+1], $_key);
            if($cbc == 1) {
                $plain[] = [$return[0] ^ $cipher[$i - 2], $return[1] ^ $cipher[$i - 1]];
            } else {
                $plain[] = $return;
            }
        }

        $output = "";
        for($i = 0, $iMax = count($plain); $i < $iMax; $i++) {
            $output .= self::_long2str($plain[$i][0]);
            $output .= self::_long2str($plain[$i][1]);
        }

        return $output;
    }

    public static function calculateMathStr($task)
    {
        $res = $task;

        while (preg_match('~\(?(\d+)([+\-*\/])(\d+)\)?~', $res, $subMatch)) {
            if (count($subMatch) === 4) {
                $subSearch = $subMatch[0];
                $operator = $subMatch[2];
                $number_1 = $subMatch[1];
                $number_2 = $subMatch[3];
                $res = str_replace($subSearch, self::calc("$number_1$operator$number_2"), $res);
            } else {
                return $res;
            }
        }

        return $res;
    }

    public static function decrypt_T_func($l)
    {
        $x2 = 256;
        $W2 = 8;
        $cY = [];
        $I3 = 0;
        $C4 = 0;
        for ($bs = 0; $bs < strlen($l); $bs++) {
            $I3 = ($I3 << 8) + ord($l[$bs]);
            $C4 += 8;
            if ($C4 >= $W2) {
                $C4 -= $W2;
                $cY[] = $I3 >> $C4;
                $I3 &= (1 << $C4) - 1;
                $x2++;
                if ($x2 >> $W2) {
                    $W2++;
                }
            }
        }
        $K5 = range("\x0", "\377");
        $UH = '';
        foreach ($cY as $bs => $xd) {
            if (!isset($K5[$xd])) {
                $iU = $Co . $Co[0];
            } else {
                $iU = $K5[$xd];
            }
            $UH .= $iU;
            if ($bs) {
                $K5[] = $Co . $iU[0];
            }
            $Co = $iU;
        }
        return $UH;
    }

    public static function getDecryptKeyForTinkleShell($size)
    {
        $bx = md5(base64_encode($size));
        $len = strlen($bx);
        $arr = [];
        for ($i = 0; $i < $len; $i++) {
            $arr[] = substr($bx, $i, 1);
        }
        $arr = array_unique($arr);
        $newstr = "";
        foreach ($arr as $k => $v) {
            $newstr .= $v;
        }
        if (strlen($newstr) < 9) {
            if (strpos($newstr, 'A') === false) {
                $newstr .= 'A';
            }
            if (strpos($newstr, 'B') === false) {
                $newstr .= 'B';
            }
            if (strpos($newstr, 'C') === false) {
                $newstr .= 'C';
            }
            if (strpos($newstr, 'D') === false) {
                $newstr .= 'D';
            }
            if (strpos($newstr, 'E') === false) {
                $newstr .= 'E';
            }
            if (strpos($newstr, 'F') === false) {
                $newstr .= 'F';
            }
            if (strpos($newstr, 'G') === false) {
                $newstr .= 'G';
            }
        }

       return strtoupper($newstr);
    }

    /**
     * For 4 args
     * @param array $arr
     *
     * @return string
     */
    public static function decodeEvalCreateFunc_1(array $arr) : string
    {
        $args = $arr;

        for ($i = 0; $i < 4; $i++) {
            for ($j = 0; $j < strlen($args[$i]); $j++) {
                $args[$i][$j] = chr(ord($args[$i][$j]) - ($i ? $args[$j xor $j] : 1));
            }
            if ($i == 2 && self::isSafeFunc($args[1]) && self::isSafeFunc($args[2])) {
                $args[3] = @$args[1](@$args[2]($args[3]));
            }
        }

        return $args[3];
    }

    /**
     * For 3 args
     * @param array $arr
     *
     * @return string
     */
    public static function decodeEvalCreateFunc_2(array $arr) : string
    {
        $args = $arr;

        for ($i = 0; $i < 3; $i++) {
            for ($j = 0; $j < strlen($args[$i]); $j++) {
                $args[$i][$j] = chr(ord($args[$i][$j]) - 1);
            }
            if ($i == 1 && self::isSafeFunc($args[0]) && self::isSafeFunc($args[1])) {
                $args[2] = @$args[0](@$args[1]($args[2]));
            }
        }

        return $args[2];
    }

    /**
     * @param string $dictionary
     * @param string $content
     *
     * @return array
     */
    public static function getVarsFromDictionary($dictionary, $content) : array
    {
        $vars = [];

        preg_match_all('~(\$(?:[^\w]+|\w+)=(\s?\.?\s?\$(?:[^\w]+|\w+)[{\[]\d+[\]}])+)~msi', $content, $concatMatches);
        for ($i = 0; $iMax = count($concatMatches[0]), $i <= $iMax; $i++) {
            preg_match_all('~(\$(?:[^\w]+|\w+)(=))?(\s?(\.?)\s?\$(?:[^\w]+|\w+)[{\[](\d+)[\]}])~msi',
                $concatMatches[0][$i], $varMatches);
            for ($j = 0; $jMax = count($varMatches[0]), $j < $jMax; $j++) {
                $varName = substr($varMatches[1][0], 0, -1);
                $value = $dictionary[(int)$varMatches[5][$j]] ?? '';

                if ($varMatches[2][$j] === '=') {
                    $vars[$varName] = $value;
                } else {
                    $vars[$varName] .= $value;
                }
            }
        }

        return $vars;
    }

    /**
     * @param string $str
     * @return string
     */
    public static function concatVariableValues($str) : string
    {
        preg_match_all('/\$\w+\s?(\.?)=\s?"([\w]+)"/', $str, $concatVars);

        $strVar = "";

        foreach ($concatVars[2] as $index => $concatVar) {
            if ($concatVars[1][$index] === '.') {
                $strVar .= $concatVar;
            } else {
                $strVar = $concatVar;
            }
        }

        return $strVar;
    }

    /**
     * Concats simple str without variable
     *
     * @param string $str
     * @return string
     */
    public static function concatStr($str) : string
    {
        preg_match_all('~(\.?)[\'"](\w+)[\'"]~msi', $str, $concatStrings);

        $strVar = "";

        foreach ($concatStrings[2] as $index => $concatString) {
            if ($concatStrings[1][$index] === '.') {
                $strVar .= $concatString;
            } else {
                $strVar = $concatString;
            }
        }

        return $strVar;
    }

    /**
     * @param $dictionaryVar
     * @param $dictionaryValue
     * @param $str
     *
     * @return string
     */
    public static function replaceVarsFromDictionary($dictionaryVar, $dictionaryValue, $str) : string
    {
        $dictionaryName = $dictionaryVar[0] === '$' ? ('\\' . $dictionaryVar) : $dictionaryVar;
        $result = $str;

        if (preg_match('~\$GLOBALS\[([\'"]\w+[\'"])\]~msi', $dictionaryVar, $match)) {
            $dictionaryName = '\$GLOBALS\[' . $match[1] . '\]';
        }

        $result = preg_replace_callback(
            '~(?:' . $dictionaryName . '\[(?:\d+)\]\s?\.?\s?)+~msi',
            function ($match) use ($dictionaryValue) {
                preg_match_all('~\]?\[(\d+)\]\.?~msi', $match[0], $varsMatch);

                $result = "";

                foreach ($varsMatch[1] as $index) {
                    $result .= $dictionaryValue[(int)$index];
                }


                return "'$result'";
            },
            $result
        );

        return $result;
    }

    /**
     * Collects simple or concated vars from str
     * @param string $str
     * @param string $trimQuote
     *
     * @return array
     */
    public static function collectVars($str, string $trimQuote = '"') : array
    {
        $vars = [];

        preg_match_all('~(\$\w+)\s?=\s?(["\'\w%\.\/\s\+\/\\\\]+)~msi', $str, $matches);

        foreach ($matches[1] as $index => $match) {
            $vars[$match] = str_replace("$trimQuote.$trimQuote", '', $matches[2][$index]);
            $vars[$match] = stripcslashes(trim($vars[$match], $trimQuote));
        }

        return $vars;
    }

    /**
     * Collects simple or concated str
     * @param string $str
     * @param string $trimQuote
     *
     * @return string
     */
    public static function collectStr($str, string $trimQuote = '"') : string
    {
        preg_match('~["\'\w%=\.]+~msi', $str, $match);

        $str = str_replace("$trimQuote.$trimQuote", '', $match[0]);
        $str = trim($str, $trimQuote);

        return $str;
    }

    /**
     * Collects function wrapped vars with one arg from str
     * ex. var1 = base64_decode(str1); var2 = gzinflate(str2); and etc.
     *
     * @param string $str
     *
     * @return array
     */
    public static function collectFuncVars(string $str): array
    {
        $vars = [];

        preg_match_all('~(\$\w+)\s*=\s*(\w+)\([\'"]([\w+/=]+)[\'"]\);~msi', $str, $matches);

        foreach ($matches[1] as $index => $match) {
            $func = $matches[2][$index];
            $str = $matches[3][$index];

            if (self::isSafeFunc($func)) {
                $str = @$func($str);
            }
            $vars[$match] = self::isSafeFunc($str) ? $str : "'$str'";
        }

        return $vars;
    }

    /**
     * @param array  $vars
     * @param string $str
     *
     * @return string
     */
    public static function replaceVarsFromArray(array $vars, string $str) : string
    {
        $result = $str;

        uksort($vars, function($a, $b) {
            return strlen($b) <=> strlen($a);
        });

        foreach ($vars as $name => $value) {
            $result = str_replace($name, $value, $result);
        }

        return $result;
    }

    /**
     * @param $str
     * @return array
     */
    public static function collectVarsChars($str)
    {
        $vars = [];
        preg_match_all('~(\$\w+)=\'(\w)\';~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $m) {
            $vars[$m[1]] = $m[2];
        }
        return $vars;
    }

    /**
     * @param $chars
     * @param $str
     * @return array
     */
    public static function assembleStrings($chars, $str)
    {
        $vars = [];
        foreach($chars as $var => $char) {
            $str = str_replace($var, '\'' . $char . '\'', $str);
        }
        $vars = self::collectVars($str, '\'');
        return $vars;
    }

    private static function block_decrypt($y, $z, $key)
    {
        $delta = 0x9e3779b9;
        $sum = 0xC6EF3720;
        $n = 32;

        for ($i = 0; $i < 32; $i++) {
            $z = self::_add($z, -(self::_add($y << 4 ^ self::_rshift($y, 5), $y)
                ^ self::_add($sum, $key[self::_rshift($sum, 11) & 3])));
            $sum = self::_add($sum, -$delta);
            $y = self::_add($y, -(self::_add($z << 4 ^ self::_rshift($z, 5), $z)
                ^ self::_add($sum, $key[$sum & 3])));

        }
        return [$y, $z];
    }

    private static function _rshift($integer, $n)
    {
        if (0xffffffff < $integer || -0xffffffff > $integer) {
            $integer = fmod($integer, 0xffffffff + 1);
        }

        if (0x7fffffff < $integer) {
            $integer -= 0xffffffff + 1.0;
        } else if (-0x80000000 > $integer) {
            $integer += 0xffffffff + 1.0;
        }

        if (0 > $integer) {
            $integer &= 0x7fffffff;
            $integer >>= $n;
            $integer |= 1 << (31 - $n);
        } else {
            $integer >>= $n;
        }
        return $integer;
    }

    private static function _add($i1, $i2)
    {
        $result = 0.0;

        foreach (func_get_args() as $value) {
            if (0.0 > $value) {
                $value -= 1.0 + 0xffffffff;
            }
            $result += $value;
        }

        if (0xffffffff < $result || -0xffffffff > $result) {
            $result = fmod($result, 0xffffffff + 1);
        }

        if (0x7fffffff < $result) {
            $result -= 0xffffffff + 1.0;
        } else if (-0x80000000 > $result) {
            $result += 0xffffffff + 1.0;
        }
        return $result;
    }

    private static function _str2long($data)
    {
        $tmp = unpack('N*', $data);
        $data_long = [];
        $j = 0;

        foreach ($tmp as $value) $data_long[$j++] = $value;
        return $data_long;
    }

    private static function _long2str($l){
        return pack('N', $l);
    }

    ///////////////////////////////////////////////////////////////////////////
}




///////////////////////////////////////////////////////////////////////////

function parseArgs($argv)
{
    array_shift($argv);
    $o = [];
    foreach ($argv as $a) {
        if (substr($a, 0, 2) == '--') {
            $eq = strpos($a, '=');
            if ($eq !== false) {
                $o[substr($a, 2, $eq - 2)] = substr($a, $eq + 1);
            } else {
                $k = substr($a, 2);
                if (!isset($o[$k])) {
                    $o[$k] = true;
                }
            }
        } else {
            if (substr($a, 0, 1) == '-') {
                if (substr($a, 2, 1) == '=') {
                    $o[substr($a, 1, 1)] = substr($a, 3);
                } else {
                    foreach (str_split(substr($a, 1)) as $k) {
                        if (!isset($o[$k])) {
                            $o[$k] = true;
                        }
                    }
                }
            } else {
                $o[] = $a;
            }
        }
    }
    return $o;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
// cli handler
if (!defined('AIBOLIT_START_TIME') && !defined('PROCU_CLEAN_DB') && @strpos(__FILE__, @$argv[0])!==false) {

    set_time_limit(0);
    ini_set('max_execution_time', '900000');
    ini_set('realpath_cache_size', '16M');
    ini_set('realpath_cache_ttl', '1200');
    ini_set('pcre.backtrack_limit', '1000000');
    ini_set('pcre.recursion_limit', '12500');
    ini_set('pcre.jit', '1');
    $options = parseArgs($argv);
    $str = php_strip_whitespace($options[0]);
    $str2 = file_get_contents($options[0]);
    $l_UnicodeContent = Helpers::detect_utf_encoding($str);
    $l_UnicodeContent2 = Helpers::detect_utf_encoding($str2);
    if ($l_UnicodeContent !== false) {
        if (function_exists('iconv')) {
            $str = iconv($l_UnicodeContent, "UTF-8", $str);
            $str2 = iconv($l_UnicodeContent2, "UTF-8", $str2);
        }
    }
    $d = new Deobfuscator($str, $str2);
    $start = microtime(true);
    $deobf_type = $d->getObfuscateType($str);
    if ($deobf_type != '') {
        $str = $d->deobfuscate();
    }
    $code = $str;
    if (isset($options['prettyprint'])) {
        $code = Helpers::normalize($code);
        $code = Helpers::format($code);
    }
    if ($l_UnicodeContent !== false) {
        if (function_exists('iconv')) {
            $code = iconv('UTF-8', $l_UnicodeContent . '//IGNORE', $code);
        }
    }
    echo $code;
    echo "\n";
    //echo 'Execution time: ' . round(microtime(true) - $start, 4) . ' sec.';
}

class Deobfuscator
{
    private $signatures = [
        [
            'full' => '~for\((\$\w{1,40})=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);(if\(isset\(\$_(GET|REQUEST|POST|COOKIE)\[[\'"][^\'"]+[\'"]\]\)\)\{[^}]+;\})?~msi',
            'fast' => '~for\((\$\w{1,40})=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);~msi',
            'id'   => 'parenthesesString',
        ],
        [
            'full' => '~(?(DEFINE)(?\'c\'(?:/\*\w+\*/)*))(\$\w+)\s*=\s*basename(?&c)\((?&c)trim(?&c)\((?&c)preg_replace(?&c)\((?&c)rawurldecode(?&c)\((?&c)"[%0-9A-F\.]+"(?&c)\)(?&c),\s*\'\',\s*__FILE__(?&c)\)(?&c)\)(?&c)\)(?&c);(\$\w+)\s*=\s*"([%\w\.\-\~]+)";(?:(\$\w+)=[^;]+;\5(?&c)\((?&c)\'\',\s*\'};\'\s*\.\s*(?&c)\()?(?:eval(?&c)\()?(?&c)rawurldecode(?&c)\((?&c)\3(?&c)\)(?&c)\s*\^\s*substr(?&c)\((?&c)str_repeat(?&c)\((?&c)\2,\s*(?&c)\((?&c)strlen(?&c)\((?&c)\3(?&c)\)(?&c)/strlen(?&c)\((?&c)\2(?&c)\)(?&c)\)(?&c)\s*\+\s*1(?&c)\)(?&c),\s*0,(?&c)\s*strlen(?&c)\((?&c)\3(?&c)\)(?&c)\)(?&c)\)(?:(?&c)\s*\.\s*\'{\'(?&c)\))?(?&c);~msi',
            'fast' => '~(?(DEFINE)(?\'c\'(?:/\*\w+\*/)*))(\$\w+)\s*=\s*basename(?&c)\((?&c)trim(?&c)\((?&c)preg_replace(?&c)\((?&c)rawurldecode(?&c)\((?&c)"[%0-9A-F\.]+"(?&c)\)(?&c),\s*\'\',\s*__FILE__(?&c)\)(?&c)\)(?&c)\)(?&c);(\$\w+)\s*=\s*"([%\w\.\-\~]+)";(?:(\$\w+)=[^;]+;\5(?&c)\((?&c)\'\',\s*\'};\'\s*\.\s*(?&c)\()?(?:eval(?&c)\()?(?&c)rawurldecode(?&c)\((?&c)\3(?&c)\)(?&c)\s*\^\s*substr(?&c)\((?&c)str_repeat(?&c)\((?&c)\2,\s*(?&c)\((?&c)strlen(?&c)\((?&c)\3(?&c)\)(?&c)/strlen(?&c)\((?&c)\2(?&c)\)(?&c)\)(?&c)\s*\+\s*1(?&c)\)(?&c),\s*0,(?&c)\s*strlen(?&c)\((?&c)\3(?&c)\)(?&c)\)(?&c)\)(?:(?&c)\s*\.\s*\'{\'(?&c)\))?(?&c);~msi',
            'id'   => 'xorFName',
        ],
        [
            'full' => '~(\$\w{1,40})=base64_decode\(\'[^\']+\'\);(\$\w+)=base64_decode\(\'[^\']+\'\);(\$\w+)=base64_decode\(\'([^\']+)\'\);eval\(\1\(gzuncompress\(\2\(\3\)\)\)\);~msi',
            'fast' => '~(\$\w{1,40})=base64_decode\(\'[^\']+\'\);(\$\w+)=base64_decode\(\'[^\']+\'\);(\$\w+)=base64_decode\(\'([^\']+)\'\);eval\(\1\(gzuncompress\(\2\(\3\)\)\)\);~msi',
            'id'   => 'phpMess',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\"([^\"]+)\";\s*\$\w+\s*=\s*\$\w+\(\1,\"[^\"]+\",\"[^\"]+\"\);\s*\$\w+\(\"[^\"]+\",\"[^\"]+\",\"\.\"\);~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\"([^\"]+)\";\s*\$\w+\s*=\s*\$\w+\(\1,\"[^\"]+\",\"[^\"]+\"\);\s*\$\w+\(\"[^\"]+\",\"[^\"]+\",\"\.\"\);~msi',
            'id'   => 'pregReplaceSample05',
        ],


        [
            'full' => '~(\$\w{1,40})\s*=\s*\w+\(\'.+?\'\);\s*(\$\w+)\s*=\s*\w+\(\'.+?\'\);\s*(\$\w+)\s*=\s*\"([^\"]+)\";\s*(\$\w+)\s*=\s*.+?;\s*\2\(\5,\"[^\']+\'\3\'[^\"]+\",\"\.\"\);~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\w+\(\'.+?\'\);\s*(\$\w+)\s*=\s*\w+\(\'.+?\'\);\s*(\$\w+)\s*=\s*\"([^\"]+)\";\s*(\$\w+)\s*=\s*.+?;\s*\2\(\5,\"[^\']+\'\3\'[^\"]+\",\"\.\"\);~msi',
            'id'   => 'pregReplaceB64',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\'([^\']+)\';\s*\1\s*=\s*gzinflate\s*\(base64_decode\s*\(\1\)\);\s*\1\s*=\s*str_replace\s*\(\"__FILE__\",\"\'\$\w+\'\",\1\);\s*eval\s*\(\1\);~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\'([^\']+)\';\s*\1\s*=\s*gzinflate\s*\(base64_decode\s*\(\1\)\);\s*\1\s*=\s*str_replace\s*\(\"__FILE__\",\"\'\$\w+\'\",\1\);\s*eval\s*\(\1\);~msi',
            'id'   => 'GBE',
        ],
        [
            'full' => '~(\$GLOBALS\[\s*[\'"]_+\w{1,60}[\'"]\s*\])\s*=\s*\s*array\s*\(\s*base64_decode\s*\(.+?((.+?\1\[\d+\]).+?)+[^;]+;(\s*include\(\$_\d+\);)?}?((.+?___\d+\(\d+\))+[^;]+;)?(.*?(\$[a-z]+).+\8_\d+;)?(echo\s*\$\w+;})?}?~msi',
            'fast' => '~\$GLOBALS\[\s*[\'"]_+\w{1,60}[\'"]\s*\]\s*=\s*\s*array\s*\(\s*base64_decode\s*\(~msi',
            'id'   => 'Bitrix',
        ],
        [
            'full' => '~\$\w{1,40}\s*=\s*(__FILE__|__LINE__);\s*\$\w{1,40}\s*=\s*(\d+);\s*eval(\s*\()+\$?\w+\s*\([\'"][^\'"]+[\'"](\s*\))+;\s*return\s*;\s*\?>(.+)~msi',
            'fast' => '~\$\w{1,40}\s*=\s*(__FILE__|__LINE__);\s*\$\w{1,40}\s*=\s*(\d+);\s*eval(\s*\()+\$?\w+\s*\([\'"][^\'"]+[\'"](\s*\))+;\s*return\s*;\s*\?>(.+)~msi',
            'id'   => 'B64inHTML',
        ],
        [
            'full' => '~(?:\$[O0]*=__FILE__;)?\$[O0]*=urldecode\(\'[%a-f0-9]+\'\);(\$(GLOBALS\[\')?[O0]*(\'\])?=(\d+);)?\s*(\$(GLOBALS\[\')?[O0]*(\'\])?\.?=(\$(GLOBALS\[\')?[O0]*(\'\])?([\{\[]\d+[\}\]])?\.?)+;)+[^\?]+\?\>[\s\w\~\=\/\+\\\\\^\{\`\%]+~msi',
            'fast' => '~(?:\$[O0]*=__FILE__;)?\$[O0]*=urldecode\(\'[%a-f0-9]+\'\);(?:\$(GLOBALS\[\')?[O0]*(?:\'\])?=\d+;)?\s*(?:\$(?:GLOBALS\[\')?[O0]*(?:\'\])?\.?=(?:\$(?:GLOBALS\[\')?[O0]*(?:\'\])?(?:[\{\[]\d+[\}\]])?\.?)+;)+[^\?]+\?\>[\s\w\~\=\/\+\\\\\^\{\`\%]+~msi',
            'id'   => 'LockIt',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\s*@?eval\s*\(\1\s*\([^\)]+\)+\s*;~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\s*@?eval\s*\(\1\s*\(~msi',
            'id'   => 'FOPO',
        ],
        [
            'full' => '~\$_F=__FILE__;\$_X=\'([^\']+\');eval\([^\)]+\)+;~msi',
            'fast' => '~\$_F=__FILE__;\$_X=\'([^\']+\');eval\(~ms',
            'id'   => 'ByteRun',
        ],
        [
            'full' => '~(\$\w{1,40}=\'[^\']+\';\s*)+(\$[\w{1,40}]+)=(urldecode|base64_decode){0,1}\(?[\'"]([\w+%=-]+)[\'"]\)?;(\$[\w+]+=(\$(\w+\[\')?[O_0]*(\'\])?([\{\[]\d+[\}\]])?\.?)+;)+[^\?]+(\?\>[\w\~\=\/\+]+|.+\\\\x[^;]+;)~msi',
            'fast' => '~(\$\w{1,40}=\'[^\']+\';\s*)+(\$[\w{1,40}]+)=(urldecode|base64_decode){0,1}\(?[\'"]([\w+%=-]+)[\'"]\)?;(\$[\w+]+=(\$(\w+\[\')?[O_0]*(\'\])?([\{\[]\d+[\}\]])?\.?)+;)+[^\?]+(\?\>[\w\~\=\/\+]+|.+\\\\x[^;]+;)~msi',
            'id'   => 'Urldecode',
        ],
        [
            'full' => '~(\$[\w{1,40}]+)=(urldecode|base64_decode)\(?[\'"]([\w+%=-]+)[\'"]\);(\s*\$\w+\.?=(\$\w+\{\d+\}\s*[\.;]?\s*)+)+((\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*\d,\s]+);|(eval\(\$\w+\([\'"]([^\'"]+)[\'"]\)+;))~msi',
            'fast' => '~(\$[\w{1,40}]+)=(urldecode|base64_decode)\(?[\'"]([\w+%=-]+)[\'"]\);(\s*\$\w+\.?=(\$\w+\{\d+\}\s*[\.;]?\s*)+)+((\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*\d,\s]+);|(eval\(\$\w+\([\'"]([^\'"]+)[\'"]\)+;))~msi',
            'id'   => 'UrlDecode2',
        ],
        [
            'full' => '~explode\(\"\*\*\*\",\s*\$\w+\);\s*eval\(eval\(\"return strrev\(base64_decode\([^\)]+\)+;~msi',
            'fast' => '~explode\(\"\*\*\*\",\s*\$\w+\);\s*eval\(eval\(\"return strrev\(base64_decode\(~msi',
            'id'   => 'cobra',
        ],
        [
            'full' => '~\$[O0]+=\(base64_decode\(strtr\(fread\(\$[O0]+,(\d+)\),\'([^\']+)\',\'([^\']+)\'\)\)\);eval\([^\)]+\)+;~msi',
            'fast' => '~\$[O0]+=\(base64_decode\(strtr\(fread\(\$[O0]+,(\d+)\),\'([^\']+)\',\'([^\']+)\'\)\)\);eval\(~msi',
            'id'   => 'strtrFread',
        ],
        [
            'full' => '~if\s*\(\!extension_loaded\(\'IonCube_loader\'\)\).+pack\(\"H\*\",\s*\$__ln\(\"/\[A-Z,\\\\r,\\\\n\]/\",\s*\"\",\s*substr\(\$__lp,\s*([0-9a-fx]+\-[0-9a-fx]+)\)\)\)[^\?]+\?\>\s*[0-9a-z\r\n]+~msi',
            'fast' => '~IonCube_loader~ms',
            'id'   => 'FakeIonCube',
        ],
        [
            'full' => '~(\$\w{1,40})="([\w\]\[\<\&\*\_+=/]{300,})";\$\w+=\$\w+\(\1,"([\w\]\[\<\&\*\_+=/]+)","([\w\]\[\<\&\*\_+=/]+)"\);~msi',
            'fast' => '~(\$\w{1,40})="([\w\]\[\<\&\*\_+=/]{300,})";\$\w+=\$\w+\(\1,"([\w\]\[\<\&\*\_+=/]+)","([\w\]\[\<\&\*\_+=/]+)"\);~msi',
            'id'   => 'strtrBase64',
        ],
        [
            'full' => '~\$\w+\s*=\s*array\((\'[^\']+\',?)+\);\s*.+?(\$_\w{1,40}\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\2\[[a-fx\d]+\])\(\);(.+?\2)+.+}~msi',
            'fast' => '~(\$_\w{1,40}\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\1\[[a-fx\d]+\])\(\);~msi',
            'id'   => 'explodeSubst',
        ],
        [
            'full' => '~(\$[\w{1,40}]+)\s*=\s*\'([\w+%=\-\#\\\\\'\*]+)\';(\$[\w+]+)\s*=\s*Array\(\);(\3\[\]\s*=\s*(\1\[\d+\]\.?)+;+)+(.+\3)[^}]+}~msi',
            'fast' => '~(\$[\w{1,40}]+)\s*=\s*\'([\w+%=\-\#\\\\\'\*]+)\';(\$[\w+]+)\s*=\s*Array\(\);(\3\[\]\s*=\s*(\1\[\d+\]\.?)+;+)+~msi',
            'id'   => 'subst',
        ],
        [
            'full' => '~if\(!function_exists\(\"(\w+)\"\)\){function \1\(.+?eval\(\1\(\"[^\"]+\"\)\);~msi',
            'fast' => '~if\(!function_exists\(\"(\w+)\"\)\){function \1\(.+?eval\(\1\(\"[^\"]+\"\)\);~msi',
            'id'   => 'decoder',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\"riny\(\"\.(\$\w+)\(\"base64_decode\"\);\s*(\$\w+)\s*=\s*\2\(\1\.\'\("([^"]+)"\)\);\'\);\s*\$\w+\(\3\);~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\"riny\(\"\.(\$\w+)\(\"base64_decode\"\);\s*(\$\w+)\s*=\s*\2\(\1\.\'\("([^"]+)"\)\);\'\);\s*\$\w+\(\3\);~msi',
            'id'   => 'GBZ',
        ],
        [
            'full' => '~\$\w+\s*=\s*\d+;\s*\$GLOBALS\[\'[^\']+\'\]\s*=\s*Array\(\);\s*global\s*\$\w+;(\$\w{1,40})\s*=\s*\$GLOBALS;\$\{"\\\\x[a-z0-9\\\\]+"\}\[(\'\w+\')\]\s*=\s*\"(([^\"\\\\]|\\\\.)*)\";\1\[(\1\[\2\]\[\d+\].?).+?exit\(\);\}+~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\$GLOBALS;\$\{"\\\\x[a-z0-9\\\\]+"\}\[(\'\w+\')\]\s*=\s*\"(([^\"\\\\]|\\\\.)*)\";\1\[(\1\[\2\]\[\d+\].?)~msi',
            'id'   => 'globalsArray',
        ],
        [
            'full' => '~(\${(["\w\\\\]+)}\[["\w\\\\]+\]=["\w\\\\]+;)+((\${\${(["\w\\\\]+)}\[["\w\\\\]+\]}).?=((urldecode\(["%\w]+\);)|(\${\${["\w\\\\]+}\[["\w\\\\]+\]}{\d+}.?)+;))+eval\(\${\${["\w\\\\]+}\[["\w\\\\]+\]}\(["\w+=]+\)\);~msi',
            'fast' => '~(\${(["\w\\\\]+)}\[["\w\\\\]+\]=["\w\\\\]+;)+((\${\${(["\w\\\\]+)}\[["\w\\\\]+\]}).?=((urldecode\(["%\w]+\);)|(\${\${["\w\\\\]+}\[["\w\\\\]+\]}{\d+}.?)+;))+eval\(\${\${["\w\\\\]+}\[["\w\\\\]+\]}\(["\w+=]+\)\);~msi',
            'id'   => 'xbrangwolf',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\'(\\\\.|[^\']){0,100}\';\s*\$\w+\s*=\s*\'(\\\\.|[^\']){0,100}\'\^\1;[^)]+\)+;\s*\$\w+\(\);~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\'(\\\\.|[^\']){0,100}\';\s*\$\w+\s*=\s*\'(\\\\.|[^\']){0,100}\'\^\1;~msi',
            'id'   => 'xoredVar',
        ],
        [
            'full' => '~\$\w{1,40}=\'[^\']{0,100}(?:\'\^\')?[^\']*\';(?:\$\w{1,40}=\w{1,3};)?(?:\$\w{1,40}=\'[^\']+(?:\'\^\')?[^\']*\';)+\w{1,40};(?:.{0,6000}?)if\(\$\w{1,40}==\$\w{1,40}\(\$\w{1,40}\)\){(?:.{0,6000}?)\w{1,40};\s?\$\w{1,40}\(\'[^\']{0,100}\',\'[^\']{0,100}\'\);\'[^\']{0,100}\';~msi',
            'fast' => '~\$\w{1,40}=\'[^\']{0,100}(?:\'\^\')?[^\']*\';(?:\$\w{1,40}=\w{1,3};)?(?:\$\w{1,40}=\'[^\']+(?:\'\^\')?[^\']*\';)+\w{1,40};(?:.{0,6000}?)if\(\$\w{1,40}==\$\w{1,40}\(\$\w{1,40}\)\)~msi',
            'id'   => 'xoredVar',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\'([^\']*)\';\s*(\$\w{1,40})\s*=\s*explode\s*\((chr\s*\(\s*\(\d+\-\d+\)\)),substr\s*\(\1,\s*\((\d+\-\d+)\),\s*\(\s*(\d+\-\d+)\)\)\);\s*(\$\w{1,40})\s*=\s*\3\[\d+\]\s*\(\3\[\s*\(\d+\-\d+\)\]\);\s*(\$\w{1,40})\s*=\s*\3\[\d+\]\s*\(\3\[\s*\(\d+\-\d+\)\]\);\s*if\s*\(!function_exists\s*\(\'([^\']*)\'\)\)\s*\{\s*function\s*\9\s*\(.+\1\s*=\s*\$\w+[+\-\*]\d+;~msi',
            'fast' => '~(\$\w{1,40})\s=\s\'([^\']*)\';\s(\$\w{1,40})=explode\((chr\(\(\d+\-\d+\)\)),substr\(\1,\((\d+\-\d+)\),\((\d+\-\d+)\)\)\);\s(\$\w{1,40})\s=\s\3\[\d+\]\(\3\[\(\d+\-\d+\)\]\);\s(\$\w{1,40})\s=\s\3\[\d+\]\(\3\[\(\d+\-\d+\)\]\);\sif\s\(!function_exists\(\'([^\']*)\'\)\)\s\{\sfunction\s*\9\(~msi',
            'id'   => 'arrayOffsets',
        ],
        [
            'full' => '~(\$\w{1,50}\s*=\s*array\((\'\d+\',?)+\);)+\$\w{1,40}=\"([^\"]+)\";if\s*\(!function_exists\(\"\w{1,50}\"\)\)\s*\{\s*function\s*[^\}]+\}\s*return\s*\$\w+;\}[^}]+}~msi',
            'fast' => '~(\$\w{1,50}=\s*array\((\'\d+\',?)+\);)+\$\w{1,40}=\"[^\"]+\";if\s*\(!function_exists\(\"\w{1,50}\"\)\)\{\s*function ~msi',
            'id'   => 'obfB64',
        ],
        [
            'full' => '~if\(\!function_exists\(\'findsysfolder\'\)\){function findsysfolder\(\$fld\).+\$REXISTHEDOG4FBI=\'([^\']+)\';\$\w+=\'[^\']+\';\s*eval\(\w+\(\'([^\']+)\',\$REXISTHEDOG4FBI\)\);~msi',
            'fast' => '~if\(!function_exists\(\'findsysfolder\'\)\){function findsysfolder\(\$fld\)\{\$fld1=dirname\(\$fld\);\$fld=\$fld1\.\'/scopbin\';clearstatcache\(\);if\(!is_dir\(\$fld\)\)return findsysfolder\(\$fld1\);else return \$fld;\}\}require_once\(findsysfolder\(__FILE__\)\.\'/911006\.php\'\);~msi',
            'id'   => 'sourceCop',
        ],
        [
            'full' => '~function\s*(\w{1,40})\s*\(\s*(\$\w{1,40})\s*,\s*(\$\w{1,40})\s*\)\s*\{\s*(\$\w{1,40})\s*=\s*str_rot13\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode\s*\(\s*[\'"][^\'"]*[\'"]\s*\)\s*\)\s*\)\s*\)\s*;\s*(if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*(\$\w{1,40})\s*=(\$\w+[\{\[]\d+[\}\]]\.?)+;return\s*(\$\w+)\(\3\);\s*\}\s*else\s*)+\s*if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*return\s*eval\(\3\);\s*\}\s*\};\s*(\$\w{1,40})\s*=\s*[\'"][^\'"]*[\'"];(\s*\9\([\'"][^\'"]*[\'"],)+\s*[\'"][^\'"]*[\'"]\s*\)+;~msi',
            'fast' => '~function\s*(\w{1,40})\s*\(\s*(\$\w{1,40})\s*,\s*(\$\w{1,40})\s*\)\s*\{\s*(\$\w{1,40})\s*=\s*str_rot13\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode\s*\(\s*[\'"][^\'"]*[\'"]\s*\)\s*\)\s*\)\s*\)\s*;\s*(if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*(\$\w{1,40})\s*=(\$\w+[\{\[]\d+[\}\]]\.?)+;return\s*(\$\w+)\(\3\);\s*\}\s*else\s*)+\s*if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*return\s*eval\(\3\);\s*\}\s*\};\s*(\$\w{1,40})\s*=\s*[\'"][^\'"]*[\'"];(\s*\9\([\'"][^\'"]*[\'"],)+\s*[\'"][^\'"]*[\'"]\s*\)+;~msi',
            'id'   => 'webshellObf',

        ],
        [
            'full' => '~(\$\w{1,40})=\'([^\'\\\\]|.*?)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';\s*(\$\w{1,40})\(\6,\$\w{1,40}\.\"([^\"]+)\"\.\$\w{1,40}\.\4\);~msi',
            'fast' => '~(\$\w{1,40})=\'([^\\\\\']|.*?)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';~msi',
            'id'   => 'substCreateFunc',
        ],
        [
            'full' => '~@error_reporting\(0\);\s*@ini_set\(\'error_log\',NULL\);\s*@ini_set\(\'log_errors\',0\);\s*@ini_set\(\'display_errors\',\s*0\);\s*@(\$\w+)="[create_function"\.]+;\s*(\$\w+)=\1\("([^"]+)","[eval\."]+\(\'\?>\'\.[base64_decode"\.]+\(\3\)\);"\);\s*\2\("([^"]+)"\);exit;~msi',
            'fast' => '~@error_reporting\(0\);\s*@ini_set\(\'error_log\',NULL\);\s*@ini_set\(\'log_errors\',0\);\s*@ini_set\(\'display_errors\',\s*0\);\s*@(\$\w+)="[create_function"\.]+;\s*(\$\w+)=\1\("([^"]+)","[eval\."]+\(\'\?>\'\.[base64_decode"\.]+\(\3\)\);"\);\s*\2\("([^"]+)"\);exit;~msi',
            'id'   => 'Obf_20200507_2',
        ],
        [
            'full' => '~\$\w+=([create_function"\'.]+);\s?\$\w+=\$\w+\([\'"]\\\\?\$\w+[\'"],((?:[\'"][eval]{0,4}[\'"]\.?)+)\.([\'"](\([\'"]\?>[\'"]\.)\w+[\'"]\.[^)\\\\]+)\\\\?\$\w+\)+;[\'"]\);\s?\$\w+\([\'"]([\w\+=\\\\\'"%/]+)[\'"]\);~msi',
            'fast' => '~\$\w+=([create_function"\'.]+);\s?\$\w+=\$\w+\([\'"]\\\\?\$\w+[\'"],((?:[\'"][eval]{0,4}[\'"]\.?)+)\.([\'"](\([\'"]\?>[\'"]\.)\w+[\'"]\.[^)\\\\]+)\\\\?\$\w+\)+;[\'"]\);\s?\$\w+\([\'"]([\w\+=\\\\\'"%/]+)[\'"]\);~msi',
            'id'   => 'createFunc',
        ],
        [
            'full' => '~(?(DEFINE)(?\'foreach\'(?:/\*\w+\*/)?\s*foreach\(\[[\d,]+\]\s*as\s*\$\w+\)\s*\{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\];\s*\}\s*(?:/\*\w+\*/)?\s*))(\$\w+)\s*=\s*"([^"]+)";\s*\$\w+\s*=\s*"";(?P>foreach)if\(isset\(\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\]\)+\{\s*\$\w+\s*=\s*\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\];(?:\s*\$\w+\s*=\s*"";\s*)+(?P>foreach)+\$\w+\s*=\s*\$\w+\([create_function\'\.]+\);\s*\$\w+\s*=\s*\$\w+\("",\s*\$\w+\(\$\w+\)\);\s*\$\w+\(\);\s*(?:exit\(\);)?\s*}~mis',
            'fast' => '~(?(DEFINE)(?\'foreach\'(?:/\*\w+\*/)?\s*foreach\(\[[\d,]+\]\s*as\s*\$\w+\)\s*\{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\];\s*\}\s*(?:/\*\w+\*/)?\s*))(\$\w+)\s*=\s*"([^"]+)";\s*\$\w+\s*=\s*"";(?P>foreach)if\(isset\(\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\]\)+\{\s*\$\w+\s*=\s*\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\];(?:\s*\$\w+\s*=\s*"";\s*)+(?P>foreach)+\$\w+\s*=\s*\$\w+\([create_function\'\.]+\);\s*\$\w+\s*=\s*\$\w+\("",\s*\$\w+\(\$\w+\)\);\s*\$\w+\(\);~mis',
            'id'   => 'forEach',
        ],
        [
            'full' => '~\$\w+\s*=\s*base64_decode\s*\([\'"][^\'"]+[\'"]\);\s*if\s*\(!function_exists\s*\("rotencode"\)\).{0,1000}eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"][^"\']+[\'"]\)+;~msi',
            'fast' => '~\$\w+\s*=\s*base64_decode\s*\([\'"][^\'"]+[\'"]\);\s*if\s*\(!function_exists\s*\("rotencode"\)\).{0,1000}eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"][^"\']+[\'"]\)+;~msi',
            'id'   => 'PHPMyLicense',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*if\(!function_exists\(\"([^\"]*)\"\)\)\{function\s*\2\((\$\w{1,40}),(\$\w{1,40})=\d+\)\{(\$\w{1,40})=implode\(\"[^\"]*\",\3\);(\$\w{1,40})=array\((\d+),(\d+),(\d+)\);if\(\4==0\)\s*(\$\w{1,40})=substr\(\5,\6\[\d+\],\6\[\d+\]\);elseif\(\4==1\)\s*\10=substr\(\5,\6\[\d+\]\+\6\[\d+\],\6\[\d+\]\);else\s*\10=trim\(substr\(\5,\6\[\d+\]\+\6\[\d+\]\+\6\[\d+\]\)\);return\s*\(\10\);\}\}\s*eval\(\w{1,40}\(\2\(\1\s*,\s*2\)\s*,\s*\2\(\1\s*,\s*1\)\)\);\s*__halt_compiler\(\);\s*[\w\+\=/]+~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*if\(!function_exists\(\"([^\"]*)\"\)\)\{function\s*\2\((\$\w{1,40}),(\$\w{1,40})=\d+\)\{(\$\w{1,40})=implode\(\"[^\"]*\",\3\);(\$\w{1,40})=array\((\d+),(\d+),(\d+)\);if\(\4==0\)\s*(\$\w{1,40})=substr\(\5,\6\[\d+\],\6\[\d+\]\);elseif\(\4==1\)\s*\10=substr\(\5,\6\[\d+\]\+\6\[\d+\],\6\[\d+\]\);else\s*\10=trim\(substr\(\5,\6\[\d+\]\+\6\[\d+\]\+\6\[\d+\]\)\);return\s*\(\10\);\}\}\s*eval\(\w{1,40}\(\2\(\1\s*,\s*2\)\s*,\s*\2\(\1\s*,\s*1\)\)\);\s*__halt_compiler\(\);~msi',
            'id'   => 'zeura',
        ],

        [
            'full' => '~(\$\w+)=base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\$\w+)=base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\$\w+)=base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\1\((\(-(\d+)-\(-\9\)\))\);@set_time_limit\((\(-(\d+)-\(-\11\)\))\);)eval\(base64_decode\(((?:(?|[\'"]\d+[\'"]|chr\(\d+\))\.?)+)\)\.gzinflate\(str_rot13\(\3\(\5\){4};~msi',
            'fast' => '~(\$\w+)=base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\$\w+)=base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\$\w+)=base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\1\((\(-(\d+)-\(-\9\)\))\);@set_time_limit\((\(-(\d+)-\(-\11\)\))\);)eval\(base64_decode\(((?:(?|[\'"]\d+[\'"]|chr\(\d+\))\.?)+)\)\.gzinflate\(str_rot13\(\3\(\5\){4};~msi',
            'id'   => 'evalConcatedVars',
        ],
        [
            'full' => '~(\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\]="[\w\\\\]+";(\$\w+="\w+";)?){5,}.+\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\].+}+~msi',
            'fast' => '~(\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\]="[\w\\\\]+";(\$\w+="\w+";)?){5,}.+\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\].+}+~msi',
            'id'   => 'Obf_20200618_1',
        ],
        [
            'full' => '~(\$\w+=(\w+)\(\'\d+\'\);\s*)+\$\w+=new\s\$\w+\(\2\(\'(\d+)\'\)+;error_reporting\(0\);eval\(\$\w+\(\$\w+->\$\w+\("[^"]+"\)+;.+?function \2.+?return\s\$\w+;\s}~msi',
            'fast' => '~(\$\w+=(\w+)\(\'\d+\'\);\s*)+\$\w+=new\s\$\w+\(\2\(\'(\d+)\'\)+;error_reporting\(0\);eval\(\$\w+\(\$\w+->\$\w+\("[^"]+"\)+;.+?function \2.+?return\s\$\w+;\s}~msi',
            'id'   => 'aanKFM',
        ],
        [
            'full' => '~error_reporting\(\d\);(?:\$\w+=[\'"]\w+[\'"];)?ini_set\([\'"]\w+[\'"],\d\);eval\(base64_decode\([\'"]([\w\+=]+)[\'"]\)\);\$\w+=str_split\([\'"]([}\w|,[=\'\.;\]&]+)[\'"]\);\$\w+=[\'"]{2};foreach\(\$\w+\s{0,50}as\s{0,50}\$\w+\){foreach\((\$\w+)\s{0,50}as\s{0,50}\$\w+\s{0,50}=>\s{0,50}\$\w+\){(?:\$\w+=[\'"]\w+[\'"];\$\w+=[\'"]\w+[\'"];)?if\(\$\w+\s{0,50}==\s{0,50}\(string\)\$\w+\){(?:\$\w+=[\'"]\w+[\'"];\$\w+=[\'"]\w+[\'"];)?\$\w+\s{0,50}\.=\s{0,50}\$\w+;break;}}}eval\([\'"]\?>[\'"]\.gzinflate\(base64_decode\(\$\w+\)\)\);~msi',
            'fast' => '~error_reporting\(\d\);(?:\$\w+=[\'"]\w+[\'"];)?ini_set\([\'"]\w+[\'"],\d\);eval\(base64_decode\([\'"]([\w\+=]+)[\'"]\)\);\$\w+=str_split\([\'"]([}\w|,[=\'\.;\]&]+)[\'"]\);\$\w+=[\'"]{2};foreach\(\$\w+\s{0,50}as\s{0,50}\$\w+\){foreach\((\$\w+)\s{0,50}as\s{0,50}\$\w+\s{0,50}=>\s{0,50}\$\w+\){(?:\$\w+=[\'"]\w+[\'"];\$\w+=[\'"]\w+[\'"];)?if\(\$\w+\s{0,50}==\s{0,50}\(string\)\$\w+\){(?:\$\w+=[\'"]\w+[\'"];\$\w+=[\'"]\w+[\'"];)?\$\w+\s{0,50}\.=\s{0,50}\$\w+;break;}}}eval\([\'"]\?>[\'"]\.gzinflate\(base64_decode\(\$\w+\)\)\);~msi',
            'id'   => 'evalArrayVar',
        ],
        [
            'full' => '~((\$\w+)\s*\.=\s*"[^"]+";\s*)+eval\((\$\w+\s*\.?\s*)+\)~msi',
            'fast' => '~((\$\w+)\s*\.=\s*"[^"]+";\s*)+eval\((\$\w+\s*\.?\s*)+\)~msi',
            'id'   => 'evalVarConcat',
        ],
        [
            'full' => '~((\$\w+)\s*=\s*[\'"]([^\'"]+)[\'"];\s*)+\s*.{0,10}?@?eval\s*\(\s*([\'"?>.\s]+)?\(?(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()+(\({0,1}[\s"\']?(\$\w+)?(?:str_replace\((?:.+?,){3}\2?)?[\s"\']?\){0,1})\)+;~msi',
            'fast' => '~((\$\w+)\s*=\s*[\'"]([^\'"]+)[\'"];\s*)+\s*.{0,10}?@?eval\s*\(\s*([\'"?>.\s]+)?\(?(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()+(\({0,1}[\s"\']?(\$\w+)?(?:str_replace\((?:.+?,){3}\2?)?[\s"\']?\){0,1})\)+;~msi',
            'id'   => 'evalVar',
        ],
        [
            'full' => '~function\s*(\w{1,40})\((\$\w{1,40})\)\{(\$\w{1,40})=\'base64_decode\';(\$\w{1,40})=\'gzinflate\';return\s*\4\(\3\(\2\)\);\}\$\w{1,40}=\'[^\']*\';\$\w{1,40}=\'[^\']*\';eval\(\1\(\'([^\']*)\'\)\);~msi',
            'fast' => '~function\s*(\w{1,40})\((\$\w{1,40})\)\{(\$\w{1,40})=\'base64_decode\';(\$\w{1,40})=\'gzinflate\';return\s*\4\(\3\(\2\)\);\}\$\w{1,40}=\'[^\']*\';\$\w{1,40}=\'[^\']*\';eval\(\1\(\'([^\']*)\'\)\);~msi',
            'id'   => 'evalFunc',
        ],
        [
            'full' => '~function\s*(\w{1,40})\s*\((\$\w{1,40})\)\s*\{\s*(\$\w{1,40})\s*=\s*"\\\\x62\\\\x61\\\\x73\\\\x65\\\\x36\\\\x34\\\\x5f\\\\x64\\\\x65\\\\x63\\\\x6f\\\\x64\\\\x65";\s*(\$\w{1,40})\s*=\s*"\\\\x67\\\\x7a\\\\x69\\\\x6e\\\\x66\\\\x6c\\\\x61\\\\x74\\\\x65";\s*return\s*\4\s*\(\3\s*\(\2\)\);\s*\}\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*eval\s*\(\1\s*\(\"([^\"]*)\"\)\);~msi',
            'fast' => '~function\s*(\w{1,40})\s*\((\$\w{1,40})\)\s*\{\s*(\$\w{1,40})\s*=\s*"\\\\x62\\\\x61\\\\x73\\\\x65\\\\x36\\\\x34\\\\x5f\\\\x64\\\\x65\\\\x63\\\\x6f\\\\x64\\\\x65";\s*(\$\w{1,40})\s*=\s*"\\\\x67\\\\x7a\\\\x69\\\\x6e\\\\x66\\\\x6c\\\\x61\\\\x74\\\\x65";\s*return\s*\4\s*\(\3\s*\(\2\)\);\s*\}\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*eval\s*\(\1\s*\(\"([^\"]*)\"\)\);~msi',
            'id'   => 'evalFunc',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?[\'"]@?(([\w."]+\()+[\'"]([\w\/+]+)[\'"])\)+;[\'"]\s?;\s?(\$\w+)\s?=\s?([\w@."]+)\s?;\s?@?(\$\w+)\s?=\s\5\([\'"]+,\s?"\1;"\s?\);\7\([\'"]{2}\);~msi',
            'fast' => '~(\$\w+)\s?=\s?[\'"]@?(([\w."]+\()+[\'"]([\w\/+]+)[\'"])\)+;[\'"]\s?;\s?(\$\w+)\s?=\s?([\w@."]+)\s?;\s?@?(\$\w+)\s?=\s\5\([\'"]+,\s?"\1;"\s?\);\7\([\'"]{2}\);~msi',
            'id'   => 'evalConcatFunc',
        ],
        [
            'full' => '~function\sT_\((\$\w+)\)\s{\s(\$\w+)\s=\s256;\s(\$w2)\s=\s8;\s(\$\w+)\s=\sarray\(\);\s(\$\w+)\s=\s0;\s(\$\w+)\s=\s0;\sfor\s\((\$\w+)\s=\s0;\s\7\s<\sstrlen\(\1\);\s\7\+\+\)\s{\s\5\s=\s\(\5\s<<\s8\)\s\+\sord\(\1\[\7\]\);\s\6\s\+=\s8;\sif\s\(\6\s>=\s\3\)\s{\s\6\s-=\s\3;\s(\$\w+)\[\]\s=\s\5\s>>\s\6;\s\5\s&=\s\(1\s<<\s\6\)\s-\s1;\s\2\+\+;\sif\s\(\2\s>>\s\3\)\s{\s\3\+\+;\s}\s}\s}\s(\$\w+)\s=\srange\("\\\\x0",\s"\\\\377"\);\s(\$\w+)\s=\s\'\';\sforeach\s\(\4\sas\s\7\s=>\s(\$\w+)\)\s{\sif\s\(!isset\(\9\[\11\]\)\)\s{\s(\$\w+)\s=\s(\$\w+)\s\.\s\13\[0\];\s}\selse\s{\s\12\s=\s\9\[\11\];\s}\s\10\s\.=\s\12;\sif\s\(\7\)\s{\s\9\[\]\s=\s\13\s\.\s\12\[0\];\s}\s\13\s=\s\12;\s}\sreturn\s\10;\s}\s(\$_\w+)="[\w\\\\]+";eval\(T_\(\14\("(.*)"\)\)\);~mis',
            'fast' => '~function\sT_\((\$\w+)\)\s{\s(\$\w+)\s=\s256;\s(\$w2)\s=\s8;\s(\$\w+)\s=\sarray\(\);\s(\$\w+)\s=\s0;\s(\$\w+)\s=\s0;\sfor\s\((\$\w+)\s=\s0;\s\7\s<\sstrlen\(\1\);\s\7\+\+\)\s{\s\5\s=\s\(\5\s<<\s8\)\s\+\sord\(\1\[\7\]\);\s\6\s\+=\s8;\sif\s\(\6\s>=\s\3\)\s{\s\6\s-=\s\3;\s(\$\w+)\[\]\s=\s\5\s>>\s\6;\s\5\s&=\s\(1\s<<\s\6\)\s-\s1;\s\2\+\+;\sif\s\(\2\s>>\s\3\)\s{\s\3\+\+;\s}\s}\s}\s(\$\w+)\s=\srange\("\\\\x0",\s"\\\\377"\);\s(\$\w+)\s=\s\'\';\sforeach\s\(\4\sas\s\7\s=>\s(\$\w+)\)\s{\sif\s\(!isset\(\9\[\11\]\)\)\s{\s(\$\w+)\s=\s(\$\w+)\s\.\s\13\[0\];\s}\selse\s{\s\12\s=\s\9\[\11\];\s}\s\10\s\.=\s\12;\sif\s\(\7\)\s{\s\9\[\]\s=\s\13\s\.\s\12\[0\];\s}\s\13\s=\s\12;\s}\sreturn\s\10;\s}\s(\$_\w+)="[\w\\\\]+";eval\(T_\(\14\("(.*)"\)\)\);~mis',
            'id'   => 'evalFuncFunc',
        ],
        [
            'full' => '~(preg_replace\(["\']/\.\*?/[^"\']+["\']\s*,\s*)[^\),]+(?:[\)\\\\0-5]+;[\'"])?(,\s*["\'][^"\']*["\'])\)+;~msi',
            'fast' => '~(preg_replace\(["\']/\.\*?/[^"\']+["\']\s*,\s*)[^\),]+(?:[\)\\\\0-5]+;[\'"])?(,\s*["\'][^"\']*["\'])\)+;~msi',
            'id'   => 'eval',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*[\'"]([^\'"]*)[\'"]\s*;\s*(\$\w{1,40}\s*=\s*(strtolower|strtoupper)\s*\((\s*\1[\[\{]\s*\d+\s*[\]\}]\s*\.?\s*)+\);\s*)+\s*if\s*\(\s*isset\s*\(\s*\$\{\s*\$\w{1,40}\s*\}\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*\)\s*\)\s*\{\s*eval\s*\(\s*\$\w{1,40}\s*\(\s*\$\s*\{\s*\$\w{1,40}\s*\}\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*\)\s*\)\s*;\s*\}\s*~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*[\'"]([^\'"]*)[\'"]\s*;\s*(\$\w{1,40}\s*=\s*(strtolower|strtoupper)\s*\((\s*\1[\[\{]\s*\d+\s*[\]\}]\s*\.?\s*)+\);\s*)+\s*if\s*\(\s*isset\s*\(\s*\$\{\s*\$\w{1,40}\s*\}\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*\)\s*\)\s*\{\s*eval\s*\(\s*\$\w{1,40}\s*\(\s*\$\s*\{\s*\$\w{1,40}\s*\}\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*\)\s*\)\s*;\s*\}\s*~msi',
            'id'   => 'evalInject',

        ],
        [
            'full' => '~((\$\w+)\s*=\s*(([base64_decode\'\.\s]+)|([eval\'\.\s]+)|([create_function\'\.\s]+)|([stripslashes\'\.\s]+)|([gzinflate\'\.\s]+)|([strrev\'\.\s]+)|([str_rot13\'\.\s]+)|([gzuncompress\'\.\s]+)|([urldecode\'\.\s]+)([rawurldecode\'\.\s]+));\s*)+\$\w+\s*=\s*\$\w+\(\'\',(\s*\$\w+\s*\(\s*)+\'[^\']+\'\)+;\s*\$\w+\(\);~msi',
            'fast' => '~((\$\w+)\s*=\s*(([base64_decode\'\.\s]+)|([eval\'\.\s]+)|([create_function\'\.\s]+)|([stripslashes\'\.\s]+)|([gzinflate\'\.\s]+)|([strrev\'\.\s]+)|([str_rot13\'\.\s]+)|([gzuncompress\'\.\s]+)|([urldecode\'\.\s]+)([rawurldecode\'\.\s]+));\s*)+\$\w+\s*=\s*\$\w+\(\'\',(\s*\$\w+\s*\(\s*)+\'[^\']+\'\)+;\s*\$\w+\(\);~msi',
            'id'   => 'createFuncConcat',

        ],
        [
            'full' => '~(\$\w+)\s*=\s*base64_decode\("([^"]+)"\);(\1\s*=\s*ereg_replace\("([^"]+)","([^"]+)",\1\);)+\1=base64_decode\(\1\);eval\(\1\);~msi',
            'fast' => '~(\$\w+)\s*=\s*base64_decode\("([^"]+)"\);(\1\s*=\s*ereg_replace\("([^"]+)","([^"]+)",\1\);)+\1=base64_decode\(\1\);eval\(\1\);~msi',
            'id'   => 'evalEregReplace',

        ],
        [
            'full' => '~((\$\w+)\s*=\s*(([base64_decode"\'\.\s]+)|([eval"\'\.\s]+)|([create_function"\'\.\s]+)|([stripslashes"\'\.\s]+)|([gzinflate"\'\.\s]+)|([strrev"\'\.\s]+)|([str_rot13"\'\.\s]+)|([gzuncompress"\'\.\s]+)|([urldecode"\'\.\s]+)([rawurldecode"\'\.\s]+));\s*)+\s*@?eval\(\$[^)]+\)+;~msi',
            'fast' => '~((\$\w+)\s*=\s*(([base64_decode"\'\.\s]+)|([eval"\'\.\s]+)|([create_function"\'\.\s]+)|([stripslashes"\'\.\s]+)|([gzinflate"\'\.\s]+)|([strrev"\'\.\s]+)|([str_rot13"\'\.\s]+)|([gzuncompress"\'\.\s]+)|([urldecode"\'\.\s]+)([rawurldecode"\'\.\s]+));\s*)+\s*@?eval\(\$[^)]+\)+;~msi',
            'id'   => 'evalWrapVar',

        ],
        [
            'full' => '~\$\{"(.{1,20}?(\\\\x[0-9a-f]{2})+)+.?";@?eval\s*\(\s*([\'"?>.]+)?@?\s*(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+\(?\$\{\$\{"[^\)]+\)+;~msi',
            'fast' => '~\$\{"(.{1,20}?(\\\\x[0-9a-f]{2})+)+.?";@?eval\s*\(\s*([\'"?>.]+)?@?\s*(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+\(?\$\{\$\{"[^\)]+\)+;~msi',
            'id'   => 'escapes',
        ],
        [
            'full' => '~(\$\w+)\s*=(?:\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\s*\(\d+\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\s*?\.?)+;\s*(\$\w+)\s*=(?:\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\s*\(\d+\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\s*?\.?)+;\s*@?\1\s*\(@?\2\s*\([\'"]([^\'"]+)[\'"]\)+;~msi',
            'fast' => '~(\$\w+)\s*=(?:\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\s*\(\d+\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\s*?\.?)+;\s*(\$\w+)\s*=(?:\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\s*\(\d+\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\s*?\.?)+;\s*@?\1\s*\(@?\2\s*\([\'"]([^\'"]+)[\'"]\)+;~msi',
            'id'   => 'assert',
        ],
        [
            'full' => '~eval\s*\(str_rot13\s*\([\'"]+\s*(?:.+(?=\\\\\')\\\\\'[^\'"]+)+[\'"]+\)+;~msi',
            'fast' => '~eval\s*\(str_rot13\s*\([\'"]+\s*(?:.+(?=\\\\\')\\\\\'[^\'"]+)+[\'"]+\)+;~msi',
            'id'   => 'evalCodeFunc',
        ],
        [
            'full' => '~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\']\2[\'"];\${\$\{"GLOBALS"\}\[[\'"]\3[\'"]\]}=[\'"]([^\'"]+)[\'"];eval.{10,50}?\$\{\$\{"GLOBALS"\}\[[\'"]\1[\'"]\]\}\)+;~msi',
            'fast' => '~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\']\2[\'"];\${\$\{"GLOBALS"\}\[[\'"]\3[\'"]\]}=[\'"]([^\'"]+)[\'"];eval.{10,50}?\$\{\$\{"GLOBALS"\}\[[\'"]\1[\'"]\]\}\)+;~msi',
            'id'   => 'evalVarVar',
        ],
        [
            'full' => '~(\$\w+)=[\'"][^"\']+[\'"];(\$\w+)=strrev\(\'edoced_46esab\'\);eval\(\2\([\'"][^\'"]+[\'"]\)+;~msi',
            'fast' => '~(\$\w+)=[\'"][^"\']+[\'"];(\$\w+)=strrev\(\'edoced_46esab\'\);eval\(\2\([\'"][^\'"]+[\'"]\)+;~msi',
            'id'   => 'edoced_46esab',
        ],
        [
            'full' => '~(\$\w+)=strrev\([\'"](?:|ed|oc|_|4|6|es|ab|(?:"\."))+[\'"]\);\s*(\$\w+)=strrev\([\'"](?:|et|al|fn|iz|g|(?:"\."))+[\'"]\);\s?@?eval\(\2\(\1\([\'"]([\w\/\+=]+)[\'"]\)\)\);~msi',
            'fast' => '~(\$\w+)=strrev\([\'"](?:|ed|oc|_|4|6|es|ab|(?:"\."))+[\'"]\);\s*(\$\w+)=strrev\([\'"](?:|et|al|fn|iz|g|(?:"\."))+[\'"]\);\s?@?eval\(\2\(\1\([\'"]([\w\/\+=]+)[\'"]\)\)\);~msi',
            'id'   => 'edoced_46esab_etalfnizg',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)")*)";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."[^"]+"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi',
            'fast' => '~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)"){0,1000})";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."[^"]+"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi',
            'id'   => 'eval2',
        ],
        [
            'full' => '~@?(eval|echo|(\$\w+)\s*=\s*create_function)(?:\/\*+\/)?\s*\((\'\',)?\s*([\'"?>.\s]+)?\s*\(?\s*@?\s*(base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+.*?[^\'");]+((\s*\.?[\'"]([^\'";]+[\'"]*\s*)+)?\s*[\'"\);]+)+(\s*\2\(\);)?~msi',
            'fast' => '~@?(eval|echo|(\$\w+)\s*=\s*create_function)(?:\/\*+\/)?\s*\((\'\',)?\s*([\'"?>.\s]+)?\s*\(?\s*@?\s*(base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+.*?[^\'");]+((\s*\.?[\'"]([^\'";]+[\'"]*\s*)+)?\s*[\'"\);]+)+(\s*\2\(\);)?~msi',
            'id'   => 'eval',
        ],
        [
            'full' => '~eval\s*/\*[\w\s\.:,]+\*/\s*\([^\)]+\)+;~msi',
            'fast' => '~eval\s*/\*[\w\s\.:,]+\*/\s*\(~msi',
            'id'   => 'eval',
        ],
        [
            'full' => '~((?:\$\w+=(?:base64_decode|str_rot13)\([\'"][\w=]+[\'"]\);)+)(eval\((?:\(?\$\w+\(?)+(?:.*?)?\)+;)~msi',
            'fast' => '~((?:\$\w+=(?:base64_decode|str_rot13)\([\'"][\w=]+[\'"]\);)+)(eval\((?:\(?\$\w+\(?)+(?:.*?)?\)+;)~msi',
            'id'   => 'evalFuncVars',
        ],
        [
            'full' => '~eval\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163[^\)]+\)+;~msi',
            'fast' => '~eval\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163~msi',
            'id'   => 'evalHex',
        ],
        [
            'full' => '~eval\s*\("\\\\x?\d+[^\)]+\)+;(?:[\'"]\)+;)?~msi',
            'fast' => '~eval\s*\("\\\\x?\d+~msi',
            'id'   => 'evalHex',
        ],
        [
            'full' => '~(\$\w+)\s=\s(["\']?[\w\/\+]+["\']?);\s(\$\w+)\s=\s((?:str_rot13\(|rawurldecode\(|convert_uudecode\(|gzinflate\(|str_rot13\(|base64_decode\(|rawurldecode\(|)+\1\)\)+);\secho\s(eval\(\3\);)~msi',
            'fast' => '~(\$\w+)\s=\s(["\']?[\w\/\+]+["\']?);\s(\$\w+)\s=\s((?:str_rot13\(|rawurldecode\(|convert_uudecode\(|gzinflate\(|str_rot13\(|base64_decode\(|rawurldecode\(|)+\1\)\)+);\secho\s(eval\(\3\);)~msi',
            'id'   => 'echoEval',
        ],
        [
            'full' => '~if\(!function_exists\([\'"](\w+)[\'"]\)\){function\s?\1\((\$\w+)\){(\$\w+)=array\(\'(\d+)\',\'([\w\]]+)\',\'([\w`]+)\',\2\);for\((\$\w+)=0;\7<4;\7\+\+\){for\((\$\w+)=0;\8<strlen\(\3\[\7\]\);\8\+\+\)\s?\3\[\7\]\[\8\]\s?=\s?chr\(ord\(\3\[\7\]\[\8\]\)-\(\7\?\3\[\8\s?xor\s?\8\]:1\)\);if\(\7==2\)\s?\3\[3\]=\3\[1\]\(\3\[2\]\(\3\[3\]\)\);}\s?return\s?\3\[3\];}(\$\w+)=["\']([\w\+\/=]+)["\'];(\$\w+)=[\'"]\1[\'"];(\$\w+)=\11\([\'"]([\w=]+)[\'"]\);\$\w+=\12\(\'\',\11\(\9\)\);\$\w+\(\);}~msi',
            'fast' => '~if\(!function_exists\([\'"](\w+)[\'"]\)\){function\s?\1\((\$\w+)\){(\$\w+)=array\(\'(\d+)\',\'([\w\]]+)\',\'([\w`]+)\',\2\);for\((\$\w+)=0;\7<4;\7\+\+\){for\((\$\w+)=0;\8<strlen\(\3\[\7\]\);\8\+\+\)\s?\3\[\7\]\[\8\]\s?=\s?chr\(ord\(\3\[\7\]\[\8\]\)-\(\7\?\3\[\8\s?xor\s?\8\]:1\)\);if\(\7==2\)\s?\3\[3\]=\3\[1\]\(\3\[2\]\(\3\[3\]\)\);}\s?return\s?\3\[3\];}(\$\w+)=["\']([\w\+\/=]+)["\'];(\$\w+)=[\'"]\1[\'"];(\$\w+)=\11\([\'"]([\w=]+)[\'"]\);\$\w+=\12\(\'\',\11\(\9\)\);\$\w+\(\);}~msi',
            'id'   => 'evalCreateFunc',
        ],
        [
            'full' => '~(\$\w{1,1000})=\'([^\']+)\';(\$\w{1,3000}=(?:base64_decode|gzinflate|convert_uudecode|str_rot13)\(\$\w{1,3000}\);){1,100}eval\((\$\w{1,3000})\);~msi',
            'fast' => '~(\$\w{1,1000})=\'([^\']+)\';(\$\w{1,3000}=(?:base64_decode|gzinflate|convert_uudecode|str_rot13)\(\$\w{1,3000}\);){1,100}eval\((\$\w{1,3000})\);~msi',
            'id'   => 'evalAssignedVars',
        ],
        [
            'full' => '~\$\w+=\'printf\';(\s*\$\w+\s*=\s*\'[^\']+\'\s*;)+\s*(\$\w+\s*=\s*\$\w+\([^\)]+\);\s*)+(\$\w+\s*=\s*\'[^\']+\';\s*)?(\s*(\$\w+\s*=\s*)?\$\w+\([^)]*\)+;\s*)+(echo\s*\$\w+;)?~msi',
            'fast' => '~\$\w+=\'printf\';(\s*\$\w+\s*=\s*\'[^\']+\'\s*;)+\s*(\$\w+\s*=\s*\$\w+\([^\)]+\);\s*)+(\$\w+\s*=\s*\'[^\']+\';\s*)?(\s*(\$\w+\s*=\s*)?\$\w+\([^)]*\)+;\s*)+(echo\s*\$\w+;)?~msi',
            'id'   => 'seolyzer',
        ],
        [
            'full' => '~(\$\w+)="((?:[^"]|(?<=\\\\)")*)";(\s*\$GLOBALS\[\'\w+\'\]\s*=\s*(?:\${)?(\1\[\d+\]}?\.?)+;\s*)+(.{0,400}\s*\1\[\d+\]\.?)+;\s*}~msi',
            'fast' => '~(\$\w+)="((?:[^"]|(?<=\\\\)"){0,1000})";(\s*\$GLOBALS\[\'\w+\'\]\s*=\s*(?:\${)?(\1\[\d+\]}?\.?)+;\s*)+(.{0,400}\s*\1\[\d+\]\.?)+;\s*}~msi',
            'id'   => 'subst2',
        ],
        [
            'full' => '~(\$\w+\s*=\s*"[^"]+";\s*)+(\$\w+\s*=\s*\$?\w+\("\w+"\s*,\s*""\s*,\s*"\w+"\);\s*)+\$\w+\s*=\s*\$\w+\("",\s*\$\w+\(\$\w+\("\w+",\s*"",(\s*\$\w+\.?)+\)+;\$\w+\(\);~msi',
            'fast' => '~(\$\w+\s*=\s*"[^"]+";\s*)+(\$\w+\s*=\s*\$?\w+\("\w+"\s*,\s*""\s*,\s*"\w+"\);\s*)+\$\w+\s*=\s*\$\w+\("",\s*\$\w+\(\$\w+\("\w+",\s*"",(\s*\$\w+\.?)+\)+;\$\w+\(\);~msi',
            'id'   => 'strreplace',
        ],
        [
            'full' => '~@?echo\s*([\'"?>.\s]+)?@?\s*(base64_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+.*?[^\'")]+((\s*\.?[\'"]([^\'";]+\s*)+)?\s*[\'"\);]+)+~msi',
            'fast' => '~@?echo\s*([\'"?>.\s]+)?@?\s*(base64_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+.*?[^\'")]+((\s*\.?[\'"]([^\'";]+\s*)+)?\s*[\'"\);]+)+~msi',
            'id'   => 'echo',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";\s*(\$\w+)=strtoupper\s*\((\1\[\d+\]\s*\.?\s*)+\)\s*;\s*if\(\s*isset\s*\(\${\s*\3\s*}\[\d*\s*\'\w+\'\s*\]\s*\)\s*\)\s*{eval\(\${\3\s*}\[\'\w+\']\s*\)\s*;}~smi',
            'fast' => '~(\$\w+)="([^"]+)";\s*(\$\w+)=strtoupper\s*\((\1\[\d+\]\s*\.?\s*)+\)\s*;\s*if\(\s*isset\s*\(\${\s*\3\s*}\[\d*\s*\'\w+\'\s*\]\s*\)\s*\)\s*{eval\(\${\3\s*}\[\'\w+\']\s*\)\s*;}~smi',
            'id'   => 'strtoupper',
        ],
        [
            'full' => '~(\$\w+)="[^"]+";\s*(\$\w+)=str_ireplace\("[^"]+","",\1\);(\$\w+)\s*=\s*"[^"]+";\s*function\s*(\w+)\((\$\w+,?)+\){\s*(\$\w+)=\s*create_function\(\'\',\$\w+\);\s*array_map\(\6,array\(\'\'\)+;\s*}\s*set_error_handler\(\'\4\'\);(\$\w+)=\2\(\3\);user_error\(\7,E_USER_ERROR\);\s*if\s*.+?}~msi',
            'fast' => '~(\$\w+)="[^"]+";\s*(\$\w+)=str_ireplace\("[^"]+","",\1\);(\$\w+)\s*=\s*"[^"]+";\s*function\s*(\w+)\((\$\w+,?)+\){\s*(\$\w+)=\s*create_function\(\'\',\$\w+\);\s*array_map\(\6,array\(\'\'\)+;\s*}\s*set_error_handler\(\'\4\'\);(\$\w+)=\2\(\3\);user_error\(\7,E_USER_ERROR\);\s*if\s*.+?}~msi',
            'id'   => 'errorHandler',
        ],
        [
            'full' => '~(\$\w+)=strrev\(str_ireplace\("[^"]+","","[^"]+"\)\);(\$\w+)="([^"]+)";eval\(\1\(\2\)+;}~msi',
            'fast' => '~(\$\w+)=strrev\(str_ireplace\("[^"]+","","[^"]+"\)\);(\$\w+)="([^"]+)";eval\(\1\(\2\)+;}~msi',
            'id'   => 'evalIReplace',
        ],
        [
            'full' => '~error_reporting\(0\);ini_set\("display_errors",\s*0\);if\(!defined\(\'(\w+)\'\)\){define\(\'\1\',__FILE__\);if\(!function_exists\("([^"]+)"\)\){function [^(]+\([^\)]+\).+?eval\(""\);.+?;eval\(\$[^\)]+\)\);[^\)]+\)+;return\s*\$[^;]+;\s*\?>([^;]+);~msi',
            'fast' => '~error_reporting\(0\);ini_set\("display_errors",\s*0\);if\(!defined\(\'(\w+)\'\)\){define\(\'\1\',__FILE__\);if\(!function_exists\("([^"]+)"\)\){function [^(]+\([^\)]+\).+?eval\(""\);.+?;eval\(\$[^\)]+\)\);[^\)]+\)+;return\s*\$[^;]+;\s*\?>([^;]+);~msi',
            'id'   => 'PHPJiaMi',
        ],
        [
            'full' => '~\$\w+=0;(\$GLOBALS\[\'\w+\'\])\s*=\s*\'([^\']+)\';\s*(\$\w+)=pack\(\'H\*\',substr\(\1,\s*([-\d]+)\)\);if\s*\(!function_exists\(\'(\w+)\'\)\){function\s*\5\(\$\w+,\s*\$\w+\){\$\w+=\1;\s*\$d=pack\(\'H\*\',substr\(\1,\s*\4\)\);\s*return\s*\$\w+\(substr\(\$\w+,\s*\$\w+,\s*\$\w+\)\);}};eval\(\3\(\'[^\']+\'\)\);~msi',
            'fast' => '~\$\w+=0;(\$GLOBALS\[\'\w+\'\])\s*=\s*\'([^\']+)\';\s*(\$\w+)=pack\(\'H\*\',substr\(\1,\s*([-\d]+)\)\);if\s*\(!function_exists\(\'(\w+)\'\)\){function\s*\5\(\$\w+,\s*\$\w+\){\$\w+=\1;\s*\$d=pack\(\'H\*\',substr\(\1,\s*\4\)\);\s*return\s*\$\w+\(substr\(\$\w+,\s*\$\w+,\s*\$\w+\)\);}};eval\(\3\(\'[^\']+\'\)\);~msi',
            'id'   => 'substr',
        ],
        [
            'full' => '~(function\s*(\w+)\((\$\w+)\){\s*return\s*(base64_decode|gzinflate|eval)\(\$\w+(,\d+)?\);}\s*)+(\$\w+)="([^"]+)";(\w+\()+\6\)+~msi',
            'fast' => '~(function\s*(\w+)\((\$\w+)\){\s*return\s*(base64_decode|gzinflate|eval)\(\$\w+(,\d+)?\);}\s*)+(\$\w+)="([^"]+)";(\w+\()+\6\)+~msi',
            'id'   => 'funcs',
        ],
        [
            'full' => '~\$_F=__FILE__;\$_X=["\']([^\'"]+)[\'"];\s*(?:\$[_\w]+\.=[\'"][\w\+\/=]+[\'"];){0,30}\$_\w+=base64_decode\(\$_X\);\$_X=strtr\(\$_X,\'([^\']+)\',\'([^\']+)\'\);\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\(\'\~?__FILE__\~?\',"\'".\$_F."\'",\$_X\);eval\(\$_R\);\$_R=0;\$_X=0;~msi',
            'fast' => '~\$_F=__FILE__;\$_X=["\']([^\'"]+)[\'"];\s*(?:\$[_\w]+\.=[\'"][\w\+\/=]+[\'"];){0,30}\$_\w+=base64_decode\(\$_X\);\$_X=strtr\(\$_X,\'([^\']+)\',\'([^\']+)\'\);\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\(\'\~?__FILE__\~?\',"\'".\$_F."\'",\$_X\);eval\(\$_R\);\$_R=0;\$_X=0;~msi',
            'id'   => 'LockIt2',
        ],
        [
            'full' => '~(?:@error_reporting\(\d+\);\s*@set_time_limit\(\d+\);)?\s*(\$\w+)=([\s\'\w\/+=]+);\s*(\$\w+)=(__FILE__);\s*\1=gzinflate\(str_rot13\(base64_decode\(\$tr\)\)\);\1=strtr\(\1,\'([^\']+)\'\s*,\'([^\']+)\'\);(\$_R)=@?ereg_replace\(\'\~?\4\~?\',"\'".\3."\'",\1\);eval\(\7\);\7=0;\1=0;~msi',
            'fast' => '~(\$\w+)=([\s\'\w\/+=]+);\s*(\$\w+)=(__FILE__);\s*\1=\w+\(\w+\(\w+\(\$tr\)\)\);\1=\w+\(\1,\'([^\']+)\'\s*,\'([^\']+)\'\);(\$_R)=@?\w+\(\'\~?\4\~?\',"\'".\3."\'",\1\);\w+\(\7\);\7=0;\1=0;~msi',
            'id'   => 'anaski',
        ],
        [
            'full' => '~\$\w+="[^"]+";\$l+=0;\$l+=\'base64_decode\';\$l+=0;eval\(.+?;eval\(\$l+\);return;~msi',
            'fast' => '~\$\w+="[^"]+";\$l+=0;\$l+=\'base64_decode\';\$l+=0;eval\(.+?;eval\(\$l+\);return;~msi',
            'id'   => 'custom1',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"(\w{32})";\s*(\$\w+)\s*=\s*array\s*\(\);\s*(\3\[\d+\]\s*=\s*"[^"]+";\s*)+\s*(\$\w+)\s*=\s*"base64_decode";\s*\$\w+\s*=\s*(\w+)\s*\(\3,\1\);function\s*\6\(\s*.{200,500}return\s*\$\w+;\s*}\s*eval\s*\(\5\s*\(\$\w+\)\);~msi',
            'fast' => '~(\$\w+)\s*=\s*"(\w{32})";\s*(\$\w+)\s*=\s*array\s*\(\);\s*(\3\[\d+\]\s*=\s*"[^"]+";\s*)+\s*(\$\w+)\s*=\s*"base64_decode";\s*\$\w+\s*=\s*(\w+)\s*\(\3,\1\);function\s*\6\(\s*.{200,500}return\s*\$\w+;\s*}\s*eval\s*\(\5\s*\(\$\w+\)\);~msi',
            'id'   => 'custom2',
        ],
        [
            'full' => '~\$\w+=\'=+\s*Obfuscation provided by Unknowndevice64 - Free Online PHP Obfuscator\s*(?:http://www\.ud64\.com/)?\s*=+\';\s*(\$ud64_c[o0]m="[\\\\0-9a-z\."]+;)+\$\w+=(\$ud64_c[o0]m\()+"([^"]+)"\)+;@eval\(\$ud64_c[o0]m\(\'[^\']+\'\)+;~msi',
            'fast' => '~\$\w+=\'=+\s*Obfuscation provided by Unknowndevice64 - Free Online PHP Obfuscator\s*(?:http://www\.ud64\.com/)?\s*=+\';\s*(\$ud64_c[o0]m="[\\\\0-9a-z\."]+;)+\$\w+=(\$ud64_c[o0]m\()+"([^"]+)"\)+;@eval\(\$ud64_c[o0]m\(\'[^\']+\'\)+;~msi',
            'id'   => 'ud64',
        ],
        [
            'full' => '~(\$[\w_]+=("[\\\\\\\\\w]+"\.?)+;)+\$\w+=(?:\$\w+\()+"([\w\/\+=]+)"\)+;@eval\(\$\w+\(\'.*?\'\)+;~msi',
            'fast' => '~(\$[\w_]+=("[\\\\\\\\\w]+"\.?)+;)+\$\w+=(?:\$\w+\()+"([\w\/\+=]+)"\)+;@eval\(\$\w+\(\'.*?\'\)+;~msi',
            'id'   => 'ud64',
        ],
        [
            'full' => '~\$\w+=__FILE__;\$\w+=fopen\(\$\w+,\'rb\'\);fread\(\$\w+,(\d+)\);\$\w+=explode\("\\\\t",base64_decode\(fread\(\$\w+,(\d+)\)+;\$\w+=\$\w+\[[\d+]\];[\$l1=\d{}\.;\(\)\[\]]+eval\(\$\w+\(\'[^\']+\'\)+;\s*return\s*;\?>[\w=\+]+~msi',
            'fast' => '~\$\w+=__FILE__;\$\w+=fopen\(\$\w+,\'rb\'\);fread\(\$\w+,(\d+)\);\$\w+=explode\("\\\\t",base64_decode\(fread\(\$\w+,(\d+)\)+;\$\w+=\$\w+\[[\d+]\];[\$l1=\d{}\.;\(\)\[\]]+eval\(\$\w+\(\'[^\']+\'\)+;\s*return\s*;\?>[\w=\+]+~msi',
            'id'   => 'qibosoft',
        ],
        [
            'full' => '~(\$\w+)=base64_decode\("([^"]+)"\);\s*eval\("return\s*eval\(\\\\"\1\\\\"\);"\)~msi',
            'fast' => '~(\$\w+)=base64_decode\("([^"]+)"\);\s*eval\("return\s*eval\(\\\\"\1\\\\"\);"\)~msi',
            'id'   => 'evalReturn',
        ],
        [
            'full' => '~(?:\$[0O]+\[[\'"](\w+)[\'"]\]\.?="[\\\\\w]+";)+(?:\$[0O]+\[[\'"]\w+[\'"]\]\.?=\$[0O]+\[[\'"]\w+[\'"]\]\([\'"][\d\(]+[\'"](,__FILE__)?\);)+@eval\((?:\$[0O]+\[[\'"]\w+[\'"]\]\()+"([^"]+)"\)+;~mis',
            'fast' => '~(?:\$[0O]+\[[\'"](\w+)[\'"]\]\.?="[\\\\\w]+";)+(?:\$[0O]+\[[\'"]\w+[\'"]\]\.?=\$[0O]+\[[\'"]\w+[\'"]\]\([\'"][\d\(]+[\'"](,__FILE__)?\);)+@eval\((?:\$[0O]+\[[\'"]\w+[\'"]\]\()+"([^"]+)"\)+;~mis',
            'id'   => 'evalChars',
        ],
        [
            'full' => '~<\?php\s+((\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);)+\s*\?><\?php\s.+\2.+exit;\s}\sfunction\s\w+\(\)\s{\sreturn\sarray\(\s\'favicon\'\s=>\s\'[^\']+\',\s+\'sprites\'\s=>\s\'[^\']+\',\s\);\s}~msi',
            'fast' => '~<\?php\s+((\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);)+\s*\?><\?php\s.+\2.+exit;\s}\sfunction\s\w+\(\)\s{\sreturn\sarray\(\s\'favicon\'\s=>\s\'[^\']+\',\s+\'sprites\'\s=>\s\'[^\']+\',\s\);\s}~msi',
            'id'   => 'globalsBase64',
        ],
        [
            'full' => '~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"[^"]+"\)+;~mis',
            'fast' => '~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"[^"]+"\)+;~mis',
            'id'   => 'strrevVarEval',
        ],
        [
            'full' => '~\$\w+=basename/\*\w+\*/\(/\*\w+\*/trim/\*\w+\*/\(.+?(\$\w+)=.+\1.+?;~msi',
            'fast' => '~\$\w+=basename/\*\w+\*/\(/\*\w+\*/trim/\*\w+\*/\(.+?(\$\w+)=.+\1.+?;~msi',
            'id'   => 'comments',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+;\s*@?eval\(([\'"?>.\s]+)?\1\);~',
            'fast' => '~(\$\w+)\s*=\s*(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+;\s*@?eval\(([\'"?>.\s]+)?\1\);~',
            'id'   => 'varFuncsEval',
        ],
        [
            'full' => '~((\$\w+)="";\$\w+\s*\.=\s*"[^;]+;\s*)+(?:="";)?eval\((\s*\$\w+\s*\.)+\s*"[^"]+(?:"\);)+~msi',
            'fast' => '~((\$\w+)="";\$\w+\s*\.=\s*"[^;]+;\s*)+(?:="";)?eval\((\s*\$\w+\s*\.)+\s*"[^"]+(?:"\);)+~msi',
            'id'   => 'evalConcatVars',
        ],
        [
            'full' => '~<\?php\s*defined\(\'[^\']+\'\)\s*\|\|\s*define\(\'[^\']+\',__FILE__\);(global\s*\$[^;]+;)+\s*(if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]+,\$[^=]+=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]+=base64_decode\(\$[^\)]+\);\s*if\(\$[^=]+==\'\'\)\s*return\s*\~\$[^;]+;\s*if\(\$[^=]+==\'-1\'\)\s*@[^\(]+\(\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^\)]+\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^,]+,\$[^,]+,\$[^\)]+\);\s*return\s*\$[^^]+\^\$[^;]+;\s*}}\s*)+(\$[^\[]+\["[^"]+"]=[^\(]+\(\'[^\']+\',\'[^\']*\'\);\s*)+(\$[^\[]+\[\'[^\']+\'\]=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\([^\)]*\)+;\s*)+return\(eval\(\$[^\[]+\[\'[^\']+\'\]\)+;\s*\?>\s*#!/usr/bin/php\s*-q\s*(\s*[^\s]+)+~msi',
            'fast' => '~<\?php\s*defined\(\'[^\']{10,30}\'\)\s*\|\|\s*define\(\'[^\']{10,30}\',__FILE__\);(global\s*\$[^;]{10,30};)+\s*if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]{10,30},\$[^=]{10,30}=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]{10,30}=base64_decode~msi',
            'id'   => 'OELove',
        ],
        [
            'full' => '~\$\w+\s*=(\s*(\d+)\+)+\d+;(\$\w+="[^"]+";)+(\$\w+)\s*=\s*\w+\(\'[^\']+\',\s*\$\w+,\s*\'[^\']+\'\);.+\4\("[^"]+"\);\$\w+\s*=\s*\4;(\$\w+="[^"]+";)+.+\$\w+\(\$\w+,\$\w+\("",\s*\$\w+\(\$\w+\(\$\w+\(\$\w+\(\$\w+,\s*"(\d+)"\)+,\$\w+\);.+function \w+\((\$\w+),\s*\$\w+,\s(\$\w+)\)\s{\8\s=\s\8\s\.\s\8;.+return \7;}~msi',
            'fast' => '~\$\w+\s*=(\s*(\d+)\+)+\d+;(\$\w+="[^"]+";)+(\$\w+)\s*=\s*\w+\(\'[^\']+\',\s*\$\w+,\s*\'[^\']+\'\);.+\4\("[^"]+"\);\$\w+\s*=\s*\4;(\$\w+="[^"]+";)+~msi',
            'id'   => 'Obf_20200402_1',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*"[^"]+";\s*)?function\s(\w+)\((\$\w+),\s*(\$\w+),\s*(\$\w+)\){\s*return\s*([\'\.]*(\2|\3|\4)[\'\.]*)+;\s*}\s*(?:\$\w+\s*=\s*"[^"]+";)?(\s*\$\w+\s*=\s*\1\((((\'\')|(\$\w+)|(\$\w+[\[\{]\d+[\]\}](\.\'\')?)|(\$\w+[\[\{]\d+[\]\}]\.\$\w+[\[\{]\d+[\]\}]))\s*,?\s*)+\);\s*)+\s*\$\w+\s*=\s*\1[^"]+"\'([^\']+)\'".+?array\(\'\',\'}\'.\$\w+\.\'//\'\)\);~msi',
            'fast' => '~function\s(\w+)\((\$\w+),\s*(\$\w+),\s*(\$\w+)\){\s*return\s*([\'\.]*(\2|\3|\4)[\'\.]*)+;\s*}\s*(?:\$\w+\s*=\s*"[^"]+";)?(\s*\$\w+\s*=\s*\1\((((\'\')|(\$\w+)|(\$\w+[\[\{]\d+[\]\}](\.\'\')?)|(\$\w+[\[\{]\d+[\]\}]\.\$\w+[\[\{]\d+[\]\}]))\s*,?\s*)+\);\s*)+\s*\$\w+\s*=\s*\1[^"]+"\'([^\']+)\'".+?array\(\'\',\'}\'.\$\w+\.\'//\'\)\);~msi',
            'id'   => 'Obf_20200402_2',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+),\s*(\$\w+)\)\s*\{\s*\3\s*=\s*md5\(\3\);\s*\$\w+\s*=\s*\d+;\s*\2\s*=\s*base64_decode\(\2\);\s*\$\w+\s*=\s*strlen\(\2\);\s*\$\w+\s*=\s*strlen\(\3\);\s*\$\w+\s*=\s*\'\';\s*for\s*\(\$\w+\s*=\s\d+;\s*\$\w+\s*<\s*\$len;\s*\$\w+\+\+\)\s*\{\s*if\s*\(\$\w+\s*==\s*\$\w+\)\s*\{\s*\$\w+\s*=\s*\d+;\s*}\s*\$\w+\s*\.=\s*substr\(\3,\s*\$\w+,\s*\d+\);\s*\$\w+\+\+;\s*\}\s*\$\w+\s*=\s*\'\';\s*for\s*\(\$\w+\s*=\s*\d+;\s*\$\w+\s*<\s*\$\w+;\s*\$\w+\+\+\)\s*{\s*if\s*\(ord\(substr\(\2,\s*\$\w+,\s*\d+\)\)\s*<\s*ord\(substr\(\$\w+,\s*\$\w+,\s*\d+\)\)\)\s*\{\s*\$\w+\s*\.=\s*chr\(\(ord\(substr\(\2,\s*\$\w+,\s*\d+\)\)\s*\+\s*\d+\)\s*-\s*ord\(substr\(\$\w+,\s*\$\w+,\s*\d+\)\)\);\s*}\s*else\s*{\s*\$\w+\s*\.=\s*chr\(ord\(substr\(\2,\s*\$\w+,\s*\d+\)\)\s*-\s*ord\(substr\(\$\w+,\s*\$\w+,\s*\d+\)\)\);\s*}\s*}\s*return\s*\$\w+;\s*\}\s*\2\s*=\s*"[^"]+";\s*\3\s*=\s*"[^"]+";\s*(\$\w+)\s*=\s*\1\(\2,\s*\3\);\s*eval\(\4\);~msi',
            'fast' => '~function\s*(\w+)\((\$\w+),\s*(\$\w+)\)\s*\{\s*\3\s*=\s*md5\(\3\);\s*\$\w+\s*=\s*\d+;\s*\2\s*=\s*base64_decode\(\2\);\s*\$\w+\s*=\s*strlen\(\2\);\s*\$\w+\s*=\s*strlen\(\3\);\s*\$\w+\s*=\s*\'\';\s*for\s*\(\$\w+\s*=\s\d+;\s*\$\w+\s*<\s*\$len;\s*\$\w+\+\+\)\s*\{\s*if\s*\(\$\w+\s*==\s*\$\w+\)\s*\{\s*\$\w+\s*=\s*\d+;\s*}\s*\$\w+\s*\.=\s*substr\(\3,\s*\$\w+,\s*\d+\);\s*\$\w+\+\+;\s*\}\s*\$\w+\s*=\s*\'\';\s*for\s*\(\$\w+\s*=\s*\d+;\s*\$\w+\s*<\s*\$\w+;\s*\$\w+\+\+\)\s*{\s*if\s*\(ord\(substr\(\2,\s*\$\w+,\s*\d+\)\)\s*<\s*ord\(substr\(\$\w+,\s*\$\w+,\s*\d+\)\)\)\s*\{\s*\$\w+\s*\.=\s*chr\(\(ord\(substr\(\2,\s*\$\w+,\s*\d+\)\)\s*\+\s*\d+\)\s*-\s*ord\(substr\(\$\w+,\s*\$\w+,\s*\d+\)\)\);\s*}\s*else\s*{\s*\$\w+\s*\.=\s*chr\(ord\(substr\(\2,\s*\$\w+,\s*\d+\)\)\s*-\s*ord\(substr\(\$\w+,\s*\$\w+,\s*\d+\)\)\);\s*}\s*}\s*return\s*\$\w+;\s*\}\s*\2\s*=\s*"[^"]+";\s*\3\s*=\s*"[^"]+";\s*(\$\w+)\s*=\s*\1\(\2,\s*\3\);\s*eval\(\4\);~msi',
            'id'   => 'Obf_20200414_1',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*\'\w+\';)?\s*(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("[^"]+"\);\s*eval\(\5\);~msi',
            'fast' => '~(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("[^"]+"\);\s*eval\(\5\);~msi',
            'id'   => 'Obf_20200421_1',
        ],
        [
            'full' => '~(\$\w+)=\'([^\']+)\';(\$\w+)=str_rot13\(gzinflate\(str_rot13\(base64_decode\(\1\)\)\)\);eval\(\3\);~msi',
            'fast' => '~(\$\w+)=\'([^\']+)\';(\$\w+)=str_rot13\(gzinflate\(str_rot13\(base64_decode\(\1\)\)\)\);eval\(\3\);~msi',
            'id'   => 'SmartToolsShop',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*\("\?>"\.gzuncompress\(base64_decode\("[^"]+"\)\)\);\s*@?eval\(\1\);~msi',
            'fast' => '~(\$\w+)\s*=\s*\("\?>"\.gzuncompress\(base64_decode\("[^"]+"\)\)\);\s*@?eval\(\1\);~msi',
            'id'   => 'Obf_20200504_1',
        ],
        [
            'full' => '~(\$\w+)=base64_decode\(\'[^\']+\'\);\s*eval\(\1\);~mis',
            'fast' => '~(\$\w+)=base64_decode\(\'[^\']+\'\);\s*eval\(\1\);~mis',
            'id'   => 'Obf_20200507_1',
        ],
        [
            'full' => '~@error_reporting\(0\);\s*@ini_set\(\'error_log\',NULL\);\s*@ini_set\(\'log_errors\',0\);\s*@ini_set\(\'output_buffering\',\s*0\);\s*@ini_set\(\'display_errors\',\s*0\);\s*\$\w+="(An0n_3xPloiTeR)";\$UeXploiT="([^"]+)";\$\1="([^"]+)";exit;~msi',
            'fast' => '~@error_reporting\(0\);\s*@ini_set\(\'error_log\',NULL\);\s*@ini_set\(\'log_errors\',0\);\s*@ini_set\(\'output_buffering\',\s*0\);\s*@ini_set\(\'display_errors\',\s*0\);\s*\$\w+="(An0n_3xPloiTeR)";\$UeXploiT="([^"]+)";\$\1="([^"]+)";exit;~msi',
            'id'   => 'Obf_20200507_3',
        ],
        [
            'full' => '~(?:error_reporting\(0\);\s*ini_set\("max_execution_time",0\);\s*(?:/\*.*?\*/)?\s*)?(\$\w+)=\s*\[(("."=>".",?\s*)+)];\s*(\$\w+)=str_split\("([^"]+)"\);\s*(?:\$\w+="";)?\s*foreach\(\4\s*as\s*(\$\w+)\)\s*{\s*foreach\(\s*\1\s*as\s*(\$\w+)=>(\$\w+)\)\s*{\s*if\(\6==\(string\)\8\)\s*\{\s*\$\w+\.=\7;\s*break;\s*}\s*}\s*}~msi',
            'fast' => '~(\$\w+)=\s*\[(("."=>".",?\s*)+)];\s*(\$\w+)=str_split\("([^"]+)"\);\s*(?:\$\w+="";)?\s*foreach\(\4\s*as\s*(\$\w+)\)\s*{\s*foreach\(\s*\1\s*as\s*(\$\w+)=>(\$\w+)\)\s*{\s*if\(\6==\(string\)\8\)\s*\{\s*\$\w+\.=\7;\s*break;\s*}\s*}\s*}~msi',
            'id'   => 'Obf_20200507_4',
        ],
        [
            'full' => '~assert\("[eval"\.]+\([base64_decode\."]+\(\'([^\']+)\'\)\)"\);~msi',
            'fast' => '~assert\("[eval"\.]+\([base64_decode\."]+\(\'([^\']+)\'\)\)"\);~msi',
            'id'   => 'Obf_20200507_5',
        ],
        [
            'full' => '~parse_str\(\'([^\']+)\',(\$\w+)\);(\2\[\d+\]\()+\'[^\']+\'\),array\(\),array\(\'[^\']+\'\.(\2\[\d+\]\()+\'([^\']+)\'\)+\.\'//\'\)+;~msi',
            'fast' => '~parse_str\(\'([^\']+)\',(\$\w+)\);(\2\[\d+\]\()+\'[^\']+\'\),array\(\),array\(\'[^\']+\'\.(\2\[\d+\]\()+\'([^\']+)\'\)+\.\'//\'\)+;~msi',
            'id'   => 'Obf_20200513_1',
        ],
        [
            'full' => '~function\s{0,50}(\w+)\((\$\w+)\)\s{0,50}\{\s{0,50}\2\s{0,50}=\s{0,50}substr\(\2,\s{0,50}\(int\)\(hex2bin\(\'([0-9a-f]+)\'\)\)\);\s{0,50}\2\s{0,50}=\s{0,50}substr\(\2,\s{0,50}\(int\)\(hex2bin\(\'([0-9a-f]+)\'\)\),\s{0,50}\(int\)\(hex2bin\(\'([0-9a-f]+)\'\)\)\);\s{0,50}return\s{0,50}\2;\s{0,50}\}\s{0,50}(\$\w+)\s{0,50}=\s{0,50}\'[^\']+\';\s{0,50}(\$\w+)\s{0,50}=\s{0,50}\'base64_decode\';\s{0,50}function\s{0,50}\w+\((\$\w+)\)\s{0,50}{\s{0,50}global\s{0,50}\6;\s{0,50}global\s{0,50}\7;\s{0,50}return\s{0,50}strrev\(gzinflate\(\7\(\1\(\8\)\)\)\);\s{0,50}\}\s{0,50}([^\']+)\'\)+~msi',
            'fast' => '~function\s{0,50}(\w+)\((\$\w+)\)\s{0,50}\{\s{0,50}\2\s{0,50}=\s{0,50}substr\(\2,\s{0,50}\(int\)\(hex2bin\(\'([0-9a-f]+)\'\)\)\);\s{0,50}\2\s{0,50}=\s{0,50}substr\(\2,\s{0,50}\(int\)\(hex2bin\(\'([0-9a-f]+)\'\)\),\s{0,50}\(int\)\(hex2bin\(\'([0-9a-f]+)\'\)\)\);\s{0,50}return\s{0,50}\2;\s{0,50}\}\s{0,50}(\$\w+)\s{0,50}=\s{0,50}\'[^\']+\';\s{0,50}(\$\w+)\s{0,50}=\s{0,50}\'base64_decode\';\s{0,50}function\s{0,50}\w+\((\$\w+)\)\s{0,50}{\s{0,50}global\s{0,50}\6;\s{0,50}global\s{0,50}\7;\s{0,50}return\s{0,50}strrev\(gzinflate\(\7\(\1\(\8\)\)\)\);\s{0,50}\}\s{0,50}([^\']+)\'\)+~msi',
            'id'   => 'Obf_20200522_1',
        ],
        [
            'full' => '~(\$\w+)=strrev\("[base64_decode"\.]+\);eval\(\1\(\'([^\']+)\'\)\);~msi',
            'fast' => '~(\$\w+)=strrev\("[base64_decode"\.]+\);eval\(\1\(\'([^\']+)\'\)\);~msi',
            'id'   => 'Obf_20200526_1',
        ],
        [
            'full' => '~error_reporting\(0\);define\(\'\w+\',\s*__FILE__\);define\(\'\w+\',\s*fopen\(__FILE__,\s*\'r\'\)\);fseek\(\w+,\s*__COMPILER_HALT_OFFSET__\);((\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;)+(?:/\*\w+\*/)?__halt_compiler\(\);[\w#|>^%\[\.\]\\\\/=]+~msi',
            'fast' => '~error_reporting\(0\);define\(\'\w+\',\s*__FILE__\);define\(\'\w+\',\s*fopen\(__FILE__,\s*\'r\'\)\);fseek\(\w+,\s*__COMPILER_HALT_OFFSET__\);((\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;)+(?:/\*\w+\*/)?__halt_compiler\(\);[\w#|>^%\[\.\]\\\\/=]+~msi',
            'id'   => 'Obf_20200527_1',
        ],
        [
            'full' => '~(\$\w+)=strrev\("[base64_decode]+"\)\.str_replace\(\'(\w+)\',\'\',\'\w+\'\);\s*eval\(\1\(\$\w+\)\);~msi',
            'fast' => '~(\$\w+)=strrev\("[base64_decode]+"\)\.str_replace\(\'(\w+)\',\'\',\'\w+\'\);\s*eval\(\1\(\$\w+\)\);~msi',
            'id'   => 'Obf_20200602_1',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*base64_decode\(\1\);\s*eval\(\3\);~msi',
            'fast' => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*base64_decode\(\1\);\s*eval\(\3\);~msi',
            'id'   => 'Obf_20200720_1',
        ],
        [
            'full' => '~[\'".]+(\$\w+\s*=\s*[\'"]\w+[\'"];)+(\$\w+=\$\w+[\'.]+\$\w+;)+(\$\w+=(str_rot13|base64_decode|gzinflate)\(\$\w+\);)+eval\(\$\w+\);~msi',
            'fast' => '~[\'".]+(\$\w+\s*=\s*[\'"]\w+[\'"];)+(\$\w+=\$\w+[\'.]+\$\w+;)+(\$\w+=(str_rot13|base64_decode|gzinflate)\(\$\w+\);)+eval\(\$\w+\);~msi',
            'id'   => 'flamux',
        ],
        [
            'full' => '~function\s*(\w+)\(\)\{\s*return\s*"([^"]+)";\s*\}\s*eval\("([^"]+)"\.\1\(\)\."([^"]+)"\);~msi',
            'fast' => '~function\s*(\w+)\(\)\{\s*return\s*"([^"]+)";\s*\}\s*eval\("([^"]+)"\.\1\(\)\."([^"]+)"\);~msi',
            'id'   => 'bypass',
        ],
        [
            'full' => '~(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+(echo)\s*"(?:[<\w\\\\>\/\s={:}#]+);(?:[\\\\\w\-:]+;)+(?:[\\\\\w}:{\s#]+;)+(?:[\\\\\w}:{#\-\s]+;)+[\\\\\w}<\/]+";\$\w+=["\\\\\w]+;(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";error_reporting\(\d\);\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;set_time_limit\(\d\);\$\w+=["\\\\\w]+;(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+(if\(empty\()[\$_\w\["\\\\\]]+\)\){\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\w()]+;(}else{)\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;}chdir\(\${\$\w+}\);\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=htmlentities\(\$[_\w\["\\\\\].?]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);\1[<\\\\\w>\/"]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";(?:\$\w+=["\w\\\\]+;)+(?:\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;)+\$\w+=["\w\\\\]+;\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["\\\\\w<>=\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w=\s\/<>]+;(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\1["<\\\\\w\s\'.\${}>\/]+;\1["<\\\\\w>\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."&\w\\\\\'<\/]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;\1["<\\\\\w>\s=\'.\${}&\/]+;(?:\1["<\\\\\w>\/]+;)+\$\w+=["\\\\\w]+;\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";switch\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\){case"[\w\\\\\s]+":(?:\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;)+\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){(?:\$\w+=["\\\\\w]+;)+(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=fopen\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},"\w"\);\$\w+=["\\\\\w]+;\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=(?:(?|fread|filesize)\(\${\$\w+},?)+\)\);\${\$\w+}=str_replace\("[\w\\\\\s]+",[<\w\\\\>"]+,\${\$\w+}\);\1["\\\\\w<>=\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w=\s\/<>&\${}\']+;\1["\\\\\w\s.:]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\."[\w\\\\\s]+";\1["\\\\\w\s\'=]+\.\${\$\w+}\.["<\w\\\\>]+;\1["<\\\\\w>\s=\'\/;]+\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";(?:\$\w+=["\w\\\\]+;)+\${\$\w+}=fopen\(\${\$\w+},"\w"\);if\(fwrite\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\s\\\\\w]+;\3\1["\\\\\w\s.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\\\\\w]+;}}fclose\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);(break;case")[\w\\\\\s]+":\${\$\w+}=[\$_\w\["\]\\\\]+;if\(unlink\([\${}\w]+\)\){\1\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["\s\w\\\\.>]+;\3\$\w+=["\w\\\\]+;\1["\\\\\w\s.${}<]+;}\4[\w\\\\\s]+":(?:\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;)+\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["<\w\\\\\s=.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}.["\\\\\w&.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\s=]+;(?:\1["\w\\\\:\s\'><=\/]+;)+\3(?:\$\w+=["\w\\\\]+;)+if\(copy\(\${\$\w+},\${\$\w+}\)\){\1"[\w\\\\\s]+";\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+;}}\4[\w\\\\\s]+":(?:\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;)+\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\'\\\\\w\s=>]+;\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\1["\\\\\w\s\'=>\/;]+\3if\(rename\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3\$\w+=["\w\\\\]+;\1"[\w\\\\\s]+"\.\${\$\w+}[."\\\\\w>;]+}}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\${\$\w+}=[\$_\w\["\]\\\\]+;\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["\\\\\w\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["\\\\\w=.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["\\\\\w\s>]+;(?:\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;)+\1["\\\\\w\s=\'<\/;]+\3if\(rename\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+;}}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;if\(rmdir\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3\$\w+=["\\\\\w]+;\1"[\w\\\\\s]+"\.\${\$\w+}[."\\\\\w]+;}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";system\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\$\w+=["\w\\\\]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3\$\w+=["\w\\\\]+;if\(\${\$\w+}=fopen\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},"\w"\)\){\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;\3\$\w+=["\w\\\\]+;\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;}\$\w+=["\w\\\\]+;fclose\(\${\$\w+}\);}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\${\$\w+}=basename\([\$_\w\["\\\\\]]+\);\2\${\$\w+}\)\){\1["<\\\\\w\s=\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["&\w\\\\\s=\/\-\'>]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";if\(move_uploaded_file\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;unlink\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);\3\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+;}}\4[\w\\\\\s]+":\${\$\w+}=[\$_\w\["\]\\\\]+;\2\${\$\w+}\)\){(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=explode\(":",\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);if\(\(!is_numeric\(\${\$\w+}\[\d\]\)\)or\(!is_numeric\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\[\d\]\)\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3(?:\$\w+=["\w\\\\]+;)+\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\w\\\\]+;(?:\${\$\w+}=\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\[\d\];)+\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;while\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}<=\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=\d;\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=fsockopen\(\$\w+,\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)or\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=\d;if\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}==\d\){\$\w+=["\\\\\w]+;echo\${\$\w+}\.["\\\\\w>]+;}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\+\+;fclose\(\${\$\w+}\);}}}break;}clearstatcache\(\);(?:\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;){2}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=scandir\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);foreach\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\s\w+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\){if\(is_file\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=round\(filesize\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\/\d+,\d\);\$\w+=["\w\\\\]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\/\w\\\\>;]+\$\w+=["\\\\\w]+;\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\s<\/>]+;\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w=&]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\/<>;]+\$\w+=["\\\\\w]+;\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+\${\$\w+}[.">\w\\\\\/<]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3(?:\$\w+=["\\\\\w]+;){2}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=scandir\(\${\$\w+}\);(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";){2}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=count\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\-\d;\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+\/\w+>";\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\s=<\/]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;){3}}}\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;~msi',
            'fast' => '~(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+(echo)\s*"(?:[<\w\\\\>\/\s={:}#]+);(?:[\\\\\w\-:]+;)+(?:[\\\\\w}:{\s#]+;)+(?:[\\\\\w}:{#\-\s]+;)+[\\\\\w}<\/]+";\$\w+=["\\\\\w]+;(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";error_reporting\(\d\);\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;set_time_limit\(\d\);\$\w+=["\\\\\w]+;(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+(if\(empty\()[\$_\w\["\\\\\]]+\)\){\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\w()]+;(}else{)\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;}chdir\(\${\$\w+}\);\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=htmlentities\(\$[_\w\["\\\\\].?]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);\1[<\\\\\w>\/"]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";(?:\$\w+=["\w\\\\]+;)+(?:\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;)+\$\w+=["\w\\\\]+;\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["\\\\\w<>=\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w=\s\/<>]+;(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\1["<\\\\\w\s\'.\${}>\/]+;\1["<\\\\\w>\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."&\w\\\\\'<\/]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;\1["<\\\\\w>\s=\'.\${}&\/]+;(?:\1["<\\\\\w>\/]+;)+\$\w+=["\\\\\w]+;\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";switch\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\){case"[\w\\\\\s]+":(?:\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;)+\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){(?:\$\w+=["\\\\\w]+;)+(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=fopen\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},"\w"\);\$\w+=["\\\\\w]+;\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=(?:(?|fread|filesize)\(\${\$\w+},?)+\)\);\${\$\w+}=str_replace\("[\w\\\\\s]+",[<\w\\\\>"]+,\${\$\w+}\);\1["\\\\\w<>=\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w=\s\/<>&\${}\']+;\1["\\\\\w\s.:]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\."[\w\\\\\s]+";\1["\\\\\w\s\'=]+\.\${\$\w+}\.["<\w\\\\>]+;\1["<\\\\\w>\s=\'\/;]+\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";(?:\$\w+=["\w\\\\]+;)+\${\$\w+}=fopen\(\${\$\w+},"\w"\);if\(fwrite\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\s\\\\\w]+;\3\1["\\\\\w\s.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\\\\\w]+;}}fclose\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);(break;case")[\w\\\\\s]+":\${\$\w+}=[\$_\w\["\]\\\\]+;if\(unlink\([\${}\w]+\)\){\1\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["\s\w\\\\.>]+;\3\$\w+=["\w\\\\]+;\1["\\\\\w\s.${}<]+;}\4[\w\\\\\s]+":(?:\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;)+\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["<\w\\\\\s=.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}.["\\\\\w&.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\s=]+;(?:\1["\w\\\\:\s\'><=\/]+;)+\3(?:\$\w+=["\w\\\\]+;)+if\(copy\(\${\$\w+},\${\$\w+}\)\){\1"[\w\\\\\s]+";\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+;}}\4[\w\\\\\s]+":(?:\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;)+\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\'\\\\\w\s=>]+;\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\1["\\\\\w\s\'=>\/;]+\3if\(rename\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3\$\w+=["\w\\\\]+;\1"[\w\\\\\s]+"\.\${\$\w+}[."\\\\\w>;]+}}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\${\$\w+}=[\$_\w\["\]\\\\]+;\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["\\\\\w\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["\\\\\w=.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["\\\\\w\s>]+;(?:\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;)+\1["\\\\\w\s=\'<\/;]+\3if\(rename\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+;}}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;if\(rmdir\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3\$\w+=["\\\\\w]+;\1"[\w\\\\\s]+"\.\${\$\w+}[."\\\\\w]+;}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";system\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\$\w+=["\w\\\\]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3\$\w+=["\w\\\\]+;if\(\${\$\w+}=fopen\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},"\w"\)\){\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;\3\$\w+=["\w\\\\]+;\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;}\$\w+=["\w\\\\]+;fclose\(\${\$\w+}\);}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\${\$\w+}=basename\([\$_\w\["\\\\\]]+\);\2\${\$\w+}\)\){\1["<\\\\\w\s=\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["&\w\\\\\s=\/\-\'>]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";if\(move_uploaded_file\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;unlink\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);\3\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+;}}\4[\w\\\\\s]+":\${\$\w+}=[\$_\w\["\]\\\\]+;\2\${\$\w+}\)\){(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=explode\(":",\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);if\(\(!is_numeric\(\${\$\w+}\[\d\]\)\)or\(!is_numeric\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\[\d\]\)\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3(?:\$\w+=["\w\\\\]+;)+\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\w\\\\]+;(?:\${\$\w+}=\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\[\d\];)+\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;while\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}<=\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=\d;\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=fsockopen\(\$\w+,\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)or\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=\d;if\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}==\d\){\$\w+=["\\\\\w]+;echo\${\$\w+}\.["\\\\\w>]+;}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\+\+;fclose\(\${\$\w+}\);}}}break;}clearstatcache\(\);(?:\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;){2}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=scandir\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);foreach\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\s\w+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\){if\(is_file\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=round\(filesize\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\/\d+,\d\);\$\w+=["\w\\\\]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\/\w\\\\>;]+\$\w+=["\\\\\w]+;\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\s<\/>]+;\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w=&]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\/<>;]+\$\w+=["\\\\\w]+;\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+\${\$\w+}[.">\w\\\\\/<]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3(?:\$\w+=["\\\\\w]+;){2}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=scandir\(\${\$\w+}\);(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";){2}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=count\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\-\d;\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+\/\w+>";\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\s=<\/]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;){3}}}\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;~msi',
            'id'   => 'darkShell',
        ],
        [
            'full' => '~(\$\w+)=\'([\w\(;\$\)=\s\[\/\]."*]+)\';(\$\w+)=(?:\1\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=(?:\1\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=(?:\1\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=\s+"([\'\w\/+]+)";(\$\w+)\.=\4;\8\.=\6;\8\.=\5;@(\$\w+)=\3\(\(\'+\),\s+\(\8\)\);@\9\(\);~msi',
            'fast' => '~(\$\w+)=\'([\w\(;\$\)=\s\[\/\]."*]+)\';(\$\w+)=(?:\1\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=(?:\1\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=(?:\1\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=\s+"([\'\w\/+]+)";(\$\w+)\.=\4;\8\.=\6;\8\.=\5;@(\$\w+)=\3\(\(\'+\),\s+\(\8\)\);@\9\(\);~msi',
            'id'   => 'wso',
        ],
        [
            'full' => '~error_reporting\(\d+\);\s*function\s*class_uc_key\((\$\w+)\){\s*(\$\w+)\s*=\s*strlen\s*\(trim\(\1\)\);\s*(\$\w+)\s*=\s*\'\';\s*for\((\$\w+)\s*=\s*0;\4\s*<\s*\2;\4\+=2\)\s*{\s*\3\s*\.=\s*pack\s*\("C",hexdec\s*\(substr\s\(\1,\4,2\)\)\);\s*}\s*return\s*\3;\s*}\s*header\("\w+-\w+:\s\w+\/\w+;\s*charset=(\w+)"\);\s*(\$\w+)=class_uc_key\("(6576616C28677A756E636F6D7072657373286261736536345F6465636F64652827)"\)\.\'([\w\/\+=\\\\]+\'\)\)\);)\';\s*(\$\w+)=create_function\(\'\',\6\);\9\(\);~msi',
            'fast' => '~\w+\(\d+\);\s*function\s*class_uc_key\((\$\w+)\){\s*(\$\w+)\s*=\s*strlen\s*\(trim\(\1\)\);\s*(\$\w+)\s*=\s*\'\';\s*for\((\$\w+)\s*=\s*0;\4\s*<\s*\2;\4\+=2\)\s*{\s*\3\s*\.=\s*pack\s*\("C",hexdec\s*\(substr\s\(\1,\4,2\)\)\);\s*}\s*return\s*\3;\s*}\s*header\("\w+-\w+:\s\w+\/\w+;\s*charset=(\w+)"\);\s*(\$\w+)=class_uc_key\("(6576616C28677A756E636F6D7072657373286261736536345F6465636F64652827)"\)\.\'([\w\/\+=\\\\]+\'\)\)\);)\';\s*(\$\w+)=\w+\(\'\',\6\);\9\(\);~msi',
            'id'   => 'anonymousFox',
        ],
        [
            'full' => '~<\?php\s\$\w+=urldecode\(\'[%\w]+\'\);(?:\$\w+\.?=(?:\$\w+\{\d+\}\.?)+;)+\?><\?php\s(eval\(\$GLOBALS\[\'\w+\'\]\(\'(\w+)\'\)\);)\s\?><\?php\s\/\*\sBizden\soncekiler\sdemo\s\*\/(?:\$\w+\.?=(?:\$\w+\{?\d+\}?\.?)+;)+\$\w+=__FILE__;\$\w+=\w+;(eval\(\$\w+\(\'(\w+=)\'\)\);)return;\?[>\w|@[`\~=\+\/]+~msi',
            'fast' => '~<\?php\s\$\w+=urldecode\(\'[%\w]+\'\);(?:\$\w+\.?=(?:\$\w+\{\d+\}\.?)+;)+\?><\?php\s(eval\(\$GLOBALS\[\'\w+\'\]\(\'(\w+)\'\)\);)\s\?><\?php\s(?:\/\*\sBizden\soncekiler\sdemo\s\*\/)?(?:\$\w+\.?=(?:\$\w+\{?\d+\}?\.?)+;)+\$\w+=__FILE__;\$\w+=\w+;(eval\(\$\w+\(\'(\w+=)\'\)\);)return;\?[>\w|@[`\~=\+\/]+~msi',
            'id'   => 'bizden',
        ],
        [
            'full' => '~(\$my_sucuri_encoding)\s{0,10}=\s{0,10}[\'"]([^\'"]+)[\'"];\s{0,10}(\$tempb64)\s{0,10}=\s{0,10}base64_decode\(\s{0,10}\1\);\s{0,10}eval\(\s{0,10}\3\s{0,10}\);~msi',
            'fast' => '~(\$my_sucuri_encoding)\s{0,10}=\s{0,10}[\'"]([^\'"]+)[\'"];\s{0,10}(\$tempb64)\s{0,10}=\s{0,10}base64_decode\(\s{0,10}\1\);\s{0,10}eval\(\s{0,10}\3\s{0,10}\);~msi',
            'id'   => 'wsoEval',
        ],
        [
            'full' => '~\$fun\s=\s\'ass\';\$fun\s\.=\s\'ert\';@\$fun\(str_rot13\(\'(.*;)\'\)\);~msi',
            'fast' => '~\$fun\s=\s\'ass\';\$fun\s\.=\s\'ert\';@\$fun\(str_rot13\(\'(.*;)\'\)\);~msi',
            'id'   => 'assertStr',
        ],
        [
            'full' => '~(function\s\w+\(\$\w+,\$\w+,\$\w+\){return\sstr_replace\(\$\w+,\$\w+,\$\w+\);}\s?){3}(\$\w+)\s=\s\'(\w+)\';\s\2\s=\s(\w+)\(\'(\w+)\',\'\',\2\);\s(\$\w+)\s=\s\'(\w+)\';\s\6\s=\s\4\(\'(\w+)\',\'\',\6\);\s(\$\w+)\s=\s\'(\w+)\';\s\9\s=\s\4\(\'(\w+)\',\'\',\9\);\s(\$\w+)\s=\s\'(\$\w+)\';\s(\$\w+)\s=\s\6\(\12,\9\.\'\(\'\.\2\.\'\(\'\.\12\.\'\)\);\'\);\s\14\(\'(\w+)\'\);~msi',
            'fast' => '~(function\s\w+\(\$\w+,\$\w+,\$\w+\){return\sstr_replace\(\$\w+,\$\w+,\$\w+\);}\s?){3}(\$\w+)\s=\s\'(\w+)\';\s\2\s=\s(\w+)\(\'(\w+)\',\'\',\2\);\s(\$\w+)\s=\s\'(\w+)\';\s\6\s=\s\4\(\'(\w+)\',\'\',\6\);\s(\$\w+)\s=\s\'(\w+)\';\s\9\s=\s\4\(\'(\w+)\',\'\',\9\);\s(\$\w+)\s=\s\'(\$\w+)\';\s(\$\w+)\s=\s\6\(\12,\9\.\'\(\'\.\2\.\'\(\'\.\12\.\'\)\);\'\);\s\14\(\'(\w+)\'\);~msi',
            'id'   => 'funcVar',
        ],
        [
            'full' => '~(\$\w+)=[\'"](\w+)[\'"];(\$\w+=(?:\s?\1\[\d+\](?:\s?\.?))+;)+((?:\$\w+\(\d+\);)?(\$\w+=(\$\w+)\(["\']{2},(\$\w+\(\$\w+\(["\'][=\w\+\/]+[\'"]\)\))\);\$\w+\(\);))~msi',
            'fast' => '~(\$\w+)=[\'"](\w+)[\'"];(\$\w+=(?:\s?\1\[\d+\](?:\s?\.?))+;)+((?:\$\w+\(\d+\);)?(\$\w+=(\$\w+)\(["\']{2},(\$\w+\(\$\w+\(["\'][=\w\+\/]+[\'"]\)\))\);\$\w+\(\);))~msi',
            'id'   => 'dictionaryVars',
        ],
        [
            'full' => '~(?:(?<concatVar>\$\w+)\s?=\s?""\s?;((?:\s?(?P=concatVar)\s?\.=\s?"[\w]+"\s?;\s?)+))?(\$\w+)\s?=\s?(?:(?P=concatVar)|"(?<strVal>[\w]+)")\s?;\s?if\s?\(\s?!function_exists\s?\(\s?"(\w+)"\)\){function\s\5\(\s?(\$\w+)\){\s?(?:\$\w+=\s?""\s?;)?\s?(\$\w+)\s?=\s?strlen\s?\(\s?\6\s?\)\s?\/\s?2\s?;\s?for\s?\(\s?(\$\w+)\s?=0\s?;\s?\8\s?<\s?\7\s?;\s?\8\+\+\s?\)\s?{\s?\$\w+\s?\.=\s?chr\s?\(\s?base_convert\s?\(\s?substr\s?\(\s?\6\s?,\s?\8\s?\*\s?2\s?,\s?2\s?\)\s?,\s?16\s?,\s?10\s?\)\s?\)\s?;\s?}\s?return\s?\$\w+;\s?}\s?}\s?\$\w+\s?=\s?create_function\s?\(\s?null\s?,\s?\5\(\s?\3\)\)\s?;\s?\3\(\)\s?;~msi',
            'fast' => '~(?:(?<concatVar>\$\w+)\s?=\s?""\s?;((?:\s?(?P=concatVar)\s?\.=\s?"[\w]+"\s?;\s?)+))?(\$\w+)\s?=\s?(?:(?P=concatVar)|"(?<strVal>[\w]+)")\s?;\s?if\s?\(\s?!function_exists\s?\(\s?"(\w+)"\)\){function\s\5\(\s?(\$\w+)\){\s?(?:\$\w+=\s?""\s?;)?\s?(\$\w+)\s?=\s?strlen\s?\(\s?\6\s?\)\s?\/\s?2\s?;\s?for\s?\(\s?(\$\w+)\s?=0\s?;\s?\8\s?<\s?\7\s?;\s?\8\+\+\s?\)\s?{\s?\$\w+\s?\.=\s?chr\s?\(\s?base_convert\s?\(\s?substr\s?\(\s?\6\s?,\s?\8\s?\*\s?2\s?,\s?2\s?\)\s?,\s?16\s?,\s?10\s?\)\s?\)\s?;\s?}\s?return\s?\$\w+;\s?}\s?}\s?\$\w+\s?=\s?create_function\s?\(\s?null\s?,\s?\5\(\s?\3\)\)\s?;\s?\3\(\)\s?;~msi',
            'id'   => 'concatVarFunc',
        ],
        [
            'full' => '~function\s?(\w+)\(\){(((\$\w+)\.?="\w+";)+)return\seval\(\4\(\w+\(\)\)\);}function\s(\w+)\((\$\w+)\){((?:(\$\w+)\.?="\w+";)+)return\s\8\(\6\);}function\s?(\w+)\(\){((\$\w+)\.?="([\w\/+=]+)";)return\s(\w+)\(\11\);}function\s\13\((\$\w+)\){(\$\w+)=(\w+)\((\w+)\((\w+)\(\14\)\)\);return\s\15;}function\s\17\(\14\){(((\$\w+)\.?="\w+";)+)return\s\21\(\14\);}\1\(\);function\s\16\(\14\){(((\$\w+)\.?="\w+";)+)return\s\24\(\14\);}~msi',
            'fast' => '~function\s?(\w+)\(\){(((\$\w+)\.?="\w+";)+)return\seval\(\4\(\w+\(\)\)\);}function\s(\w+)\((\$\w+)\){((?:(\$\w+)\.?="\w+";)+)return\s\8\(\6\);}function\s?(\w+)\(\){((\$\w+)\.?="([\w\/+=]+)";)return\s(\w+)\(\11\);}function\s\13\((\$\w+)\){(\$\w+)=(\w+)\((\w+)\((\w+)\(\14\)\)\);return\s\15;}function\s\17\(\14\){(((\$\w+)\.?="\w+";)+)return\s\21\(\14\);}\1\(\);function\s\16\(\14\){(((\$\w+)\.?="\w+";)+)return\s\24\(\14\);}~msi',
            'id'   => 'concatVarFuncFunc',
        ],
        [
            'full' => '~(?:(?:\s?\$\w+\s?=\s?strrev\("\w+"\);\s?)|(?:\s?\$\w+\s?=\s?strrev\("\w+"\);\s?)|(?:\s?eval\((?:\$\w+)?\([\'"][\w=]+[\'"]\)\);\s?)|(?:\s?eval\(\$\w+\(\$\w+\(\'[\w\/+=]+\'\)\)\);\s?)){3,4}~msi',
            'fast' => '~(?:(?:\s?\$\w+\s?=\s?strrev\("\w+"\);\s?)|(?:\s?\$\w+\s?=\s?strrev\("\w+"\);\s?)|(?:\s?eval\((?:\$\w+)?\([\'"][\w=]+[\'"]\)\);\s?)|(?:\s?eval\(\$\w+\(\$\w+\(\'[\w\/+=]+\'\)\)\);\s?)){3,4}~msi',
            'id'   => 'evalVarDoubled',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?(\w+)\("([\w+\/=]+)"\);\s?echo\s?\1;~msi',
            'fast' => '~(\$\w+)\s?=\s?(\w+)\("([\w+\/=]+)"\);\s?echo\s?\1;~msi',
            'id'   => 'varFuncsEcho',
        ],
        [
            'full' => '~(\$\w+)="";\s*(?:do\s?{[^}]+}\s?while\s?\(\d+>\d+\);\s*\1=\1\."[^"]+";)?\s?(\$\w+)=(\d+);\s?(?:.*?)(\$\w+)=((?:\'[\w%]+\'\.?)+);\s?(?:.*?)\s(\$\w+)=((?:\4\[?{?\d+\]?}?\.?)+);\s?(?:function\s\w+\(\){(?:.*?);\s}\s?\1=\w+\(\1,"\w+"\);\s?|\$\w+=array\((?:\'\w+\',?)+\);\s?|\1=\w+\(\1,\sjoin\(\'\',\s\$\w+\)\s?\);\s?|\s?\$\w+\+=\d+;\s?|\1=\w+\(\1,\w+\(\)\);\s?|function\s\w+\(\){\s?|do{\s?if\s?\(\d+<\d+\)\s?{\s?|)+(?:.*?)(?:\$\w+\s?=\s?\$\w+\([\'"]{2},\s?\$\w+\(\$\w+(?:\(\1\),\s?(?:\$\w+\[\'\w+\'\]\)\s?)?|\)\s?)\);\s?\$\w+\(\);)(?:\s?function\s\w+\((?:\$\w+,\s?\$\w+)?\)(?:.*?);\s}|\s?class\s\w+\s?{(?:.*?);(?:\s}){1,2})+~msi',
            'fast' => '~(\$\w+)="";\s*(?:do\s?{[^}]+}\s?while\s?\(\d+>\d+\);\s*\1=\1\."[^"]+";)?\s?(\$\w+)=(\d+);\s?(?:.*?)(\$\w+)=((?:\'[\w%]+\'\.?)+);\s?(?:.*?)\s(\$\w+)=((?:\4\[?{?\d+\]?}?\.?)+);\s?(?:function\s\w+\(\){(?:.*?);\s}\s?\1=\w+\(\1,"\w+"\);\s?|\$\w+=array\((?:\'\w+\',?)+\);\s?|\1=\w+\(\1,\sjoin\(\'\',\s\$\w+\)\s?\);\s?|\s?\$\w+\+=\d+;\s?|\1=\w+\(\1,\w+\(\)\);\s?|function\s\w+\(\){\s?|do{\s?if\s?\(\d+<\d+\)\s?{\s?|)+(?:.*?)(?:\$\w+\s?=\s?\$\w+\([\'"]{2},\s?\$\w+\(\$\w+(?:\(\1\),\s?(?:\$\w+\[\'\w+\'\]\)\s?)?|\)\s?)\);\s?\$\w+\(\);)(?:\s?function\s\w+\((?:\$\w+,\s?\$\w+)?\)(?:.*?);\s}|\s?class\s\w+\s?{(?:.*?);(?:\s}){1,2})+~msi',
            'id'   => 'varFuncsMany',
        ],
        [
            'full' => '~((\$(?:GLOBALS|{"[\\\\\w]+"})\[[\'"]\w+["\']\])\s?=\s?[\'"]+([\\\\\w]+)["\'];)\s?(?:(\$GLOBALS\[?(\s?(?:\2|\$GLOBALS\[\'\w+\'\])\[\d+\]\.?)+\])\s?=\s?\g<5>+;\s?)+(?:\g<4>\s?=\s[\$_\w]+;\s)+(?:@\g<4>\(\g<5>+\s?,\s?\w+\s?\);\s?)+@\g<4>\(\d+\);\s{0,50}(?:if\s?\(!\g<4>\s?\(\g<5>+\)\)\s{\s{0,50}\g<4>\(\g<5>+,\s\g<5>*\d*\);\s{0,50}}?\s{0,50})*(?:\$\w+\s?=\s?\w+;\s?)*\g<4>\s?=\s\g<5>+;\s?global\s?\$\w+;\s?function\s\w+\(\$\w+,\s\$\w+\)\s{\s?\$\w+\s?=\s?["\']{2};\s?for\s?\(\$\w+\s?=\d+;\s?\$\w+\s?<\s?\g<4>\(\$\w+\)\s?;\s?\)\s?{\s?for\s?\(\s?\$\w+=\d+;\s?\$\w+\s?<\s?\g<4>\(\$\w+\)\s?&&\s?\$\w+\s?<\g<4>\(\$\w+\);\s?\$\w+\+{2},\s?\$\w+\+{2}\)\s?{\s?\$\w+\s?\.=\s?\g<4>\(\g<4>\(\$\w+\[\$\w+\]\)\s?\^\s?\g<4>\(\$\w+\[\$\w+\]\)\);\s?}\s?}\s?return\s\$\w+;\s?}\s?function\s?\w+\(\$\w+,\s?\$\w+\)\s?{\s?global\s?\$\w+;\s?return\s\g<4>\(\g<4>\(\$\w+,\s?\$\w+\),\s?\$\w+\)\s?;\s?}\s?foreach\s?\(\g<4>\sas\s\$\w+=>\$\w+\)\s?{\s?\$\w+\s?=\s?\$\w+;\s?\$\w+\s?=\s?\$\w+;\s?}\s?if\s?\(!\$\w+\)\s?{\s?foreach\s?\(\g<4>\sas\s\$\w+\s?=>\s?\$\w+\)\s?{\s?\$\w+\s?=\s?\$\w+;\s?\$\w+\s?=\s?\$\w+;\s?}\s?}\s?\$\w+\s?=\s?@\g<4>\(\g<4>\(@?\g<4>\(\$\w+\),\s?\$\w+\)\);\s?if\s?\(isset\(\$\w+\[\g<5>+\]\)\s?&&\s?\$\w+==\$\w+\[\g<5>+\]\)\s?{\s?if\s?\(\$\w+\[\g<5>\]\s?==\s?\g<5>\)\s?{\s?\$\w+\s?=\s?array\(\s?\g<5>+\s?=>\s?@\g<4>\(\),\s?\g<5>+\s?=>\s?\g<5>+,\s?\);\s?echo\s?@\g<4>\(\$\w+\);\s?}\s?elseif\s?\(\$\w+\[\g<5>\]\s?==\s?\g<5>\)\s?{\s?eval\(\$\w+\[\g<5>\]\);\s?}\s?(?:exit\(\);)?\s?}\s?}?~msi',
            'fast' => '~((\$(?:GLOBALS|{"[\\\\\w]+"})\[[\'"]\w+["\']\])\s?=\s?[\'"]+([\\\\\w]+)["\'];)\s?(?:(\$GLOBALS\[?(\s?(?:\2|\$GLOBALS\[\'\w+\'\])\[\d+\]\.?)+\])\s?=\s?\g<5>+;\s?)+(?:\g<4>\s?=\s[\$_\w]+;\s)+(?:@\g<4>\(\g<5>+\s?,\s?\w+\s?\);\s?)+@\g<4>\(\d+\);\s{0,50}(?:if\s?\(!\g<4>\s?\(\g<5>+\)\)\s{\s{0,50}\g<4>\(\g<5>+,\s\g<5>*\d*\);\s{0,50}}?\s{0,50})*(?:\$\w+\s?=\s?\w+;\s?)*\g<4>\s?=\s\g<5>+;\s?global\s?\$\w+;\s?function\s\w+\(\$\w+,\s\$\w+\)\s{\s?\$\w+\s?=\s?["\']{2};\s?for\s?\(\$\w+\s?=\d+;\s?\$\w+\s?<\s?\g<4>\(\$\w+\)\s?;\s?\)\s?{\s?for\s?\(\s?\$\w+=\d+;\s?\$\w+\s?<\s?\g<4>\(\$\w+\)\s?&&\s?\$\w+\s?<\g<4>\(\$\w+\);\s?\$\w+\+{2},\s?\$\w+\+{2}\)\s?{\s?\$\w+\s?\.=\s?\g<4>\(\g<4>\(\$\w+\[\$\w+\]\)\s?\^\s?\g<4>\(\$\w+\[\$\w+\]\)\);\s?}\s?}\s?return\s\$\w+;\s?}\s?function\s?\w+\(\$\w+,\s?\$\w+\)\s?{\s?global\s?\$\w+;\s?return\s\g<4>\(\g<4>\(\$\w+,\s?\$\w+\),\s?\$\w+\)\s?;\s?}\s?foreach\s?\(\g<4>\sas\s\$\w+=>\$\w+\)\s?{\s?\$\w+\s?=\s?\$\w+;\s?\$\w+\s?=\s?\$\w+;\s?}\s?if\s?\(!\$\w+\)\s?{\s?foreach\s?\(\g<4>\sas\s\$\w+\s?=>\s?\$\w+\)\s?{\s?\$\w+\s?=\s?\$\w+;\s?\$\w+\s?=\s?\$\w+;\s?}\s?}\s?\$\w+\s?=\s?@\g<4>\(\g<4>\(@?\g<4>\(\$\w+\),\s?\$\w+\)\);\s?if\s?\(isset\(\$\w+\[\g<5>+\]\)\s?&&\s?\$\w+==\$\w+\[\g<5>+\]\)\s?{\s?if\s?\(\$\w+\[\g<5>\]\s?==\s?\g<5>\)\s?{\s?\$\w+\s?=\s?array\(\s?\g<5>+\s?=>\s?@\g<4>\(\),\s?\g<5>+\s?=>\s?\g<5>+,\s?\);\s?echo\s?@\g<4>\(\$\w+\);\s?}\s?elseif\s?\(\$\w+\[\g<5>\]\s?==\s?\g<5>\)\s?{\s?eval\(\$\w+\[\g<5>\]\);\s?}\s?(?:exit\(\);)?\s?}\s?}?~msi',
            'id'   => 'globalArrayEval',
        ],
        [
            'full' => '~<\?php\s{0,30}(\$\w+)\s{0,30}=\s{0,30}"(.+?)";\s{0,30}((?:\$\w+\s{0,30}=\s{0,30}(?:\1\[\'\w\s{0,30}\'\s{0,30}\+\s{0,30}\d+\s{0,30}\+\s{0,30}\'\s{0,30}\w\'\]\s{0,30}\.?\s{0,30})+;\s{0,30})+)(\$\w+)\s{0,30}=\s{0,30}"(\d+)";\s{0,30}(?:\$\w+\s{0,30}=\s{0,30}\$\w+\(\s{0,30}\$\w+\s{0,30},\s{0,30}\$\w+\(\s{0,30}"\s{0,30}"\)\s{0,30},\s{0,30}"[\w\+]+"\)\s{0,30};\s{0,30})+(?:\$\w+\s{0,30}=\s{0,30}\$\w+\(\s{0,30}\$\w+\(\s{0,30}\$\w+\)\s{0,30},\s{0,30}\$\w+\(\s{0,30}?\$\w+\)\s{0,30}\)\s{0,30};\s{0,30})+\$\w+\((?:\s{0,30}\$\w+\(\s{0,30}"\s{0,20}\w\s{0,20}"\)\s{0,30}\.?\s{0,30})+"\(\\\\"\w+\\\\"\s{0,30},\s{0,30}"\s{0,30}\.\s{0,30}\$\w+\(\s{0,30}\$\w+\(\s{0,30}"\d+"\s{0,30},\s{0,30}\$\w+\(\s{0,30}"\s{0,20}"\)\s{0,30},\s{0,30}"[\d\w=]+"\)\s{0,30}\)\s{0,30}\.\s{0,30}"\s{0,30}\)\s{0,30};"\)\s{0,30};\s{0,30}\$\w+\s{0,30}=\s{0,30}\$\w+\(\w+\)\s{0,30};\s{0,30}\$\w+\(\s{0,30}(?:\$\w+\(\s{0,30}"\s{0,30}[?>]\s{0,30}"\)\s{0,30}\.\s{0,30})+(\$\w+)\(\s{0,30}(\$\w+)\(\s{0,30}(\$\w+),\s{0,30}(\$\w+)\(\s{0,30}"\s{0,30}"\)\s{0,30},\s{0,30}(\$\w+)\(\s{0,30}"([()\w@|*#\[\]&\/\+=]+)"\s{0,30},\s{0,30}(\$\w+),\s{0,30}(\$\w+)\)\s{0,30}\)\)\s{0,30}\)\s{0,30};\s{0,30}\$\w+\s?=\s?\d+\s?;\s{0,30}\?>~msi',
            'fast' => '~<\?php\s{0,30}(\$\w+)\s{0,30}=\s{0,30}"(.+?)";\s{0,30}((?:\$\w+\s{0,30}=\s{0,30}(?:\1\[\'\w\s{0,30}\'\s{0,30}\+\s{0,30}\d+\s{0,30}\+\s{0,30}\'\s{0,30}\w\'\]\s{0,30}\.?\s{0,30})+;\s{0,30})+)(\$\w+)\s{0,30}=\s{0,30}"(\d+)";\s{0,30}(?:\$\w+\s{0,30}=\s{0,30}\$\w+\(\s{0,30}\$\w+\s{0,30},\s{0,30}\$\w+\(\s{0,30}"\s{0,30}"\)\s{0,30},\s{0,30}"[\w\+]+"\)\s{0,30};\s{0,30})+(?:\$\w+\s{0,30}=\s{0,30}\$\w+\(\s{0,30}\$\w+\(\s{0,30}\$\w+\)\s{0,30},\s{0,30}\$\w+\(\s{0,30}?\$\w+\)\s{0,30}\)\s{0,30};\s{0,30})+\$\w+\((?:\s{0,30}\$\w+\(\s{0,30}"\s{0,20}\w\s{0,20}"\)\s{0,30}\.?\s{0,30})+"\(\\\\"\w+\\\\"\s{0,30},\s{0,30}"\s{0,30}\.\s{0,30}\$\w+\(\s{0,30}\$\w+\(\s{0,30}"\d+"\s{0,30},\s{0,30}\$\w+\(\s{0,30}"\s{0,20}"\)\s{0,30},\s{0,30}"[\d\w=]+"\)\s{0,30}\)\s{0,30}\.\s{0,30}"\s{0,30}\)\s{0,30};"\)\s{0,30};\s{0,30}\$\w+\s{0,30}=\s{0,30}\$\w+\(\w+\)\s{0,30};\s{0,30}\$\w+\(\s{0,30}(?:\$\w+\(\s{0,30}"\s{0,30}[?>]\s{0,30}"\)\s{0,30}\.\s{0,30})+(\$\w+)\(\s{0,30}(\$\w+)\(\s{0,30}(\$\w+),\s{0,30}(\$\w+)\(\s{0,30}"\s{0,30}"\)\s{0,30},\s{0,30}(\$\w+)\(\s{0,30}"([()\w@|*#\[\]&\/\+=]+)"\s{0,30},\s{0,30}(\$\w+),\s{0,30}(\$\w+)\)\s{0,30}\)\)\s{0,30}\)\s{0,30};\s{0,30}\$\w+\s?=\s?\d+\s?;\s{0,30}\?>~msi',
            'id'   => 'tinkleShell',
        ],
        [
            'full' => '~(?:\$\w+="\w+";)+(\$\w+)="([\w_)(;\/\.*]+)";\$\w+="\w+";function\s(\w+)\((?:\$\w+,?){3}\){return\s?""(?:\.\$\w+\.""){3};}(?:\$\w+=(?:(?:"\w+")|(?:\3\((?:\1\[\d+\],?\.?)+\))|(?:(?:\3\()+(?:\$\w+\,?(?:\)\,)?)+)(?:(?:(?:\3\()+)*(?:(?:\$\w+,?)+)*(?:\),)*(?:\)*))+);)+\$\w+=\3\((?:\1\[\d+\]\.?)+(?:,"")+\);(?:\$\w+=\3\(\3\(\$\w+,\$\w+,\$\w+\),\3\((?:\$\w+,?)+\),\3\(\$\w+,\3\(\$\w+,\$\w+,""\),\$\w+\)\)\."\'(?<str>[\w\/\+]+)\'")\.\3\((?:\1\[\d+\],?\.?)+\);\$\w+\(\$\w+,array\("","}"\.\$\w+\."\/+"\)\);~msi',
            'fast' => '~(?:\$\w+="\w+";)+(\$\w+)="([\w_)(;\/\.*]+)";\$\w+="\w+";function\s(\w+)\((?:\$\w+,?){3}\){return\s?""(?:\.\$\w+\.""){3};}(?:\$\w+=(?:(?:"\w+")|(?:\3\((?:\1\[\d+\],?\.?)+\))|(?:(?:\3\()+(?:\$\w+\,?(?:\)\,)?)+)(?:(?:(?:\3\()+)*(?:(?:\$\w+,?)+)*(?:\),)*(?:\)*))+);)+\$\w+=\3\((?:\1\[\d+\]\.?)+(?:,"")+\);(?:\$\w+=\3\(\3\(\$\w+,\$\w+,\$\w+\),\3\((?:\$\w+,?)+\),\3\(\$\w+,\3\(\$\w+,\$\w+,""\),\$\w+\)\)\."\'(?<str>[\w\/\+]+)\'")\.\3\((?:\1\[\d+\],?\.?)+\);\$\w+\(\$\w+,array\("","}"\.\$\w+\."\/+"\)\);~msi',
            'id'   => 'wsoFunc',
        ],
        [
            'full' => '~\$\w+\[\'\w+\'\]\s?=\s?"[\w;\/\.*)(]+";\s?\$\w+\[\'\w+\'\]\s?=\s?(?:\$\w+\[\'\w+\'\]\[\d+\]\.?)+;\s?\$\w+\s?=\s?(?:"[\w()]*"\.chr\([\d-]+\)\.?)+"\(";\s?\$\w+\s?=\s?"[)\\\\\w;]+";\s?\$\w+\s?=\s?\$\w+\."\'(?<str>[\w\/\+]+)\'"\.\$\w+;\s?\$\w+\[\'\w+\'\]\((?:\$\w+\[\'\w+\'\]\[\d+\]\.?)+,\s?\$\w+\s?,"\d+"\);~msi',
            'fast' => '~\$\w+\[\'\w+\'\]\s?=\s?"[\w;\/\.*)(]+";\s?\$\w+\[\'\w+\'\]\s?=\s?(?:\$\w+\[\'\w+\'\]\[\d+\]\.?)+;\s?\$\w+\s?=\s?(?:"[\w()]*"\.chr\([\d-]+\)\.?)+"\(";\s?\$\w+\s?=\s?"[)\\\\\w;]+";\s?\$\w+\s?=\s?\$\w+\."\'(?<str>[\w\/\+]+)\'"\.\$\w+;\s?\$\w+\[\'\w+\'\]\((?:\$\w+\[\'\w+\'\]\[\d+\]\.?)+,\s?\$\w+\s?,"\d+"\);~msi',
            'id'   => 'wsoFunc',
        ],
        [
            'full' => '~function\s(\w+)\((\$\w+)\)\s?{\s?\2=gzinflate\(base64_decode\(\2\)\);\s?for\((\$\w+)=\d+;\3<strlen\(\2\);\3\+\+\)\s?{\s{0,50}\2\[\3\]\s?=\s?chr\(ord\(\2\[\3\]\)-(\d+)\);\s{0,50}}\s{0,50}return\s?\2;\s?}\s{0,50}eval\(\1\([\'"]([\w\+\/=]+)[\'"]\)\);~msi',
            'fast' => '~function\s(\w+)\((\$\w+)\)\s?{\s?\2=gzinflate\(base64_decode\(\2\)\);\s?for\((\$\w+)=\d+;\3<strlen\(\2\);\3\+\+\)\s?{\s{0,50}\2\[\3\]\s?=\s?chr\(ord\(\2\[\3\]\)-(\d+)\);\s{0,50}}\s{0,50}return\s?\2;\s?}\s{0,50}eval\(\1\([\'"]([\w\+\/=]+)[\'"]\)\);~msi',
            'id'   => 'evalWanFunc',
        ],
        [
            'full' => '~if\s\(file_exists\("(\w+)"\)\){\s?}\s?else\s?{\s?(\$\w+)\s?=\s?fopen\(\'\1\.php\',\s?\'w\'\);\s?(\$\w+)\s?=\s?base64_decode\("([\w\+\/=]+)"\);\s?fwrite\(\2\s?,\3\);\s?fclose\(\2\);\s?}~msi',
            'fast' => '~if\s\(file_exists\("(\w+)"\)\){\s?}\s?else\s?{\s?(\$\w+)\s?=\s?fopen\(\'\1\.php\',\s?\'w\'\);\s?(\$\w+)\s?=\s?base64_decode\("([\w\+\/=]+)"\);\s?fwrite\(\2\s?,\3\);\s?fclose\(\2\);\s?}~msi',
            'id'   => 'funcFile',
        ],
        [
            'full' => '~(\$GLOBALS\[\'\w+\'\]\s=\sarray\((?:\s\'\w+\'\s=>\s\'?\w+\'?,)+\s\);\s((?:\$\w+=(?:\'\w+\'\.?)+;)+)(?:if\(!\$\w+\((?:\'\w*\'\.?)+\)\){function\s\w+\(\$\w+\){.*?else{function\s\w+\(\$\w+\){.*?return\s\$\w+\(\$\w+\);}}){2})\$\w+=(?:\'\w*\'\.?)+;(\$\w+)\s?=\s?\$\w+\(\'\$\w+\',\$\w+\.\'\(.\.\$\w+\.(?:\'[\w(\$);]*\'\.?)+\);\3\("([\w\/\+=]+)"\);~msi',
            'fast' => '~(\$GLOBALS\[\'\w+\'\]\s=\sarray\((?:\s\'\w+\'\s=>\s\'?\w+\'?,)+\s\);\s((?:\$\w+=(?:\'\w+\'\.?)+;)+)(?:if\(!\$\w+\((?:\'\w*\'\.?)+\)\){function\s\w+\(\$\w+\){.*?else{function\s\w+\(\$\w+\){.*?return\s\$\w+\(\$\w+\);}}){2})\$\w+=(?:\'\w*\'\.?)+;(\$\w+)\s?=\s?\$\w+\(\'\$\w+\',\$\w+\.\'\(.\.\$\w+\.(?:\'[\w(\$);]*\'\.?)+\);\3\("([\w\/\+=]+)"\);~msi',
            'id'   => 'gulf',
        ],
        [
            'full' => '~(\$\w+)=(\w+);\$\w+="(.+?)";(?:\$\w+=\$\w+;)?(\$\w+)=strlen\(\$\w+\);(\$\w+)=[\'"]{2};for\((\$\w+)=\d+;\6<\4;\6\+\+\)\s?\5\s?\.=\s?chr\(ord\(\$\w+\[\6\]\)\s?\^\s?\1\);eval\("\?>"\.\5\."<\?"\);~msi',
            'fast' => '~(\$\w+)=(\w+);\$\w+="(.+?)";(?:\$\w+=\$\w+;)?(\$\w+)=strlen\(\$\w+\);(\$\w+)=[\'"]{2};for\((\$\w+)=\d+;\6<\4;\6\+\+\)\s?\5\s?\.=\s?chr\(ord\(\$\w+\[\6\]\)\s?\^\s?\1\);eval\("\?>"\.\5\."<\?"\);~msi',
            'id'   => 'evalConcatAsciiChars',
        ],
        [
            'full' => '~(?:\$\w+="[\w=]+";\s?)+(\$\w+)\s?=\s?str_replace\((?:"\w*",?)+\);\s?(\$\w+)\s?=\s?\1\((?:"\w*",?\s?)+\);\s?(\$\w+)\s?=\s?\1\((?:"\w*",?)+\);\s?(\$\w+)\s?=\s?\3\("",\s?(\2\(\2\((\1\("([#;*,\.]+)",\s?"",\s?((?:\$\w+\.?)+)\))\)\))\);\s?\4\(\);~msi',
            'fast' => '~(?:\$\w+="[\w=]+";\s?)+(\$\w+)\s?=\s?str_replace\((?:"\w*",?)+\);\s?(\$\w+)\s?=\s?\1\((?:"\w*",?\s?)+\);\s?(\$\w+)\s?=\s?\1\((?:"\w*",?)+\);\s?(\$\w+)\s?=\s?\3\("",\s?(\2\(\2\((\1\("([#;*,\.]+)",\s?"",\s?((?:\$\w+\.?)+)\))\)\))\);\s?\4\(\);~msi',
            'id'   => 'evalPost',
        ],
        [
            'full' => '~\$\w+\s?=\s?"e\/\*\.\/";\spreg_replace\(strrev\(\$\w+\),"([\\\\\w]+)\'([\w\/\+=]+)\'([\\\\\w]+)","\."\);~msi',
            'fast' => '~\$\w+\s?=\s?"e\/\*\.\/";\spreg_replace\(strrev\(\$\w+\),"([\\\\\w]+)\'([\w\/\+=]+)\'([\\\\\w]+)","\."\);~msi',
            'id'   => 'evalPregStr',
        ],
        [
            'full' => '~\$GLOBALS\[\'\w+\'\]=array\(\'preg_re\'\s?\.\'place\'\);\s?function\s\w+\(\$\w+\)\s?{\$\w+=array\("\/\.\*\/e","([\\\\\w]+)\'([\w\/\+]+)\'([\\\\\w]+)","{2}\);\s?return\s\$\w+\[\$\w+\];}\s?\$GLOBALS\[\'\w+\'\]\[\d+\]\(\w+\(\d+\),\w+\(\d+\),\w+\(\d+\)\);~msi',
            'fast' => '~\$GLOBALS\[\'\w+\'\]=array\(\'preg_re\'\s?\.\'place\'\);\s?function\s\w+\(\$\w+\)\s?{\$\w+=array\("\/\.\*\/e","([\\\\\w]+)\'([\w\/\+]+)\'([\\\\\w]+)","{2}\);\s?return\s\$\w+\[\$\w+\];}\s?\$GLOBALS\[\'\w+\'\]\[\d+\]\(\w+\(\d+\),\w+\(\d+\),\w+\(\d+\)\);~msi',
            'id'   => 'evalPregStr',
        ],
        [
            'full' => '~class\s?\w+{\s?function\s?__destruct\(\){\s?\$this->\w+\(\'([\w&]+)\'\^"([\\\\\w]+)",array\(\(\'([#\w]+)\'\^"([\\\\\w]+)"\)\."\(base64_decode\(\'([\w\+\/=]+)\'\)\);"\)\);\s?}\s?function\s?\w+\(\$\w+,\$\w+\){\s?@array_map\(\$\w+,\$\w+\);\s?}\s?}\s?\$\w+\s?=\s?new\s?\w+\(\);~msi',
            'fast' => '~class\s?\w+{\s?function\s?__destruct\(\){\s?\$this->\w+\(\'([\w&]+)\'\^"([\\\\\w]+)",array\(\(\'([#\w]+)\'\^"([\\\\\w]+)"\)\."\(base64_decode\(\'([\w\+\/=]+)\'\)\);"\)\);\s?}\s?function\s?\w+\(\$\w+,\$\w+\){\s?@array_map\(\$\w+,\$\w+\);\s?}\s?}\s?\$\w+\s?=\s?new\s?\w+\(\);~msi',
            'id'   => 'classDestructFunc',
        ],
        [
            'full' => '~\$\w+="([\\\\\w]+)";\s?\$\w+=\$\w+\(\'([\w\+\/=]+)\'\);\s?\$\w+\s?=\s?"([\\\\\w]+)";\s?\$\w+\s?=\s?\$\w+\([\'"]{2}.\s?eval\(\$\w+\)\);\s?\$\w+\([\'"]{2}\);~msi',
            'fast' => '~\$\w+="([\\\\\w]+)";\s?\$\w+=\$\w+\(\'([\w\+\/=]+)\'\);\s?\$\w+\s?=\s?"([\\\\\w]+)";\s?\$\w+\s?=\s?\$\w+\([\'"]{2}.\s?eval\(\$\w+\)\);\s?\$\w+\([\'"]{2}\);~msi',
            'id'   => 'createFuncEval',
        ],
        [
            'full' => '~((\$\w+)="([\w-]+)";((?:\$\w+=(?:\2{\d+}\.?)+;)+)+)(header\(\'.+?\'\);)\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\'(\$\w+)=[\\\\\']+.\'(\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\$\w+\);\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\$\w+,\w+,\d+\);\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\$\w+\);return\s?\$\w+;)\'\);\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\'\$\w+\',\'\$\w+=substr\(\$\w+,\d+,\d+\);\$\w+=substr\(\$\w+,-\d+\);\$\w+=substr\(\$\w+,7,\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\$\w+\)-\d+\);return\s\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\${"[\\\\\w]+"}\["[\\\\\w]+"\]\((?:\$\w+\.?)+\)\);\'\);\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\'\$\w+=[\\\\\']+,\'\$\w+=(isset\(\${"[\\\\\w]+"}\["[\\\\\w]+"\]\)\?\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\${"[\\\\\w]+"}\["[\\\\\w]+"\]\):[\\\\\']+);\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\\\\\'([\w=]+)\\\\\'\);\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\$\w+\.\$\w+\);eval\(\$\w+\);\'\);\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\);~msi',
            'fast' => '~((\$\w+)="([\w-]+)";((?:\$\w+=(?:\2{\d+}\.?)+;)+)+)(header\(\'.+?\'\);)\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\'(\$\w+)=[\\\\\']+.\'(\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\$\w+\);\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\$\w+,\w+,\d+\);\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\$\w+\);return\s?\$\w+;)\'\);\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\'\$\w+\',\'\$\w+=substr\(\$\w+,\d+,\d+\);\$\w+=substr\(\$\w+,-\d+\);\$\w+=substr\(\$\w+,7,\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\$\w+\)-\d+\);return\s\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\${"[\\\\\w]+"}\["[\\\\\w]+"\]\((?:\$\w+\.?)+\)\);\'\);\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\'\$\w+=[\\\\\']+,\'\$\w+=(isset\(\${"[\\\\\w]+"}\["[\\\\\w]+"\]\)\?\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\${"[\\\\\w]+"}\["[\\\\\w]+"\]\):[\\\\\']+);\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\\\\\'([\w=]+)\\\\\'\);\$\w+=\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\$\w+\.\$\w+\);eval\(\$\w+\);\'\);\${"[\\\\\w]+"}\["[\\\\\w]+"\]\(\);~msi',
            'id'   => 'dictionaryCreateFuncs',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?"([\w\s=]+)";\s?(\$\w+)\s?=\s?array\(((?:\d+,?\s?)+)\);\s?(\$\w+)\s?=\s?array\(((?:"[\w\d\s\/\.]+",?\s?)+)\);\s?(\$\w+)\s?=\s?\'\';\s?(?:\$\w+\s=(?:\s?\5\[\d+\]\s?\.?)+;\s?)+(\$\w+)\s?=\s?\$\w+\("\\\\r\\\\n",\s?\1\);\s?for\((\$\w+)=0;\9\s?<\s?sizeof\(\8\);\9\+\+\){\s?\7\s\.=\s?\$\w+\(\8\[\9\]\);\s?}\s?\1\s?=\s?\7;\s?(\$\w+)\s?=\s?\3;\s?(\$\w+)\s?=\s?"";\s?for\((\$\w+)=0;\s?\12<sizeof\(\10\);\s?\12\+=2\){\s?if\(\12\s?%\s?4\){\s?\11\.=\s?substr\(\1,\10\[\12\],\10\[\12\+1\]\);\s?}else{\s?\11\.=strrev\(substr\(\1,\10\[\12\],\10\[\12\+1\]\)\);\s?}\s?};\s?\1\s?=\s?\$\w+\(\11\);\s(\$\w+)\s?=\s?array\(\);\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?;?)+;\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s?(\$\w+)\s?=\s?\'\';\s?for\((\$\w+)=0;\s?\17<strlen\(\1\);\s?\17\+=32\){\s?\13\[\]\s?=\s?substr\(\1,\s?\17,\s?32\);\s?}\s?(?:\$\w+\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s)+\$\w+\s?=\s?\'\';\s?\$\w+\s?=\s?\(\$\w+\(\$\w+\(\$\w+\)\)\)\s?%\s?sizeof\(\$\w+\);\s?\$\w+\s?=\s?\$\w+\[\$\w+\];\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;(\s?\18\s?=\s?\$_POST\[\18\];\s?(\14\s?=\s?\15\(\$_COOKIE\[\14\]\);)\s?\$\w+\s?=\s?\5\[\d+\]\s?\.\s?\5\[\d+\];\s?(eval\(\$\w+\(\18\)\);)\s?if\(!\16\){\s?((?:\$\w+\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s)+)(\$\w+\(\$\w+\);\s?echo\(\$\w+\);)\s?})~msi',
            'fast' => '~(\$\w+)\s?=\s?"([\w\s=]+)";\s?(\$\w+)\s?=\s?array\(((?:\d+,?\s?)+)\);\s?(\$\w+)\s?=\s?array\(((?:"[\w\d\s\/\.]+",?\s?)+)\);\s?(\$\w+)\s?=\s?\'\';\s?(?:\$\w+\s=(?:\s?\5\[\d+\]\s?\.?)+;\s?)+(\$\w+)\s?=\s?\$\w+\("\\\\r\\\\n",\s?\1\);\s?for\((\$\w+)=0;\9\s?<\s?sizeof\(\8\);\9\+\+\){\s?\7\s\.=\s?\$\w+\(\8\[\9\]\);\s?}\s?\1\s?=\s?\7;\s?(\$\w+)\s?=\s?\3;\s?(\$\w+)\s?=\s?"";\s?for\((\$\w+)=0;\s?\12<sizeof\(\10\);\s?\12\+=2\){\s?if\(\12\s?%\s?4\){\s?\11\.=\s?substr\(\1,\10\[\12\],\10\[\12\+1\]\);\s?}else{\s?\11\.=strrev\(substr\(\1,\10\[\12\],\10\[\12\+1\]\)\);\s?}\s?};\s?\1\s?=\s?\$\w+\(\11\);\s(\$\w+)\s?=\s?array\(\);\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?;?)+;\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s?(\$\w+)\s?=\s?\'\';\s?for\((\$\w+)=0;\s?\17<strlen\(\1\);\s?\17\+=32\){\s?\13\[\]\s?=\s?substr\(\1,\s?\17,\s?32\);\s?}\s?(?:\$\w+\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s)+\$\w+\s?=\s?\'\';\s?\$\w+\s?=\s?\(\$\w+\(\$\w+\(\$\w+\)\)\)\s?%\s?sizeof\(\$\w+\);\s?\$\w+\s?=\s?\$\w+\[\$\w+\];\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;(\s?\18\s?=\s?\$_POST\[\18\];\s?(\14\s?=\s?\15\(\$_COOKIE\[\14\]\);)\s?\$\w+\s?=\s?\5\[\d+\]\s?\.\s?\5\[\d+\];\s?(eval\(\$\w+\(\18\)\);)\s?if\(!\16\){\s?((?:\$\w+\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s)+)(\$\w+\(\$\w+\);\s?echo\(\$\w+\);)\s?})~msi',
            'id'   => 'evalPostDictionary',
        ],
        [
            'full' => '~(\$\w)\s?=\s?str_rot13\("([^"]+)"\);preg_replace\("//e","\1",""\);~msi',
            'fast' => '~(\$\w)\s?=\s?str_rot13\("([^"]+)"\);preg_replace\("//e","\1",""\);~msi',
            'id'   => 'strrotPregReplaceEval',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*[^\']+\'([^\']+)\';\s*(\$\w+)\s*=\s*\'([^\']+)\';\s*if\(!file_exists\(\$file\)+\{\s*@file_put_contents\(\1,base64_decode\(base64_decode\(\3\)+;\s*\}\s*\@include\s*\$file;~msi',
            'fast' => '~(\$\w+)\s*=\s*[^\']+\'([^\']+)\';\s*(\$\w+)\s*=\s*\'([^\']+)\';\s*if\(!file_exists\(\$file\)+\{\s*@file_put_contents\(\1,base64_decode\(base64_decode\(\3\)+;\s*\}\s*\@include\s*\$file;~msi',
            'id'   => 'dropInclude',
        ],
        [
            'full' => '~(?(DEFINE)(?\'c\'(?:/\*[^/]{0,10}/?\*/)*))(?&c)@?(eval|echo|(\$\w+)\s*=\s*create_function)(?:\/\*+\/)?\s*(?&c)\((?&c)(\'\',)?\s*([\'"?>.\s]+)?\s*\(?\s*@?\s*((?&c)base64_decode(?&c)\s*\((?&c)|(?&c)pack(?&c)\s*\(\'H\*\',|(?&c)convert_uudecode(?&c)\s*\(|(?&c)htmlspecialchars_decode(?&c)\s*\(|(?&c)stripslashes(?&c)\s*\(|(?&c)gzinflate(?&c)\s*\(|(?&c)strrev(?&c)\s*\(|(?&c)str_rot13(?&c)\s*\(|(?&c)gzuncompress(?&c)\s*\(|(?&c)urldecode(?&c)\s*\(|(?&c)rawurldecode(?&c)\s*\(|(?&c)eval(?&c)\s*\()+.*?[^\'")]+(?&c)(((?&c)\s*(?&c)\.?(?&c)[\'"]((?&c)[^\'";]+(?&c)[\'"](?&c)*\s*)+(?&c))?(?&c)\s*[\'"\);]+(?&c))+(?&c)(\s*\2\(\);(?&c))?~msi',
            'fast' => '~(?(DEFINE)(?\'c\'(?:/\*[^/]{0,10}/?\*/)*))(?&c)@?(eval|echo|(\$\w+)\s*=\s*create_function)(?:\/\*+\/)?\s*(?&c)\((?&c)(\'\',)?\s*([\'"?>.\s]+)?\s*\(?\s*@?\s*((?&c)base64_decode(?&c)\s*\((?&c)|(?&c)pack(?&c)\s*\(\'H\*\',|(?&c)convert_uudecode(?&c)\s*\(|(?&c)htmlspecialchars_decode(?&c)\s*\(|(?&c)stripslashes(?&c)\s*\(|(?&c)gzinflate(?&c)\s*\(|(?&c)strrev(?&c)\s*\(|(?&c)str_rot13(?&c)\s*\(|(?&c)gzuncompress(?&c)\s*\(|(?&c)urldecode(?&c)\s*\(|(?&c)rawurldecode(?&c)\s*\(|(?&c)eval(?&c)\s*\()+.*?[^\'")]+(?&c)(((?&c)\s*(?&c)\.?(?&c)[\'"]((?&c)[^\'";]+(?&c)[\'"](?&c)*\s*)+(?&c))?(?&c)\s*[\'"\);]+(?&c))+(?&c)(\s*\2\(\);(?&c))?~msi',
            'id'   => 'evalComments',
        ],
        [
            'full' => '~\@?error_reporting\(0\);\@?set_time_limit\(0\);\s*(\$\w+)="([^"]+)";\s*\1=\@?urldecode\(\1\);\1=\@?strrev\(\1\);\@?eval\(\1\);~msi',
            'fast' => '~\@?error_reporting\(0\);\@?set_time_limit\(0\);\s*(\$\w+)="([^"]+)";\s*\1=\@?urldecode\(\1\);\1=\@?strrev\(\1\);\@?eval\(\1\);~msi',
            'id'   => 'strrevUrldecodeEval',
        ],
        [
            'full' => '~(\$\w+\s*=\s*"\w+";\s*\@?error_reporting\(E_ERROR\);\s*\@?ini_set\(\'display_errors\',\'Off\'\);\s*\@?ini_set\(\'max_execution_time\',\d+\);\s*header\("[^"]+"\);\s*)?(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*pack\("H\*",str_rot13\(\2\)+;\s*eval\(\4\);~msi',
            'fast' => '~(\$\w+\s*=\s*"\w+";\s*\@?error_reporting\(E_ERROR\);\s*\@?ini_set\(\'display_errors\',\'Off\'\);\s*\@?ini_set\(\'max_execution_time\',\d+\);\s*header\("[^"]+"\);\s*)?(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*pack\("H\*",str_rot13\(\2\)+;\s*eval\(\4\);~msi',
            'id'   => 'evalPackStrrot',
        ],
        [
            'full' => '~\$\w+\s*=\s*\d+;\s*function\s*(\w+)\(\$\w+,\s*\$\w+\)\{\$\w+\s*=\s*\'\';\s*for[^{]+\{([^}]+\}){2}\s*\$\w{1,40}\s*=\s*((\'[^\']+\'\s*\.?\s*)+);\s*\$\w+\s*=\s*Array\(((\'\w\'=>\'\w\',?\s*)+)\);\s*eval(?:/\*[^/]\*/)*\(\1\(\$\w+,\s*\$\w+\)+;~msi',
            'fast' => '~\$\w+\s*=\s*\d+;\s*function\s*(\w+)\(\$\w+,\s*\$\w+\)\{\$\w+\s*=\s*\'\';\s*for[^{]+\{([^}]+\}){2}\s*\$\w{1,40}\s*=\s*((\'[^\']+\'\s*\.?\s*)+);\s*\$\w+\s*=\s*Array\(((\'\w\'=>\'\w\',?\s*)+)\);\s*eval(?:/\*[^/]\*/)*\(\1\(\$\w+,\s*\$\w+\)+;~msi',
            'id'   => 'urlDecodeTable',
        ],
        [
            'full' => '~((?:\$\w+=\'\w\';)+)((?:\$\w+=(\$\w+\.?)+;)+)eval\((\$\w+\()+\'([^\']+)\'\)+;~msi',
            'fast' => '~((?:\$\w+=\'\w\';)+)((?:\$\w+=(\$\w+\.?)+;)+)eval\((\$\w+\()+\'([^\']+)\'\)+;~msi',
            'id'   => 'evalVarChar',
        ],
        [
            'full' => '~(\$\w+\s*=\s*(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()+"([^"]+)"\);)\s*eval\("?(\$\w+)"?\);~msi',
            'fast' => '~(\$\w+\s*=\s*(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()+"([^"]+)"\);)\s*eval\("?(\$\w+)"?\);~msi',
            'id'   => 'evalVarFunc',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*("[\w=+/\\\\]+");\s*)+)(eval\((\$\w+\(+)+(\$\w+)\)+);~msi',
            'fast' => '~((?:\$\w+\s*=\s*("[\w=+/\\\\]+");\s*)+)(eval\((\$\w+\(+)+(\$\w+)\)+);~msi',
            'id'   => 'evalVarsFuncs',
        ],
        [
            'full' => '~<\?php\s*(?:/\*[^=\$\{\}/]{99,499}\bencipher\s*can\s*be\s*obtained\s*from:\s*https?://docs\.google\.com/[^\*\$\(;\}\{=]{1,99}\*/\s*)?(\$[^\w=(,${)}]{0,50})=\'(\w{0,50})\';((?:\$[^\w=(,${)}]{0,50}=(?:\1{\d+}\.?){0,50};){1,20})(\$[^=]{0,50}=\$[^\w=(,${)}]{1,50}\(\$[^\w=(,${)}]{1,50}\(\'\\\\{2}\',\'/\',__FILE__\)\);(?:\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}]{0,50}\);){2}\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}]{0,50}\(\'\',\$[^\w=(,${)}]{0,50}\)\.\$[^\(]{0,50}\(\$[^\w=(,${)}]{0,50},\d+,\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}]{0,50},\'@ev\'\)\);\$[^\w=(,${)}]{0,50}=\$[^\(]{0,50}\(\$[^\w=(,${)}]{0,50}\);\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}=]{0,50}=\$[^\w=(,${)}]{0,50}=NULL;@eval\(\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}(]{0,50}\(\$[^\w=(,${)}]{0,50},\'\',\$[^\w=(,${)}]{0,50}\(\'([^\']{0,500})\',\'([^\']{0,500})\',\'([^\']{0,500})\'\){4};)unset\((?:\$[^,]{0,50},?){0,20};return;\?>.+~msi',
            'fast' => '~<\?php\s*(?:/\*[^=\$\{\}/]{99,499}\bencipher\s*can\s*be\s*obtained\s*from:\s*https?://docs\.google\.com/[^\*\$\(;\}\{=]{1,99}\*/\s*)?(\$[^\w=(,${)}]{0,50})=\'(\w{0,50})\';((?:\$[^\w=(,${)}]{0,50}=(?:\1{\d+}\.?){0,50};){1,20})(\$[^=]{0,50}=\$[^\w=(,${)}]{1,50}\(\$[^\w=(,${)}]{1,50}\(\'\\\\{2}\',\'/\',__FILE__\)\);(?:\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}]{0,50}\);){2}\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}]{0,50}\(\'\',\$[^\w=(,${)}]{0,50}\)\.\$[^\(]{0,50}\(\$[^\w=(,${)}]{0,50},\d+,\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}]{0,50},\'@ev\'\)\);\$[^\w=(,${)}]{0,50}=\$[^\(]{0,50}\(\$[^\w=(,${)}]{0,50}\);\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}=]{0,50}=\$[^\w=(,${)}]{0,50}=NULL;@eval\(\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}(]{0,50}\(\$[^\w=(,${)}]{0,50},\'\',\$[^\w=(,${)}]{0,50}\(\'([^\']{0,500})\',\'([^\']{0,500})\',\'([^\']{0,500})\'\){4};)unset\((?:\$[^,]{0,50},?){0,20};return;\?>.+~msi',
            'id'   => 'evalFileContent',
        ],

        /*[
            'full' => '~goto \w+;\s*(\w+:\s*(\w+:\s*)?.*?goto\s*\w+;\s*(}\s*goto\s*\w+;)?(goto\s*\w+;)?\s*)+\w+:\s*[^;]+;(\s*goto\s*\w+;\s*\w+:\s*\w+:)?~msi',
            'fast' => '~goto \w+;\s*(\w+:\s*(\w+:\s*)?.*?goto\s*\w+;\s*(}\s*goto\s*\w+;)?(goto\s*\w+;)?\s*)+\w+:\s*[^;]+;(\s*goto\s*\w+;\s*\w+:\s*\w+:)?~msi',
            'id' => 'goto',
        ],*/

        /*[
            'full' => '~if\(isset\(\$_POST\[\'\w+\'\]\)\){echo[\s\'\w]+;\s*exit\(\);}\s*if\(isset\(\$_COOKIE\)\){(\$\w+)=\$_COOKIE;\(count\(\1\)==\d+&&in_array\(gettype\(\1\)\.count\(\1\),\1\)\)\?\(\(\1\[\d+\]=\1\[\d+\]\.\1\[\d+\]\)&&\(\1\[\d+\]=\1\[\d+\]\(\1\[\d+\]\)\)&&\(\1=\1\[\d+\]\(\1\[\d+\],\1\[\d+\]\(\1\[\d+\]\)\)\)&&\1\(\)\):\1;}\s*if\(!isset\(\$_POST\[\'\w+\'\]\)&&!isset\(\$_GET\[\'\w+\'\]\)\){exit\(\);}\s*(?:(\$\w+)\[\d+\]=\'\w+\';)+\s*if\(isset\(\$_POST\[\'\w+\'\]\)\){\$\w+=\$_POST\[\'\w+\'\];}else{\$\w+=\$_GET\[\'\w+\'\];}\s*\$\w+\s*=\s*array_flip\(str_split\(\'(\w+)\'\)\);\$\w+\s*=\s*str_split\(md5\(\$\w+\)\.md5\(\$\w+\)\);\$\w+\s*=\s*array\(\);\$\w+\s*=\s*\'\';\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{while\s*\(1\)\s*{if\(isset\(\$\w+\[\$\w+\[\$\w+\]\]\)\){\$\w+\[\$\w+\]\+\+;}else\{\$\w+\[\$\w+\[\$\w+\]\]=\'\';break;}}}\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{\$\w+\s*\.=\s*\$\w+\[\$\w+\];}\s*eval\(trim\(base64_decode\(base64_decode\(\$\w+\)\)\)\);~mis',
            'fast' => '~if\(isset\(\$_POST\[\'\w+\'\]\)\){echo[\s\'\w]+;\s*exit\(\);}\s*if\(isset\(\$_COOKIE\)\){(\$\w+)=\$_COOKIE;\(count\(\1\)==\d+&&in_array\(gettype\(\1\)\.count\(\1\),\1\)\)\?\(\(\1\[\d+\]=\1\[\d+\]\.\1\[\d+\]\)&&\(\1\[\d+\]=\1\[\d+\]\(\1\[\d+\]\)\)&&\(\1=\1\[\d+\]\(\1\[\d+\],\1\[\d+\]\(\1\[\d+\]\)\)\)&&\1\(\)\):\1;}\s*if\(!isset\(\$_POST\[\'\w+\'\]\)&&!isset\(\$_GET\[\'\w+\'\]\)\){exit\(\);}\s*(?:(\$\w+)\[\d+\]=\'\w+\';)+\s*if\(isset\(\$_POST\[\'\w+\'\]\)\){\$\w+=\$_POST\[\'\w+\'\];}else{\$\w+=\$_GET\[\'\w+\'\];}\s*\$\w+\s*=\s*array_flip\(str_split\(\'(\w+)\'\)\);\$\w+\s*=\s*str_split\(md5\(\$\w+\)\.md5\(\$\w+\)\);\$\w+\s*=\s*array\(\);\$\w+\s*=\s*\'\';\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{while\s*\(1\)\s*{if\(isset\(\$\w+\[\$\w+\[\$\w+\]\]\)\){\$\w+\[\$\w+\]\+\+;}else\{\$\w+\[\$\w+\[\$\w+\]\]=\'\';break;}}}\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{\$\w+\s*\.=\s*\$\w+\[\$\w+\];}\s*eval\(trim\(base64_decode\(base64_decode\(\$\w+\)\)\)\);~mis',
            'id' => 'scriptWithPass',
        ],*/

        /*************************************************************************************************************/
        /*                                          JS patterns                                                      */
        /*************************************************************************************************************/

        [
            'full' => '~(?:eval\()?String\.fromCharCode\(([\d,\s]+)\)+;~msi',
            'fast' => '~String\.fromCharCode\([\d,\s]+\)+;~msi',
            'id'   => 'JS_fromCharCode',
        ],
    ];

    private $full_source;
    private $prev_step;
    private $cur;
    private $obfuscated;
    private $max_level;
    private $max_time;
    private $run_time;
    private $fragments;
    private $grabed_signature_ids;

    public function __construct($text, $text2 = '', $max_level = 30, $max_time = 5)
    {
        $temp = str_replace(' ', '', $text);
        if (
            (strpos($temp, '=file(__FILE__);eval(base64_decode(')   //zeura hack
             && strpos($temp, '1)));__halt_compiler();'))
            || (strpos($temp, 'define(\'__LOCALFILE__\',__FILE__);')   //obf_20200527_1
                && strpos($temp, '__halt_compiler();'))
            || (strpos($text2, '* Bizden oncekiler demo *')) //bizden
            || (strpos($temp, '");$cvsu=$gg')) //TinkleShell
            || (strpos($text2, 'The latest version of Encipher can be obtained from')
                && strpos($text2, '\'@ev\'));')) //EvalFileContent
        ) {
            $this->text = $text2;
            $this->full_source = $text2;
        } else {
            $this->text = $text;
            $this->full_source = $text;
        }
        $this->max_level = $max_level;
        $this->max_time = $max_time;
        $this->fragments = [];
        $this->grabed_signature_ids = [];
    }

    public function getObfuscateType($str)
    {
        $str = preg_replace('~\s+~', ' ', $str);
        $l_UnicodeContent = Helpers::detect_utf_encoding($str);
        if ($l_UnicodeContent !== false) {
            if (function_exists('iconv')) {
                $str = iconv($l_UnicodeContent, "CP1251//IGNORE", $str);
            }
        }
        if(strpos($str, '# Malware list detected by AI-Bolit (http') !== false) {
            return '';
        }
        if(strpos($str, '#Malware list detected by AI-Bolit(http') !== false) {
            return '';
        }
        if(strpos($str, '<div class="header">Отчет сканера AI-Bolit</div>') !== false) {
            return '';
        }
        if (strpos($str, '$default_action="FilesMan"') !== false) {
            return '';
        }
        foreach ($this->signatures as $signature) {
            if (preg_match($signature['fast'], $str, $matches)) {
                if ($signature['id'] === 'echo') {
                    if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $matches[0])) {
                        return '';
                    }
                    if (!isset($matches[5]) || $matches[5] === '') {
                        return '';
                    }
                }
                if ($signature['id'] === 'eval') {
                    if (strpos($matches[0], 'file_get_contents') !== false) {
                        return '';
                    }
                    if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $matches[0])) {
                        return '';
                    }
                    if (strpos($matches[0], '=> array(\'eval(base64_decode(\')') !== false) {
                        return '';
                    }
                    if (@$matches[6] == '\'";') {
                        return '';
                    }
                }
                return $signature['id'];
            }
        }
        return '';
    }

    private function getObfuscateFragment($str)
    {
        foreach ($this->signatures as $signature) {
            if (preg_match($signature['full'], $str, $matches)) {
                return $matches;
            }
        }
        return '';
    }

    public function getFragments()
    {
        if (count($this->fragments) > 0) {
            return $this->fragments;
        }
        return false;
    }

    public function getGrabedSignatureIDs()
    {
        return array_keys($this->grabed_signature_ids);
    }

    private function grabFragments()
    {
        if ($this->cur == null) {
            $this->cur = $this->text;
        }
        $str = $this->cur;
        reset($this->signatures);
        while ($sign = current($this->signatures)) {
            $regex = $sign['full'];
            if (preg_match($regex, $str, $matches)) {
                $this->grabed_signature_ids[$sign['id']] = 1;
                $this->fragments[$matches[0]] = $matches[0];
                $str = str_replace($matches[0], '', $str);
            } else {
                next($this->signatures);
            }
        }
    }

    private function deobfuscateFragments()
    {
        $prev_step = '';
        if (count($this->fragments) > 0) {
            $i = 0;
            foreach ($this->fragments as $frag => $value) {
                if ($frag !== $value) {
                    continue;
                }
                $type = $this->getObfuscateType($value);
                while ($type !== '' && $i < 50) {
                    $match = $this->getObfuscateFragment($value);
                    $find = $match[0] ?? '';
                    $func = 'deobfuscate' . ucfirst($type);
                    $temp = @$this->$func($find, $match);
                    $value = str_replace($find, $temp, $value);
                    $this->fragments[$frag] = $value;
                    $type = $this->getObfuscateType($value);
                    if ($prev_step == hash('sha256', $value)) {
                        break;
                    } else {
                        $prev_step = hash('sha256', $value);
                    }
                    $i++;
                }
            }
        }
    }

    public function deobfuscate($hangs = 0, $prev_step = '')
    {
        $deobfuscated = '';
        $this->run_time = microtime(true);
        $this->cur = $this->text;
        $this->grabFragments();
        $this->deobfuscateFragments();
        $deobfuscated = $this->cur;
        if (count($this->fragments) > 0 ) {
            foreach ($this->fragments as $fragment => $text) {
                $deobfuscated = str_replace($fragment, $text, $deobfuscated);
            }
        }

        $deobfuscated = preg_replace_callback('~"[\w\\\\\s=;_<>&/\.-]+"~msi', function ($matches) {
            return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $matches[0]) ? stripcslashes($matches[0]) : $matches[0];
        }, $deobfuscated);

        $deobfuscated = preg_replace_callback('~echo\s*"((.*?[^\\\\])??((\\\\\\\\)+)?+)"~msi', function ($matches) {
            return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $matches[0]) ? stripcslashes($matches[0]) : $matches[0];
        }, $deobfuscated);

        preg_match_all('~(global\s*(\$[\w_]+);)\2\s*=\s*"[^"]+";~msi', $deobfuscated, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $deobfuscated = str_replace($match[0], '', $deobfuscated);
            $deobfuscated = str_replace($match[1], '', $deobfuscated);
        }

        preg_match_all('~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];~msi', $deobfuscated, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $deobfuscated = preg_replace_callback('~\$\{\$\{"GLOBALS"\}\[[\'"]' . $match[1] . '[\'"]\]\}~msi', function ($matches) use ($match) {
                return '$' . $match[2];
            }, $deobfuscated);
            $deobfuscated = str_replace($match[0], '', $deobfuscated);
        }

        $deobfuscated = preg_replace_callback('~\$\{(\$\w+)\}~msi', function ($matches) use ($deobfuscated) {
            if (isset($matches[1])) {
                preg_match('~\\' . $matches[1] . '\s*=\s*["\'](\w+)[\'"];~msi', $deobfuscated, $matches2);
                if (isset($matches2[1])) {
                    return '$' . $matches2[1];
                }
                return $matches[0];
            }
        }, $deobfuscated);

        if (strpos($deobfuscated, 'chr(')) {
            $deobfuscated = preg_replace_callback('~chr\((\d+)\)~msi', function ($matches) {
                return "'" . chr($matches[1]) . "'";
            }, $deobfuscated);
        }

        if (substr_count(substr($deobfuscated, 0, 200), 'base64_decode(\'') > 3) {
            $deobfuscated = preg_replace_callback('~base64_decode\(\'([^\']+)\'\)~msi', function ($matches) {
                return "'" . base64_decode($matches[1]) . "'";
            }, $deobfuscated);
        }

        if ($this->getObfuscateType($deobfuscated) !== '' && $hangs < 6) {
            $this->text = $deobfuscated;
            if ($prev_step == hash('sha256', $deobfuscated)) {
                return $deobfuscated;
            }
            $deobfuscated = $this->deobfuscate(++$hangs, hash('sha256', $deobfuscated));
        }
        return $deobfuscated;
    }

    private function deobfuscateStrrotPregReplaceEval($str, $matches)
    {
        $find = $matches[0];
        $res = str_rot13($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200618_1($str)
    {
        preg_match('~(\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\]="[\w\\\\]+";(\$\w+="\w+";)?)+.+\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\].+}+~msi', $str, $matches);
        $find = $matches[0];
        $res = stripcslashes($str);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateBypass($str, $matches)
    {
        $find = $matches[0];
        $bypass = stripcslashes($matches[2]);
        $eval = $matches[3] . $bypass . $matches[4];
        $res = str_replace($find, $eval, $str);
        return $res;
    }

    private function deobfuscateObf_20200720_1($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }



    private function deobfuscateGoto($str)
    {
        preg_match('~goto \w+;\s*(\w+:\s*(\w+:\s*)?.*?goto\s*\w+;\s*(}\s*goto\s*\w+;)?(goto\s*\w+;)?\s*)+\w+:\s*[^;]+;(\s*goto\s*\w+;\s*\w+:\s*\w+:)?~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $labels = [];
        preg_match_all('~((\w+):\s*((\w+):\s*)?(.*?goto\s*\w+;))(\s*goto\s*\w+;)?~msi', $str, $matches, PREG_SET_ORDER);
        foreach($matches as $item) {
            if (isset($item[4]) && $item[4] != '') {
                $labels[$item[4]] = $item[5];
            }
            $labels[$item[2]] = $item[5];
            $res = str_replace($item[1], '', $res);
        }
        while(preg_match('~goto\s*(\w+);~msi', $res, $matches) && isset($labels[$matches[1]])) {
            $res = str_replace($matches[0], PHP_EOL . $labels[$matches[1]] . PHP_EOL, $res);
        }

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200527_1($str)
    {
        preg_match('~error_reporting\(0\);define\(\'\w+\',\s*__FILE__\);define\(\'\w+\',\s*fopen\(__FILE__,\s*\'r\'\)\);fseek\(\w+,\s*__COMPILER_HALT_OFFSET__\);((\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;)+(?:/\*\w+\*/)?__halt_compiler\(\);([\w#|>^%\[\.\]\\\\/=]+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $encoded = $matches[6];
        $res = preg_replace_callback('~(\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;~msi', function ($m) use ($str) {
            $layer1 = hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($m[4])))));
            if (preg_match('~(\$\w+="[^"]+";)+eval\(\$\w\.(\$\w+\()+"([^"]+)"\)+;~msi', $layer1, $matches)) {
                $temp = "?>" . hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($matches[3])))));
                while (preg_match('~(\$\w+)=strrev\(\1\);(\1=\s*str_replace\([\'"]([^"\']+)[\'"],"[^"]+",\1\);)+@?eval\("\?\>"\.\$\w+\(\1\)+;~msi', $temp, $matches)) {
                    if (preg_match('~\\' . $matches[1] . '="([^"]+)";~msi', $layer1, $matches1)) {
                        $code = $matches1[1];
                        $code = strrev($code);
                        if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],"([^"]+)"~msi', $temp, $m, PREG_SET_ORDER)) {
                            foreach($m as $item) {
                                $code = str_replace($item[1], $item[2], $code);
                            }
                            $temp = base64_decode($code);
                        }
                    }
                }
                return $temp;
            }
        }, $res);
        if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],[\'"]([^"\']+)[\'"]~msi', $res, $m, PREG_SET_ORDER)) {
            foreach($m as $item) {
                $encoded = str_replace($item[1], $item[2], $encoded);
            }
            $res = base64_decode($encoded);
        }

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200602_1($str)
    {
        preg_match('~(\$\w+)=strrev\("[base64_decode]+"\)\.str_replace\(\'(\w+)\',\'\',\'\w+\'\);\s*eval\(\1\((\$\w+)\)\);~msi', $str, $matches);
        $find = $matches[0];
        $res = 'eval(base64_decode(' . $matches[3] . '));';
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200526_1($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200522_1($str, $matches)
    {
        $find = $matches[0];
        $res = strrev(gzinflate(base64_decode(substr($matches[9], (int)hex2bin($matches[3]), (int)hex2bin($matches[5])))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_5($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[1]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_4($str, $matches)
    {
        $find = $matches[0];
        $ar = $matches[2];
        $ar = explode(",\n", $ar);
        $array = [];
        foreach ($ar as $v) {
            $array[substr(trim($v),1,1)] = substr(trim($v), -2, 1);
        }
        unset($ar);
        $res = '';
        $split = str_split($matches[5]);
        foreach ($split as $x) {
            foreach ($array as $main => $val) {
                if ($x == (string)$val) {
                    $res .= $main;
                    break;
                }
            }
        }
        $res = gzinflate(base64_decode($res));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200513_1($str, $matches)
    {
        $find = $matches[0];
        $res = gzuncompress(base64_decode(strrev($matches[5])));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_3($str, $matches)
    {
        $find = $matches[0];
        $decode = htmlspecialchars_decode(gzinflate(base64_decode($matches[2])));
        $res = str_replace('$An0n_3xPloiTeR', "'" . $matches[3] . "'", $decode);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_2($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[4]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_1($str)
    {
        preg_match('~(\$\w+)=base64_decode\(\'([^\']+)\'\);\s*eval\(\1\);~mis', $str, $matches);
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200504_1($str)
    {
        preg_match('~(\$\w+)\s*=\s*\("\?>"\.gzuncompress\(base64_decode\("([^"]+)"\)\)\);\s*@?eval\(\1\);~msi', $str, $matches);
        $find = $matches[0];
        $res = ' ?>' . gzuncompress(base64_decode($matches[2]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSmartToolsShop($str, $matches)
    {
        $find = $matches[0];
        $res = str_rot13(gzinflate(str_rot13(base64_decode($matches[2]))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200421_1($str)
    {
        preg_match('~(?:\$\w+\s*=\s*\'\w+\';)?\s*(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("([^"]+)"\);\s*eval\(\5\);~msi', $str, $matches);
        $find = $matches[0];
        $res = ' ?>' . base64_decode($matches[6]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200414_1($str)
    {
        preg_match('~function\s*(\w+)\((\$\w+),\s*(\$\w+)\)\s*\{\s*\3\s*=\s*md5\(\3\);\s*\$\w+\s*=\s*\d+;\s*\2\s*=\s*base64_decode\(\2\);\s*\$\w+\s*=\s*strlen\(\2\);\s*\$\w+\s*=\s*strlen\(\3\);\s*\$\w+\s*=\s*\'\';\s*for\s*\(\$\w+\s*=\s\d+;\s*\$\w+\s*<\s*\$len;\s*\$\w+\+\+\)\s*\{\s*if\s*\(\$\w+\s*==\s*\$\w+\)\s*\{\s*\$\w+\s*=\s*\d+;\s*}\s*\$\w+\s*\.=\s*substr\(\3,\s*\$\w+,\s*\d+\);\s*\$\w+\+\+;\s*\}\s*\$\w+\s*=\s*\'\';\s*for\s*\(\$\w+\s*=\s*\d+;\s*\$\w+\s*<\s*\$\w+;\s*\$\w+\+\+\)\s*{\s*if\s*\(ord\(substr\(\2,\s*\$\w+,\s*\d+\)\)\s*<\s*ord\(substr\(\$\w+,\s*\$\w+,\s*\d+\)\)\)\s*\{\s*\$\w+\s*\.=\s*chr\(\(ord\(substr\(\2,\s*\$\w+,\s*\d+\)\)\s*\+\s*\d+\)\s*-\s*ord\(substr\(\$\w+,\s*\$\w+,\s*\d+\)\)\);\s*}\s*else\s*{\s*\$\w+\s*\.=\s*chr\(ord\(substr\(\2,\s*\$\w+,\s*\d+\)\)\s*-\s*ord\(substr\(\$\w+,\s*\$\w+,\s*\d+\)\)\);\s*}\s*}\s*return\s*\$\w+;\s*\}\s*\2\s*=\s*"([^"]+)";\s*\3\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*\1\(\2,\s*\3\);\s*eval\(\6\);~msi', $str, $matches);
        $find = $matches[0];
        $data = $matches[4];
        $key = $matches[5];
        $res = Helpers::obf20200414_1_decrypt($data, $key);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200402_2($str, $matches)
    {
        $find = $matches[0];
        $code = $matches[15];
        $code = preg_replace_callback('~\s*"\s*\.((?:min|max|round)?\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\))\s*\.\s*"~msi', function($m) {
            return substr(Helpers::calc($m[1]), 1, -1);
        }, $code);
        $res = gzinflate(base64_decode($code)) ?:base64_decode($code);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200402_1($str, $matches)
    {
        $find = $matches[0];
        $res = gzinflate(hex2bin(pack('H*',$matches[6])));
        $res = preg_replace('~//.+$~m', '', $res);
        preg_match('~\$\w+\(\$\w+,\$\w+\("",\s*\$\w+\(\$\w+\(\$\w+\(\$\w+\(\$\w+,\s*"(\d+)"\)+,\$\w+\);.+function \w+\((\$\w+),\s*\$\w+,\s(\$\w+)\)\s{\3\s=\s\3\s\.\s\3;.+return \2;}~msi', $res, $matches);
        $res = gzinflate(hex2bin(pack('H*',$matches[1])));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateOELove($str)
    {
        preg_match('~<\?php\s*defined\(\'[^\']+\'\)\s*\|\|\s*define\(\'[^\']+\',__FILE__\);(global\s*\$[^;]+;)+\s*(if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]+,\$[^=]+=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]+=base64_decode\(\$[^\)]+\);\s*if\(\$[^=]+==\'\'\)\s*return\s*\~\$[^;]+;\s*if\(\$[^=]+==\'-1\'\)\s*@[^\(]+\(\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^\)]+\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^,]+,\$[^,]+,\$[^\)]+\);\s*return\s*\$[^^]+\^\$[^;]+;\s*}}\s*)+(\$[^\[]+\["[^"]+"]=[^\(]+\(\'[^\']+\',\'[^\']*\'\);\s*)+(\$[^\[]+\[\'[^\']+\'\]=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\([^\)]*\)+;\s*)+return\(eval\(\$[^\[]+\[\'[^\']+\'\]\)+;\s*\?>\s*#!/usr/bin/php\s*-q\s*((\s*[^\s]+)+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $code = $matches[6];
        $res = iconv('UTF-8', 'ASCII//IGNORE', $res);

        preg_match('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\da-f]{32})\'\);~msi', $res, $hash);
        $hash = strrev($hash[1]);
        preg_match_all('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\d]{10})\'\)~msi', $res, $substr_offsets);
        $substr_offsets = $substr_offsets[1];
        $substr_offsets = array_map('strrev', $substr_offsets);
        $substr_offsets = array_map('intval', $substr_offsets);

        preg_match_all('~if\s*\(\!function_exists\(\'([^\']+)\'\)~msi', $res, $decoders);
        $decoders = $decoders[1];
        $var_array = [];
        preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(?:' . $decoders[0] . '|' . $decoders[1] . ')\(\'([^\']*)\',\'([^\']*)\'\);~msi', $res, $vars, PREG_SET_ORDER);
        $var_name = $vars[0][1];
        foreach ($vars as $var) {
            $var_array[$var[2]] = Helpers::OELoveDecoder($var[3], $var[4]);
            $res = str_replace($var[0], '', $res);
        }
        $layer1 = substr($code, 0, $substr_offsets[3] + 96);
        $layer1_dec = iconv('UTF-8', 'ASCII//IGNORE', gzuncompress(base64_decode($layer1)));
        $code = str_replace($layer1, $layer1_dec, $code);
        preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(?:' . $decoders[0] . '|' . $decoders[1] . ')\(\'([^\']*)\',\'([^\']*)\'\);~msi', $code, $vars, PREG_SET_ORDER);
        foreach ($vars as $var) {
            $var_array[$var[2]] = Helpers::OELoveDecoder($var[3], $var[4]);
            $code = str_replace($var[0], '', $code);
        }
        $layer2_start = strpos($code, '?>') + 2;
        $layer2 = substr($code, $layer2_start + $substr_offsets[2]);
        $layer2_dec = iconv('UTF-8', 'ASCII//IGNORE', gzuncompress(base64_decode(str_rot13($layer2))));
        $res = $layer2_dec;
        foreach($var_array as $k => $v) {
            $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\'](', $v . '(', $res);
            $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\']', '\'' . $v . '\'', $res);
        }

        $res = preg_replace_callback('~(?:' . $decoders[0] . '|' . $decoders[1] . ')\(\'([^\']*)\',\'([^\']*)\'\)~msi', function ($m) {
            return '\'' . Helpers::OELoveDecoder($m[1], $m[2]) . '\'';
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalConcatVars($str)
    {
        preg_match('~((\$\w+="";\$\w+\s*\.=\s*"[^;]+;\s*)+)(?:="";)?(eval\((\s*(\$\w+)\s*\.)+\s*"([^"]+)(?:"\);)+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $parts = [];
        preg_match_all('~(\$\w+)="";\1\s*\.=\s*"([^"]+)"~msi', $matches[1], $matches1, PREG_SET_ORDER);
        foreach($matches1 as $match) {
            $parts[$match[1]] = stripcslashes(stripcslashes($match[2]));
        }
        $res = stripcslashes(stripcslashes($matches[3]));
        foreach($parts as $k => $v) {
            $res = str_replace($k, "'" . $v . "'", $res);
        }
        $res = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', function($m) {
            return '';
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalAssignedVars($str, $matches)
    {
        $res = $str;

        $vars = [$matches[1] => $matches[2]];

        $res = preg_replace_callback('~(\$\w{1,3000})=(base64_decode|gzinflate|convert_uudecode|str_rot13)\((\$\w{1,3000})\);~msi',
            function ($match) use (&$vars) {
                $func = $match[2];
                if (Helpers::isSafeFunc($func) && isset($vars[$match[3]])) {
                    $vars[$match[1]] = @$func($vars[$match[3]]);
                    return '';
                }
                return $match[1] . '=' . $match[2] . '(\'' . $match[3] . '\';';
            }, $res);

        $res = $vars[$matches[4]] ?? Helpers::replaceVarsFromArray($vars, $res);

        return $res;
    }

    private function deobfuscateVarFuncsEval($str)
    {
        preg_match('~((\$\w+)\s*=\s*)(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+(;\s*@?eval\(([\'"?>.\s]+)?\2\);)~', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $res = str_replace($matches[5], ');', $res);
        $res = str_replace($matches[1], 'eval(', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateComments($str, $matches)
    {
        $find = $matches[0];
        $res = preg_replace('~/\*\w+\*/~msi', '', $str);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrrevVarEval($str)
    {
        preg_match('~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"([^"]+)"\)+;~mis', $str, $matches);
        $find = $matches[0];
        $res = gzinflate(base64_decode($matches[3]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAanKFM($str)
    {
        preg_match('~(\$\w+=(\w+)\(\'\d+\'\);\s*)+\$\w+=new\s\$\w+\(\2\(\'(\d+)\'\)+;error_reporting\(0\);eval\(\$\w+\(\$\w+->\$\w+\("([^"]+)"\)+;.+?function \2.+?return\s\$\w+;\s}~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $key = Helpers::aanKFMDigitsDecode($matches[3]);
        $res = Helpers::Xtea_decrypt($matches[4], $key);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalChars($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        while(preg_match_all('~(?:@eval((?:\(\$[0O]+\[[\'"]\w+[\'"]\])+)\("([^"]+)"\)+;)|("\)\?\$[O0]+)~msi', $res, $matches, PREG_SET_ORDER)) {
            $match = $matches[0];
            if (isset($matches[1])) $match = $matches[1];
            $count = ($match[1] !== '') ? substr_count($match[1], '(') : 0;
            if ($count == 2) {
                $res = gzinflate(base64_decode($match[2]));
            } else if ($count == 3) {
                $res = gzinflate(base64_decode(str_rot13($match[2])));
            }
            if (isset($match[3]) && ($match[3] !== '')) {
                $res = preg_replace_callback('~(\$[0O]+\["\w+"\]\()+"([^"]+)"\)+;?~msi', function($m) {
                    return gzinflate(base64_decode(str_rot13($m[2])));
                }, $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateGlobalsBase64($str)
    {
        preg_match('~<\?php\s+((\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);)+\s*\?>(<\?php\s.+\2.+exit;\s}\sfunction\s\w+\(\)\s{\sreturn\sarray\(\s\'favicon\'\s=>\s\'[^\']+\',\s+\'sprites\'\s=>\s\'[^\']+\',\s\);\s})~msi', $str, $matches);
        $find = $matches[0];
        $vars = [];
        preg_match_all('~(\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);~msi', $matches[0], $matches1, PREG_SET_ORDER);
        foreach($matches1 as $match) {
            $vars[$match[1]] = base64_decode($match[2]);
        }
        $code = $matches[4];
        foreach ($vars as $var => $value) {
            $code = str_replace($var . '(', $value . '(', $code);
            $code = str_replace($var, "'" . $value . "'", $code);
        }
        $res = $code;
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalReturn($str, $matches)
    {
        $find = $matches[0];
        $res = stripcslashes(base64_decode($matches[2]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateQibosoft($str)
    {
        preg_match('~\$\w+=__FILE__;\$\w+=fopen\(\$\w+,\'rb\'\);fread\(\$\w+,(\d+)\);\$\w+=explode\("\\\\t",base64_decode\(fread\(\$\w+,(\d+)\)+;\$\w+=\$\w+\[[\d+]\];[\$l1=\d{}\.;\(\)\[\]]+eval\(\$\w+\(\'([^\']+)\'\)+;\s*return\s*;\?>[\w=\+]+~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $hangs = 15;
        $obfPHP = explode('?>', $str);
        $obfPHP = $obfPHP[1];
        preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $res, $temp);
        $res = str_replace($temp[0], base64_decode($temp[1]), $res);
        $offset = $matches[2];
        while (preg_match('~\$\w+\(\$\w+,(\d+)\);\s*eval\(\$\w+\(\$\w+\(\$\w+,(\d+)\)+;~msi', $res, $temp2) && $hangs--) {
            $offset += $temp2[1];
            $decode_loop = base64_decode(substr($obfPHP, $offset, $temp2[2]));
            $offset += $temp2[2];
            if (preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $decode_loop, $temp)) {
                $res = str_replace($temp2[0], base64_decode($temp[1]), $res);
            } else {
                $res = $decode_loop;
            }

        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUd64($str)
    {
        preg_match('~(\$ud64_c[o0]m="[\\\\0-9a-z\."]+;)+\$\w+=(\$ud64_c[o0]m\()+"([^"]+)"\)+;@eval\(\$ud64_c[o0]m\(\'[^\']+\'\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = gzinflate(convert_uudecode(base64_decode(gzinflate(base64_decode(str_rot13($matches[3]))))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateCustom1($str)
    {
        preg_match('~\$\w+="([^"]+)";\$l+=0;\$l+=\'base64_decode\';\$l+=0;eval\(.+?;eval\(\$l+\);return;~msi', $str, $matches);
        $find = $matches[0];
        $res = Helpers::someDecoder3($matches[1]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateCustom2($str, $matches)
    {
        $find = $matches[0];
        $key = $matches[2];
        $var = $matches[3];
        preg_match_all('~\\' . $var . '\[\d+\]\s*=\s*"([^"]+)";~msi', $str, $matches);
        $res = base64_decode(Helpers::someDecoder4($matches[1], $key));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateLockIt2($str, $matches)
    {
        $find = $matches[0];
        $res = $matches[1];

        if(strpos($str, '$_X="') !== false && strpos($res, '\\x') !== false) {
            $res = stripcslashes($res);
        }
        if (preg_match_all('~\$[_\w]+\.=[\'"]([\w\+\/=]+)[\'"];~', $matches[0], $concatVars)) {
            foreach ($concatVars[1] as $concatVar) {
                $res .= $concatVar;
            }
        }
        $res = base64_decode($res);
        $res = strtr($res, $matches[2], $matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAnaski($str, $matches)
    {
        $find = $matches[0];

        $res = gzinflate(str_rot13(base64_decode($matches[2])));
        $res = strtr($res, $matches[5], $matches[6]);

        return $res;
    }

    private function deobfuscateFuncs($str, $matches)
    {
        $find = $matches[0];
        $funcs = [];
        $payload = $matches[7];
        $var = $matches[6];
        $res = $str;
        $res = preg_replace_callback('~function\s*(\w+)\((\$\w+)\){\s*return\s*(\w+)\(\2(,\d+)?\);}\s*~msi', function($matches2) use (&$funcs){
            $funcs[$matches2[1]] = $matches2[3];
            return '';
        }, $res);
        foreach ($funcs as $k => $v) {
            $res = str_replace($k . '(', $v . '(', $res);
        }
        $res = str_replace($var . '="' . $payload . '";', '', $res);
        $res = str_replace($var, '"' . $payload . '"', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSubstr($str)
    {
        preg_match('~\$\w+=0;(\$GLOBALS\[\'\w+\'\])\s*=\s*\'([^\']+)\';\s*(\$\w+)=pack\(\'H\*\',substr\(\1,\s*([-\d]+)\)\);if\s*\(!function_exists\(\'(\w+)\'\)\){function\s*\5\(\$\w+,\s*\$\w+\){\$\w+=\1;\s*\$d=pack\(\'H\*\',substr\(\1,\s*\4\)\);\s*return\s*\$\w+\(substr\(\$\w+,\s*\$\w+,\s*\$\w+\)\);}};eval\(\3\(\'([^\']+)\'\)\);~msi', $str, $matches);
        $find = $matches[0];
        $substr_array = $matches[2];
        $offset = intval($matches[4]);
        $func = $matches[5];
        $eval = pack('H*',substr($substr_array, $offset));
        $res = Helpers::isSafeFunc($eval) ? @$eval($matches[6]) : $matches[6];
        $res = preg_replace_callback('~' . $func . '\(([-\d]+),\s*([-\d]+)\)~mis', function ($matches) use ($eval, $substr_array) {
            $res = Helpers::isSafeFunc($eval) ? @$eval(substr($substr_array, $matches[1], $matches[2])) : $matches[0];
            return '\'' . $res . '\'';
        }, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscatePHPJiaMi($str, $matches)
    {
        $find = $matches[0];
        $bin = bin2hex($str);
        preg_match('~6257513127293b24[a-z0-9]{2,30}3d24[a-z0-9]{2,30}2827([a-z0-9]{2,30})27293b~', $bin, $hash);
        preg_match('~2827([a-z0-9]{2})27293a24~', $bin, $rand);
        $hash = hex2bin($hash[1]);
        $rand = hex2bin($rand[1]);
        $res = Helpers::PHPJiaMi_decoder(substr($matches[3], 0, -45), $hash, $rand);

        $res = str_rot13(@gzuncompress($res) ? @gzuncompress($res) : $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalIReplace($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $res = base64_decode($matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateErrorHandler($str)
    {
        preg_match('~(\$\w+)="[^"]+";\s*(\$\w+)=str_ireplace\("[^"]+","",\1\);(\$\w+)\s*=\s*"([^"]+)";\s*function\s*(\w+)\((\$\w+,?)+\){\s*(\$\w+)=\s*create_function\(\'\',\$\w+\);\s*array_map\(\7,array\(\'\'\)+;\s*}\s*set_error_handler\(\'\5\'\);(\$\w+)=\2\(\3\);user_error\(\8,E_USER_ERROR\);\s*if\s*.+?}~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $res = base64_decode($matches[4]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrtoupper($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $alph = $matches[2];
        $var = $matches[1];
        $res = str_replace("{$var}=\"{$alph}\";", '', $res);
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        $res = str_replace("' . '", '', $res);
        $res = str_replace("' '", '', $res);
        preg_match('~(\$\w+)\s*=\s*strtoupper\s*\(\s*\'(\w+)\'\s*\)\s*;~msi', $res, $matches);
        $matches[2] = strtoupper($matches[2]);
        $res = str_replace($matches[0], '', $res);
        $res = preg_replace_callback('~\${\s*\\'. $matches[1] .'\s*}~msi', function ($params) use ($matches) {
            return '$' . $matches[2];
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEval2($str)
    {
        preg_match('~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)")*)";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."([^"]+)"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi', $str, $matches);
        $res = $str;
        $find = $matches[0];
        $alph = $matches[2];
        $var = $matches[1];
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        $res = gzinflate(base64_decode(substr($matches[7], 1, -1)));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalEregReplace($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        preg_match_all('~(\$\w+)\s*=\s*ereg_replace\("([^"]+)","([^"]+)",\1\);~smi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $res = preg_replace('/' . $match[2] . '/', $match[3], $res);
        }
        $res = base64_decode($res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrreplace($str, $matches)
    {
        $find = $matches[0];
        $res = $str;

        $str_replace = '';
        $base64_decode = '';
        $layer = '';

        preg_match_all('~(\$\w+)\s*=\s*\"([^"]+)\"\s*;~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $i => $match) {
            $vars[$match[1]] = $match[2];
        }

        $res = preg_replace_callback('~(\$\w+)\s*=\s*str_replace\("(\w+)",\s*"",\s*"(\w+)"\)~msi',
            function ($matches) use (&$vars, &$str_replace) {
                $vars[$matches[1]] = str_replace($matches[2], "", $matches[3]);
                if ($vars[$matches[1]] == 'str_replace') {
                    $str_replace = $matches[1];
                }
                $tmp = $matches[1] . ' = "' . $vars[$matches[1]] . '"';
                return $tmp;
            }, $res);

        $res = preg_replace_callback('~(\$\w+)\s*=\s*\\' . $str_replace . '\("(\w+)",\s*"",\s*"(\w+)"\)~msi',
            function ($matches) use (&$vars, &$base64_decode) {
                $vars[$matches[1]] = str_replace($matches[2], "", $matches[3]);
                if ($vars[$matches[1]] == 'base64_decode') {
                    $base64_decode = $matches[1];
                }
                $tmp = $matches[1] . ' = "' . $vars[$matches[1]] . '"';
                return $tmp;
            }, $res);

        $res = preg_replace_callback('~\\' . $base64_decode . '\(\\' . $str_replace . '\("(\w+)",\s*"",\s*([\$\w\.]+)\)~msi',
            function ($matches) use (&$vars, &$layer) {
                $tmp = explode('.', $matches[2]);
                foreach ($tmp as &$item) {
                    $item = $vars[$item];
                }
                $tmp = implode('', $tmp);
                $layer = base64_decode(str_replace($matches[1], "", $tmp));
                return $matches[0];
            }, $res);

        $res = $layer;
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSeolyzer($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $vars = [];
        $base64_decode = '';
        $layer = '';
        $gzuncompress = '';
        preg_match_all('~(\$\w+)\s*=\s*\'([^\']+)\'\s*;~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $i => $match) {
            $vars[$match[1]] = $match[2];
            if ($match[2] == 'base64_decode') {
                $base64_decode = $match[1];
            }
        }

        $res = preg_replace_callback('~\s*=\s*\\' . $base64_decode . '\((\$\w+)\)~msi', function ($matches) use (&$vars, &$gzuncompress, &$layer) {
            if (isset($vars[$matches[1]])) {
                $tmp = base64_decode($vars[$matches[1]]);
                if ($tmp == 'gzuncompress') {
                    $gzuncompress = $matches[1];
                }
                $vars[$matches[1]] = $tmp;
                $tmp = " = '{$tmp}'";
            } else {
                $tmp = $matches[1];
            }
            return $tmp;
        }, $res);

        if ($gzuncompress !== '') {
            $res = preg_replace_callback('~\\' . $gzuncompress . '\(\s*\\' . $base64_decode . '\((\$\w+)\)~msi',
                function ($matches) use (&$vars, $gzuncompress, &$layer) {
                    if (isset($vars[$matches[1]])) {
                        $tmp = gzuncompress(base64_decode($vars[$matches[1]]));
                        $layer = $matches[1];
                        $vars[$matches[1]] = $tmp;
                        $tmp = "'{$tmp}'";
                    } else {
                        $tmp = $matches[1];
                    }
                    return $tmp;
                }, $res);
            $res = $vars[$layer];
        } else if (preg_match('~\$\w+\(\s*\\' . $base64_decode . '\((\$\w+)\)~msi', $res)) {
            $res = preg_replace_callback('~\$\w+\(\s*\\' . $base64_decode . '\((\$\w+)\)~msi',
                function ($matches) use (&$vars, &$layer) {
                    if (isset($vars[$matches[1]])) {
                        $tmp = base64_decode($vars[$matches[1]]);
                        $layer = $matches[1];
                        $vars[$matches[1]] = $tmp;
                        $tmp = "'{$tmp}'";
                    } else {
                        $tmp = $matches[1];
                    }
                    return $tmp;
                }, $res);
            $res = $vars[$layer];
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateCreateFunc($str, $matches)
    {
        $result = $str;
        $funcs = str_replace($matches[4], '', $matches[3]);

        if (Helpers::concatStr($matches[1]) === 'create_function'
            && Helpers::concatStr($matches[2]) === 'eval') {
            $funcs = explode('(', $funcs);
            $iMax = count($funcs) - 2;
            $final_code = $matches[5];

            for ($i = $iMax; $i >= 0; $i--) {
                if ($funcs[$i][0] !== '\'' && $funcs[$i][0] !== '"') {
                    $funcs[$i] = '\'' . $funcs[$i];
                }
                $func = Helpers::concatStr($funcs[$i] . '"');
                if (Helpers::isSafeFunc($func)) {
                    $final_code = @$func($final_code);
                }
            }
            $result = $final_code;
        }
        $result = ' ?>' . $result;

        return $result;
    }

    private function deobfuscateCreateFuncConcat($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $vars = [];
        $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode\'\.\s]+)|([eval\'\.\s]+)|([create_function\'\.\s]+)|([stripslashes\'\.\s]+)|([gzinflate\'\.\s]+)|([strrev\'\.\s]+)|([str_rot13\'\.\s]+)|([gzuncompress\'\.\s]+)|([urldecode\'\.\s]+)([rawurldecode\'\.\s]+));)~', function($matches) use (&$vars) {
            $tmp = str_replace("' . '", '', $matches[0]);
            $tmp = str_replace("'.'", '', $tmp);
            $value = str_replace("' . '", '', $matches[2]);
            $value = str_replace("'.'", '', $value);
            $vars[$matches[1]] = substr($value, 1, -1);
            return $tmp;
        }, $res);
        foreach($vars as $key => $var) {
            $res = str_replace($key, $var, $res);
            $res = str_replace($var . " = '" . $var . "';", '', $res);
            $res = str_replace($var . ' = "";', '', $res);
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalWrapVar($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $vars = [];
        $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode"\'\.\s]+)|([eval"\'\.\s]+)|([create_function"\'\.\s]+)|([stripslashes"\'\.\s]+)|([gzinflate"\'\.\s]+)|([strrev"\'\.\s]+)|([str_rot13"\'\.\s]+)|([gzuncompress"\'\.\s]+)|([urldecode"\'\.\s]+)([rawurldecode"\'\.\s]+));)~msi', function($matches) use (&$vars) {
            $tmp = str_replace("' . '", '', $matches[0]);
            $tmp = str_replace("'.'", '', $tmp);
            $value = str_replace("' . '", '', $matches[2]);
            $value = str_replace("'.'", '', $value);
            $vars[$matches[1]] = substr($value, 1, -1);
            return $tmp;
        }, $res);
        $temp = substr($res, strpos($res, '@eval'));
        $temp1 = $temp;
        foreach($vars as $key => $var) {
            $temp = str_replace($key, $var, $temp);
        }
        $res = str_replace($temp1, $temp, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateForEach($str, $matches)
    {
        $find = $matches[0];
        $alph = $matches[3];
        $vars = [];
        $res = $str;

        preg_replace('~\s*/\*\w+\*/\s*~msi', '', $res);

        $res = preg_replace_callback('~foreach\(\[([\d,]+)\]\s*as\s*\$\w+\)\s*\{\s*(\$\w+)\s*\.=\s*\$\w+\[\$\w+\];\s*\}~mis', function($matches) use ($alph, &$vars) {
            $chars = explode(',', $matches[1]);
            $value = '';
            foreach ($chars as $char) {
                $value .= $alph[$char];
            }
            $vars[$matches[2]] = $value;
            return "{$matches[2]} = '{$value}';";
        }, $res);

        foreach($vars as $key => $var) {
            $res = str_replace($key, $var, $res);
            $res = str_replace($var . " = '" . $var . "';", '', $res);
            $res = str_replace($var . ' = "";', '', $res);
        }

        preg_match('~(\$\w+)\s*=\s*strrev\([create_function\.\']+\);~ms', $res, $matches);
        $res = str_replace($matches[0], '', $res);
        $res = str_replace($matches[1], 'create_function', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSubst2($str)
    {
        preg_match('~(\$\w+)="([^"])+(.{0,70}\1.{0,400})+;\s*}~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        preg_match('~(\$\w+)="(.+?)";~msi', $str, $matches);
        $alph = stripcslashes($matches[2]);
        $var = $matches[1];
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        preg_match_all('~(\$GLOBALS\[\'\w{1,40}\'\])\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);

        foreach ($matches as $index => $var) {
            $res = str_replace($var[1], $var[2], $res);
            $res = str_replace($var[2] . " = '" . $var[2] . "';", '', $res);
        }

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAssert($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrlDecode2($str)
    {
        preg_match('~(\$[\w{1,40}]+)=(urldecode|base64_decode)\(?[\'"]([\w+%=-]+)[\'"]\);(\s*\$\w+\.?=(\$\w+\{\d+\}\s*[\.;]?\s*)+)+((\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*,\s]+);|(eval\(\$\w+\([\'"]([^\'"]+)[\'"]\)+;))~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        if (isset($matches[10])) {
            $res = base64_decode($matches[10]);
        }
        if (preg_match('~\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*,\s]+;~msi', $res, $matches)) {
            $res = base64_decode(strtr(substr($matches[1], 52*2), substr($matches[1], 52, 52), substr($matches[1], 0, 52)));
        }

        if (preg_match('~function\s*(\w+)\(\$\w+\)[\w{\$=\s*();<+\[\]\-]+\}\s+return[\$\s\w;]+}eval\(\1\("([\w\/+=]+)?"\)\);~', $res, $match)) {
            $res = gzinflate(base64_decode($match[2]));
            for ($i=0; $i < strlen($res); $i++)
            {
                $res[$i] = chr(ord($res[$i])-1);
            }
            $res = str_replace($find, $res, $str);
            return $res;
        }

        $res = str_replace($find, ' ?>' . $res, $str);
        return $res;
    }

    private function deobfuscatePHPMyLicense($str)
    {
        preg_match('~\$\w+\s*=\s*base64_decode\s*\([\'"][^\'"]+[\'"]\);\s*if\s*\(!function_exists\s*\("rotencode"\)\).{0,1000}eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $hang = 10;
        while(preg_match('~eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $res, $matches) && $hang--) {
            $res = gzinflate(base64_decode($matches[1]));
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEdoced_46esab($str)
    {
        preg_match('~(\$\w+)=[\'"]([^"\']+)[\'"];(\$\w+)=strrev\(\'edoced_46esab\'\);eval\(\3\([\'"]([^\'"]+)[\'"]\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = '';
        $decoder = base64_decode($matches[4]);
        preg_match('~(\$\w+)=base64_decode\(\$\w+\);\1=strtr\(\1,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\);~msi', $decoder, $matches2);
        $res = base64_decode($matches[2]);
        $res = strtr($res, $matches2[2], $matches2[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEdoced_46esab_etalfnizg($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateEvalVarVar($str)
    {
        preg_match('~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\']\2[\'"];(\${\$\{"GLOBALS"\}\[[\'"]\3[\'"]\]})=[\'"]([^\'"]+)[\'"];eval.{10,50}?(\$\{\$\{"GLOBALS"\}\[[\'"]\1[\'"]\]\})\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = str_replace($matches[4], '$' . $matches[2], $str);
        $res = str_replace($matches[6], '$' . $matches[2], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEscapes($str, $matches)
    {
        $find = $matches[0];
        $res = stripcslashes($str);
        $res = str_replace($find, $res, $str);
        return $res;
    }


    private function deobfuscateparenthesesString($str)
    {
        $hangs = 5;
        $res = $str;
        $find = '';
        while (preg_match('~for\((\$\w+)=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);(if\(isset\(\$_(GET|REQUEST|POST|COOKIE)\[[\'"][^\'"]+[\'"]\]\)\)\{[^}]+;\})?~msi', $res, $matches) && $hangs--) {
            if($hangs == 4) {
                $find = $matches[0];
            }
            $res = '';
            $temp = [];
            $matches[3] = stripcslashes($matches[3]);
            for($i=0, $iMax = strlen($matches[3]); $i < $iMax; $i++)
            {
                if($i < 16) $temp[$matches[3][$i]] = $i;
                else $res .= @chr(($temp[$matches[3][$i]]<<4) + ($temp[$matches[3][++$i]]));
            }
        }
        if(!isset($matches[6])) {
            //$xor_key = 'SjJVkE6rkRYj';
            $xor_key = $res^"\n//adjust sy"; //\n//adjust system variables";
            $res = $res ^ substr(str_repeat($xor_key, (strlen($res) / strlen($xor_key)) + 1), 0, strlen($res));
        }
        if(substr($res,0,12)=="\n//adjust sy") {
            $res = str_replace($find, $res, $str);
            return $res;
        } else return $str;
    }

    private function deobfuscateEvalInject($str, $matches)
    {
        $res = $str;
        $find = $matches[0];
        $alph = $matches[2];

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[1] . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[1] . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }

        $res = str_replace("''", '', $res);
        $res = str_replace("' '", '', $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateWebshellObf($str)
    {
        $res = $str;
        preg_match('~function\s*(\w{1,40})\s*\(\s*(\$\w{1,40})\s*,\s*(\$\w{1,40})\s*\)\s*\{\s*(\$\w{1,40})\s*=\s*str_rot13\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)\s*\)\s*\)\s*\)\s*;\s*(if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*(\$\w{1,40})\s*=(\$\w+[\{\[]\d+[\}\]]\.?)+;return\s*(\$\w+)\(\3\);\s*\}\s*else\s*)+\s*if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*return\s*eval\(\3\);\s*\}\s*\};\s*(\$\w{1,40})\s*=\s*[\'"][^\'"]*[\'"];(\s*\10\([\'"][^\'"]*[\'"],)+\s*[\'"]([^\'"]*)[\'"]\s*\)+;~msi',$str, $matches);
        $find = $matches[0];

        $alph = str_rot13(gzinflate(str_rot13(base64_decode($matches[5]))));

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[4] . '{' . $i . '}.', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[4] . '{' . $i . '}', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);

        $res = base64_decode(gzinflate(str_rot13(convert_uudecode(gzinflate(base64_decode(strrev($matches[12])))))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateXorFName($str, $matches, $xor_key = null)
    {
        if (!isset($matches)) {
            preg_match('~(?(DEFINE)(?\'c\'(?:/\*\w+\*/)*))(\$\w+)\s*=\s*basename(?&c)\((?&c)trim(?&c)\((?&c)preg_replace(?&c)\((?&c)rawurldecode(?&c)\((?&c)"[%0-9A-F\.]+"(?&c)\)(?&c),\s*\'\',\s*__FILE__(?&c)\)(?&c)\)(?&c)\)(?&c);(\$\w+)\s*=\s*"([%\w\.\-\~]+)";(?:(\$\w+)=[^;]+;\5(?&c)\((?&c)\'\',\s*\'};\'\s*\.\s*(?&c)\()?(?:eval(?&c)\()?(?&c)rawurldecode(?&c)\((?&c)\3(?&c)\)(?&c)\s*\^\s*substr(?&c)\((?&c)str_repeat(?&c)\((?&c)\2,\s*(?&c)\((?&c)strlen(?&c)\((?&c)\3(?&c)\)(?&c)/strlen(?&c)\((?&c)\2(?&c)\)(?&c)\)(?&c)\s*\+\s*1(?&c)\)(?&c),\s*0,(?&c)\s*strlen(?&c)\((?&c)\3(?&c)\)(?&c)\)(?&c)\)(?:(?&c)\s*\.\s*\'{\'(?&c)\))?(?&c);~msi', $str, $matches);
        }
        $encrypted = rawurldecode($matches[4]);
        if (!isset($xor_key)) {
            $plain_text = '@ini_set(\'error_log\', NULL);';
            $plain_text2 = 'if (!defined(';
            $xor_key = substr($encrypted, 0, strlen($plain_text)) ^ $plain_text;
            if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) {
                $xor_key = $m[0];
            } else {
                $xor_key = substr($encrypted, 0, strlen($plain_text2)) ^ $plain_text2;
                if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) {
                    $xor_key = $m[0];
                }
            }
        }
        $result = $encrypted ^ substr(str_repeat($xor_key, (strlen($encrypted) / strlen($xor_key)) + 1), 0, strlen($encrypted));
        return $result;
    }

    private function deobfuscateSubstCreateFunc($str)
    {
        preg_match('~(\$\w{1,40})=\'(([^\'\\\\]|\\\\.)*)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';\s*(\$\w{1,40})\(\7,\$\w{1,40}\.\"([^\"]+)\"\.\$\w{1,40}\.\5\);~msi', $str, $matches);
        $find = $matches[0];
        $php = base64_decode($matches[9]);
        preg_match('~(\$\w{1,40})=(\$\w{1,40})\("([^\']+)"\)~msi', $php, $matches);
        $matches[3] = base64_decode($matches[3]);
        $php = '';
        for ($i = 1, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
            if ($i % 2) {
                $php .= substr($matches[3], $i, 1);
            }
        }
        $php = str_replace($find, $php, $str);
        return $php;
    }

    private function deobfuscateZeura($str, $matches)
    {
        $offset = intval($matches[8]) + intval($matches[9]);
        $obfPHP = explode('__halt_compiler();', $str);
        $obfPHP = end($obfPHP);
        $php = gzinflate(base64_decode(substr(trim($obfPHP), $offset)));
        $php = stripcslashes($php);
        $php = str_replace($matches[0], $php, $str);
        return $php;
    }

    private function deobfuscateSourceCop($str, $matches)
    {
        $key = $matches[2];
        $obfPHP = $matches[1];
        $res = '';
        $index = 0;
        $len = strlen($key);
        $temp = hexdec('&H' . substr($obfPHP, 0, 2));
        for ($i = 2, $iMax = strlen($obfPHP); $i < $iMax; $i += 2) {
            $bytes = hexdec(trim(substr($obfPHP, $i, 2)));
            $index = (($index < $len) ? $index + 1 : 1);
            $decoded = $bytes ^ ord(substr($key, $index - 1, 1));
            if ($decoded <= $temp) {
                $decoded = 255 + $decoded - $temp;
            } else {
                $decoded = $decoded - $temp;
            }
            $res = $res . chr($decoded);
            $temp = $bytes;
        }
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateGlobalsArray($str, $matches)
    {
        $res = $str;
        $alph = stripcslashes($matches[3]);
        $res = preg_replace('~\${"[\\\\x0-9a-f]+"}\[\'\w+\'\]\s*=\s*"[\\\\x0-9a-f]+";~msi', '', $res);

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[1] .'[' . $matches[2] . ']' . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[1] .'[' . $matches[2] . ']' . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);

        preg_match_all('~\\' . $matches[1] . '\[(\'\w+\')]\s*=\s*\'(\w+)\';~msi', $res, $funcs);

        $vars = $funcs[1];
        $func = $funcs[2];

        foreach ($vars as $index => $var) {
            $res = str_replace($matches[1] . '[' . $var . ']', $func[$index], $res);
        }

        foreach ($func as $remove) {
            $res = str_replace($remove . " = '" . $remove . "';", '', $res);
            $res = str_replace($remove . "='" . $remove . "';", '', $res);
        }
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateXbrangwolf($str, $match)
    {
        return $match[0];
    }

    private function deobfuscateObfB64($str, $matches)
    {
        $res = base64_decode($matches[3]);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateArrayOffsets($str)
    {
        $vars = [];
        preg_match('~(\$\w{1,40})\s*=\s*\'([^\']*)\';\s*(\$\w{1,40})\s*=\s*explode\s*\((chr\s*\(\s*\(\d+\-\d+\)\)),substr\s*\(\1,\s*\((\d+\-\d+)\),\s*\(\s*(\d+\-\d+)\)\)\);.+\1\s*=\s*\$\w+[+\-\*]\d+;~msi', $str, $matches);

        $find = $matches[0];
        $obfPHP = $matches[2];
        $matches[4] = Helpers::calc($matches[4]);
        $matches[5] = intval(Helpers::calc($matches[5]));
        $matches[6] = intval(Helpers::calc($matches[6]));

        $func = explode($matches[4], strtolower(substr($obfPHP, $matches[5], $matches[6])));
        $func[1] = strrev($func[1]);
        $func[2] = strrev($func[2]);

        preg_match('~\$\w{1,40}\s=\sexplode\((chr\(\(\d+\-\d+\)\)),\'([^\']+)\'\);~msi', $str, $matches);
        $matches[1] = Helpers::calc($matches[1]);
        $offsets = explode($matches[1], $matches[2]);

        $res = '';
        for ($i = 0; $i < (sizeof($offsets) / 2); $i++) {
            $res .= substr($obfPHP, $offsets[$i * 2], $offsets[($i * 2) + 1]);
        }

        preg_match('~return\s*\$\w{1,40}\((chr\(\(\d+\-\d+\)\)),(chr\(\(\d+\-\d+\)\)),\$\w{1,40}\);~msi', $str, $matches);
        $matches[1] = Helpers::calc($matches[1]);
        $matches[2] = Helpers::calc($matches[2]);

        $res = Helpers::stripsquoteslashes(str_replace($matches[1], $matches[2], $res));
        $res = "<?php\n" . $res . "?>";

        preg_match('~(\$\w{1,40})\s=\simplode\(array_map\(\"[^\"]+\",str_split\(\"(([^\"\\\\]++|\\\\.)*)\"\)\)\);(\$\w{1,40})\s=\s\$\w{1,40}\(\"\",\s\1\);\s\4\(\);~msi', $res, $matches);

        $matches[2] = stripcslashes($matches[2]);
        for ($i=0, $iMax = strlen($matches[2]); $i < $iMax; $i++) {
            $matches[2][$i] = chr(ord($matches[2][$i])-1);
        }

        $res = str_replace($matches[0], $matches[2], $res);

        preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = stripcslashes($match[2]);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]);
        }

        preg_match('~(\$\w{1,40})\s*=\s*\"\\\\x73\\\\164\\\\x72\\\\137\\\\x72\\\\145\\\\x70\\\\154\\\\x61\\\\143\\\\x65";\s(\$\w{1,40})\s=\s\'(([^\'\\\\]++|\\\\.)*)\';\seval\(\1\(\"(([^\"\\\\]++|\\\\.)*)\",\s\"(([^\"\\\\]++|\\\\.)*)\",\s\2\)\);~msi', $res, $matches);

        $matches[7] = stripcslashes($matches[7]);
        $matches[3] = Helpers::stripsquoteslashes(str_replace($matches[5], $matches[7], $matches[3]));


        $res = str_replace($matches[0], $matches[3], $res);

        preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = stripcslashes($match[2]);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]);
        }

        preg_match('~\$\w{1,40}\s=\sarray\(((\'(([^\'\\\\]++|\\\\.)*)\',?(\.(\$\w{1,40})\.)?)+)\);~msi', $res, $matches);

        foreach ($vars as $var => $value) {
            $matches[1] = str_replace("'." . $var . ".'", $value, $matches[1]);
        }

        $array2 = explode("','", substr($matches[1], 1, -1));
        preg_match('~eval\(\$\w{1,40}\(array\((((\"[^\"]\"+),?+)+)\),\s(\$\w{1,40}),\s(\$\w{1,40})\)\);~msi', $res, $matches);

        $array1 = explode('","', substr($matches[1], 1, -1));

        $temp = array_keys($vars);
        $temp = $temp[9];

        $arr = explode('|', $vars[$temp]);
        $off=0;
        $funcs=[];

        for ($i = 0, $iMax = sizeof($arr); $i < $iMax; $i++) {
            if ($i == 0) {
                $off = 0;
            } else {
                $off = $arr[$i - 1] + $off;
            }
            $len = $arr[$i];
            $temp = array_keys($vars);
            $temp = $temp[7];

            $funcs[]= substr($vars[$temp], $off, $len);
        }

        for ($i = 0; $i < 5; $i++) {
            if ($i % 2 == 0) {
                $funcs[$i] = strrev($funcs[$i]);
                $g = substr($funcs[$i], strpos($funcs[$i], "9") + 1);
                $g = stripcslashes($g);
                $v = explode(":", substr($funcs[$i], 0, strpos($funcs[$i], "9")));
                for ($j = 0, $jMax = sizeof($v); $j < $jMax; $j++) {
                    $q = explode("|", $v[$j]);
                    $g = str_replace($q[0], $q[1], $g);
                }
                $funcs[$i] = $g;
            } else {
                $h = explode("|", strrev($funcs[$i]));
                $d = explode("*", $h[0]);
                $b = $h[1];
                for ($j = 0, $jMax = sizeof($d); $j < $jMax; $j++) {
                    $b = str_replace($j, $d[$j], $b);
                }
                $funcs[$i] = $b;
            }
        }
        $temp = array_keys($vars);
        $temp = $temp[8];
        $funcs[] = str_replace('9', ' ', strrev($vars[$temp]));
        $funcs = implode("\n", $funcs);
        preg_match('~\$\w{1,40}\s=\s\'.+?eval\([^;]+;~msi', $res, $matches);
        $res = str_replace($matches[0], $funcs, $res);
        $res = stripcslashes($res);
        $res = str_replace('}//}}', '}}', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateXoredVar($str, $matches)
    {
        $res = $str;
        $find = $matches[0];
        preg_match_all('~(\$\w{1,40})\s*=\s*\'((?:\\\\.|[^\'])*)\'(?:\^\s*\'((?:\\\\.|[^\'])*)\')?;~msi', $str, $matches, PREG_SET_ORDER);
        $vars = [];
        foreach ($matches as $match) {
            $vars[$match[1]] = $match[2];
            if (isset($match[3])) {
                $vars[$match[1]] ^= $match[3];
            }
            $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*(\w+);~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = $match[2];
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'((\\\\.|[^\'])*)\'\^(\$\w+);~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[4]])) {
                $vars[$match[1]] = $match[2] ^ $vars[$match[4]];
                $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
            }
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*(\$\w+)\^\'((\\\\.|[^\'])*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[2]])) {
                $vars[$match[1]] = $match[4] ^ $vars[$match[2]];
                $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
            }
        }
        preg_match_all('~\'((\\\\.|[^\'])*)\'\^(\$\w+)~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[3]])) {
                $res = str_replace($match[0], "'" . addcslashes($match[1] ^ $vars[$match[3]], '\\\'') . "'", $res);
            }
        }
        preg_match_all('~(\$\w+)\^\'((\\\\.|[^\'])*)\'~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[1]])) {
                $res = str_replace($match[0], "'" . addcslashes($vars[$match[1]] ^ $match[2], '\\\'') . "'", $res);
            }
        }

        preg_match_all('~(\$\w+)(\.)?=(\$\w+)?(?:\'((?:\\\\.|[^\'])*)\')?\.?(\$\w+)?(?:\'((?:\\\\.|[^\'])*)\')?(?:\^(\$\w+))?(?:\.\'((?:\\\\.|[^\'])*)\')?;~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $val = '';

            //var
            if (isset($match[2]) && $match[2] !== '') {
                if (isset($vars[$match[1]])) {
                    $val .= $vars[$match[1]];
                } else {
                    continue;
                }
            }

            //var
            if (isset($match[3]) && $match[3] !== '') {
                if (isset($vars[$match[3]])) {
                    $val .= $vars[$match[3]];
                } else {
                    continue;
                }
            }

            //str
            if (isset($match[4]) && $match[4] !== '') {
                $val .= $match[4];
            }

            //var
            if (isset($match[5]) && $match[5] !== '') {
                if (isset($vars[$match[5]])) {
                    $val .= $vars[$match[5]];
                } else {
                    continue;
                }
            }

            //str
            if (isset($match[6]) && $match[6] !== '') {
                $val .= $match[6];
            }

            //var and str
            if (isset($match[7]) && $match[7] !== '') {
                if (isset($vars[$match[7]])) {
                    $additionalStr = '';
                    if (isset($match[8]) && $match[8] !== '') {
                        $additionalStr = $match[8];
                    }
                    $val ^= $vars[$match[7]] . $additionalStr;
                } else {
                    continue;
                }
            } else {
                if (isset($match[8]) && $match[8] !== '') {
                    $val .= $match[8];
                }
            }

            $vars[$match[1]] = $val;
            $res = str_replace($match[0], '', $res);
        }

        $res = preg_replace_callback('~(\$\w+)([()]|==)~msi', function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if (isset($vars[$match[1]]) && ($match[2] === ')' || $match[2] === '==')) {
                $res = "'$res'";
            }

            return $res . $match[2];
        }, $res);

        foreach ($vars as $var => $value) {
            $res = str_replace($var, $value, $res);
            $res = str_replace($value . "='" . $value . "';", '', $res);
        }
        $res = str_replace($find, $res, $str);

        if (preg_match('~((\$\w+)=\${\'(\w+)\'};)(?:.*?)((\$\w+)=\2(\[\'[^\']+\'\]);)~msi', $res, $matches)) {
            $res = str_replace($matches[1], '', $res);
            $res = str_replace($matches[4], '', $res);
            $cookieVar = sprintf('$%s%s', $matches[3], $matches[6]);
            $res = str_replace($matches[5], $cookieVar, $res);
        }

        return $res;
    }

    private function deobfuscatePhpMess($str, $matches)
    {
        $res = base64_decode(gzuncompress(base64_decode(base64_decode($matches[4]))));
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscatePregReplaceSample05($str)
    {
        $res = '';
        preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\";\s*\$\w+\s*=\s*\$\w+\(\1,\"([^\"]+)\",\"([^\"]+)\"\);\s*\$\w+\(\"[^\"]+\",\"[^\"]+\",\"\.\"\);~msi', $str, $matches);
        $res = strtr($matches[2], $matches[3], $matches[4]);
        $res = base64_decode($res);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscatePregReplaceB64($str, $matches)
    {
        $find = $matches[0];
        $res = str_replace($find, base64_decode($matches[4]), $str);
        $res = stripcslashes($res);
        preg_match('~eval\(\${\$\{"GLOBALS"\}\[\"\w+\"\]}\(\${\$\{"GLOBALS"\}\[\"\w+\"]}\(\"([^\"]+)\"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match_all('~\$(\w+)\s*(\.)?=\s*("[^"]*"|\$\w+);~msi', $res, $matches, PREG_SET_ORDER);
        $var = $matches[0][1];
        $vars = [];
        foreach ($matches as $match) {
            if($match[2]!=='.') {
                $vars[$match[1]] = substr($match[3], 1, -1);
            }
            else {
                $vars[$match[1]] .= $vars[substr($match[3], 1)];
            }
        }
        $res = str_replace("srrKePJUwrMZ", "=", $vars[$var]);
        $res = gzuncompress(base64_decode($res));
        preg_match_all('~function\s*(\w+)\(\$\w+,\$\w+\)\{.+?}\s*};\s*eval\(((\1\(\'(\w+)\',)+)\s*"([\w/\+]+)"\)\)\)\)\)\)\)\);~msi', $res, $matches);
        $decode = array_reverse(explode("',", str_replace($matches[1][0] . "('", '', $matches[2][0])));
        array_shift($decode);
        $arg = $matches[5][0];
        foreach ($decode as $val) {
            $arg = Helpers::someDecoder2($val, $arg);
        }
        $res = $arg;
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateDecoder($str)
    {
        preg_match('~if\(!function_exists\(\"(\w+)\"\)\){function \1\(.+eval\(\1\(\"([^\"]+)\"\)\);~msi', $str, $matches);
        $res = Helpers::someDecoder($matches[2]);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateGBE($str)
    {
        preg_match('~(\$\w{1,40})=\'([^\']+)\';\1=gzinflate\(base64_decode\(\1\)\);\1=str_replace\(\"__FILE__\",\"\'\$\w+\'\",\1\);eval\(\1\);~msi', $str, $matches);
        $res = str_replace($matches[0], gzinflate(base64_decode($matches[2])), $str);
        return $res;
    }

    private function deobfuscateGBZ($str, $matches)
    {
        $res = str_replace($matches[0], base64_decode(str_rot13($matches[4])), $str);
        return $res;
    }

    private function deobfuscateBitrix($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $funclist = [];
        $strlist = [];
        $res = preg_replace("|[\"']\s*\.\s*['\"]|smi", '', $res);
        $hangs = 0;
        while (preg_match('~(?:min|max|round)?\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\)~msi', $res) && $hangs < 15) {
            $res = preg_replace_callback('~(?:min|max|round)?\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\)~msi', ["Helpers","calc"], $res);
            $hangs++;
        }

        $res = preg_replace_callback(
            '|base64_decode\(["\'](.*?)["\']\)|smi',
            function ($matches) {
                return '"' . base64_decode($matches[1]) . '"';
            },
            $res
        );

        if (preg_match_all('|\$GLOBALS\[[\'"](.+?)[\'"]\]\s*=\s*Array\((.+?)\);|smi', $res, $founds, PREG_SET_ORDER)) {
            foreach ($founds as $found) {
                $varname = $found[1];
                $funclist[$varname] = explode(',', $found[2]);
                $funclist[$varname] = array_map(function ($value) {
                    return trim($value, "'\"");
                }, $funclist[$varname]);

                $res = preg_replace_callback(
                    '|\$GLOBALS\[[\'"]' . $varname . '[\'"]\]\[(\d+)\]|smi',
                    function ($matches) use ($varname, $funclist) {
                        return str_replace(['"', "'"], '', $funclist[$varname][$matches[1]]);
                    },
                    $res
                );
                $res = str_replace($found[0], '', $res);
            }
        }

        $array_temp = [];
        if (preg_match_all('~function\s*(\w{1,60})\(\$\w+\){\$\w{1,60}\s*=\s*Array\((.{1,30000}?)\);\s*return\s*base64_decode[^}]+}~msi', $res, $founds, PREG_SET_ORDER)) {
            foreach ($founds as $found) {
                $strlist = explode(',', $found[2]);
                $array_temp[$found[1]] = array_map('base64_decode', $strlist);
                $res = preg_replace_callback(
                    '|' . $found[1] . '\((\d+)\)|smi',
                    function ($matches) use ($strlist) {
                        return "'" . base64_decode($strlist[$matches[1]]) . "'";
                    },
                    $res
                );
                $res = str_replace($found[0], '', $res);
            }
        }
        $res = preg_replace('~\'\s*\.\s*\'~', '', $res);

        if (preg_match_all('~\s*function\s*(_+(.{1,60}?))\(\$[_0-9]+\)\s*\{\s*static\s*\$([_0-9]+)\s*=\s*(true|false);.{1,30000}?\$\3\s*=\s*array\((.*?)\);\s*return\s*base64_decode\(\$\3~smi', $res, $founds, PREG_SET_ORDER)) {
            foreach ($founds as $found) {
                $strlist = explode('",', $found[5]);
                $strlist = implode("',", $strlist);
                $strlist = explode("',", $strlist);
                $res = preg_replace_callback(
                    '|' . $found[1] . '\((\d+(\.\d+)?)\)|sm',
                    function ($matches) use ($strlist) {
                        $ret = base64_decode($strlist[$matches[1]]);
                        if (!$ret) {
                            $ret = $strlist[$matches[1]];
                        }
                        return  '\'' . $ret . '\'';
                    },
                    $res
                );
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateLockIt($str)
    {
        preg_match('~(\$[O0]*=__FILE__;)?\$[O0]*=urldecode\(\'[%a-f0-9]+\'\);(\$(GLOBALS\[\')?[O0]*(\'\])?=(\d+);)?\s*(\$(GLOBALS\[\')?[O0]*(\'\])?\.?=(\$(GLOBALS\[\')?[O0]*(\'\])?([\{\[]\d+[\}\]])?\.?)+;)+[^\?]+\?\>[\s\w\~\=\/\+\\\\\^\{\`\%]+~msi', $str, $matches);
        $find = $matches[0];
        $prefix = $matches[1];
        $obfPHP        = $str;
        $phpcode       = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($obfPHP)));
        $hexvalues     = Helpers::getHexValues($phpcode);
        $tmp_point     = Helpers::getHexValues($obfPHP);

        if (isset($tmp_point[0]) && $tmp_point[0]!=='') {
            $pointer1 = hexdec($tmp_point[0]);
        }
        if (isset($matches[5]) && $matches[5]!=='') {
            $pointer1 = $matches[5];
        }

        $needles       = Helpers::getNeedles($phpcode);
        if ($needles[2]=='__FILE__') {
            $needle        = $needles[0];
            $before_needle = $needles[1];
            preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $matches);
            $res = base64_decode($matches[1]);
            $phpcode = strtr($res, $needle, $before_needle);
        } else {
            $needle        = $needles[count($needles) - 2];
            $before_needle = end($needles);
            if (preg_match('~\$\w{1,40}\s*=\s*__FILE__;\s*\$\w{1,40}\s*=\s*([\da-fx]+);\s*eval\s*\(\$?\w+\s*\([\'"][^\'"]+[\'"]\)\);\s*return\s*;\s*\?>(.+)~msi', $str, $matches)) {
                $pointer1 = $matches[1];
                if (strpos($pointer1, '0x')!==false) {
                    $pointer1 = hexdec($pointer1);
                }
            }
            $temp = strtr($obfPHP, $needle, $before_needle);
            $end = 8;
            for ($i = strlen($temp) - 1; $i > strlen($temp) - 15; $i--) {
                if ($temp[$i] == '=') {
                    $end = strlen($temp) - 1 - $i;
                }
            }
            $phpcode = base64_decode(substr($temp, strlen($temp) - $pointer1 - $end, $pointer1));
        }
        $phpcode = str_replace($find, $prefix . $phpcode, $str);
        return $phpcode;
    }

    private function deobfuscateB64inHTML($str, $matches)
    {
        $obfPHP        = $str;
        $phpcode       = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($obfPHP)));
        $needles       = Helpers::getNeedles($phpcode);
        $needle        = $needles[count($needles) - 2];
        $before_needle = end($needles);
        $pointer1 = $matches[2];
        $temp = strtr($obfPHP, $needle, $before_needle);
        $end = 8;
        for ($i = strlen($temp) - 1; $i > strlen($temp) - 15; $i--) {
            if ($temp[$i] == '=') {
                $end = strlen($temp) - 1 - $i;
            }
        }

        $phpcode = base64_decode(substr($temp, strlen($temp) - $pointer1 - ($end-1), $pointer1));
        $phpcode = str_replace($matches[0], $phpcode, $str);
        return $phpcode;
    }

    private function deobfuscateStrtrFread($str, $layer2)
    {
        $str = explode('?>', $str);
        $str = end($str);
        $res = substr($str, $layer2[1], strlen($str));
        $res = base64_decode(strtr($res, $layer2[2], $layer2[3]));
        $res = str_replace($layer2[0], $res, $str);
        return $res;
    }

    private function deobfuscateStrtrBase64($str, $matches)
    {
        $str = strtr($matches[2], $matches[3], $matches[4]);
        $res = base64_decode($str);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateByteRun($str)
    {
        preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $matches);
        $res = base64_decode($matches[1]);
        $res = strtr($res, '123456aouie', 'aouie123456');
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateExplodeSubst($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        preg_match_all('~function ([\w_]+)\(~msi', $res, $funcs);
        preg_match('~(\$_\w+\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\1\[[a-fx\d]+\])\(\);~msi', $res, $matches);
        $subst_array = explode($matches[2], $matches[3]);
        $subst_var = $matches[1];
        $res = preg_replace_callback('~((\$_GET\[[O0]+\])|(\$[O0]+))\[([a-fx\d]+)\]~msi', function ($matches) use ($subst_array, $funcs) {
            if (function_exists($subst_array[hexdec($matches[4])]) || in_array($subst_array[hexdec($matches[4])], $funcs[1])) {
                return $subst_array[hexdec($matches[4])];
            } else {
                return "'" . $subst_array[hexdec($matches[4])] . "'";
            }
        }, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSubst($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $alph = stripcslashes($matches[2]);
        $funcs = $matches[4];

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[1] . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[1] . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        $var = $matches[3];

        preg_match_all('~\\' . $var . '\[\]\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $matches);

        for ($i = 0, $iMax = count($matches[1]); $i <= $iMax; $i++) {
            if (@function_exists($matches[1][$i])) {
                $res = str_replace($var . '[' . $i . ']', $matches[1][$i], $res);
            } else {
                $res = @str_replace($var . '[' . $i . ']', "'" . $matches[1][$i] . "'", $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrldecode($str)
    {
        preg_match('~(\$\w+=\'[^\']+\';\s*)+(\$[\w{1,40}]+)=(urldecode|base64_decode)?\(?[\'"]([\w+%=-]+)[\'"]\)?;(\$[\w+]+=(\$(\w+\[\')?[O_0]*(\'\])?([\{\[]\d+[\}\]])?\.?)+;)+[^\?]+(\?\>[\w\~\=\/\+]+|.+\\\\x[^;]+;)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $res = stripcslashes($res);
        if ($matches[3] == "urldecode") {
            $alph = urldecode($matches[4]);
            $res = str_replace('urldecode(\'' . $matches[4] . '\')', "'" . $alph . "'", $res);
        } elseif ($matches[3] == 'base64_decode') {
            $alph = base64_decode($matches[4]);
            $res = str_replace('base64_decode(\'' . $matches[4] . '\')', "'" . $alph . "'", $res);
        } else {
            $alph = $matches[4];
        }

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[2] . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[2] . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[2] . '{' . $i . '}.', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[2] . '{' . $i . '}', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);

        preg_match_all('~\$(\w+)\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $matches, PREG_SET_ORDER);
        for ($i = 0, $iMax = count($matches); $i < $iMax; $i++) {
            if (@function_exists($matches[$i][2])) {
                $res = str_replace('$' . $matches[$i][1], $matches[$i][2], $res);
                $res = str_replace('${"GLOBALS"}["' . $matches[$i][1] . '"]', $matches[$i][2], $res);
            } else {
                $res = str_replace('$' . $matches[$i][1], "'" . $matches[$i][2] . "'", $res);
                $res = str_replace('${"GLOBALS"}["' . $matches[$i][1] . '"]', "'" . $matches[$i][2] . "'", $res);
            }
            $res = str_replace("'" . $matches[$i][2] . "'='" . $matches[$i][2] . "';", '', $res);
            $res = str_replace($matches[$i][2] . "='" . $matches[$i][2] . "';", '', $res);
            $res = str_replace($matches[$i][2] . "=" . $matches[$i][2] . ';', '', $res);
        }
        $res = Helpers::replaceCreateFunction($res);
        preg_match('~\$([0_O]+)\s*=\s*function\s*\((\$\w+)\)\s*\{\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),(\d+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,([\d-]+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),strlen\s*\(\2\)-(\d+)\);\s*return\s*gzinflate\s*\(base64_decode\s*\(\$[O_0]+\s*\.\s*\$[O_0]+\s*\.\s*\$[O_0]+\)+;~msi', $res, $matches);
        $res = preg_replace_callback('~\$\{"GLOBALS"}\["' . $matches[1] . '"\]\s*\(\'([^\']+)\'\)~msi', function ($calls) use ($matches) {
            $temp1 = substr($calls[1], $matches[3], $matches[4]);
            $temp2 = substr($calls[1], $matches[5]);
            $temp3 = substr($calls[1], $matches[6],strlen($calls[1]) - $matches[7]);
            return "'" . gzinflate(base64_decode($temp1 . $temp3 . $temp2)) . "'";
        }, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    public function unwrapFuncs($string, $level = 0)
    {
        $close_tag = false;
        $res = '';

        if (trim($string) == '') {
            return '';
        }
        if ($level > 100) {
            return '';
        }

        if ((($string[0] == '\'') || ($string[0] == '"')) && (substr($string, 1, 2) != '?>')) {
            if($string[0] == '"' && preg_match('~\\\\x\d+~', $string)) {
                return stripcslashes($string);
            } else {
                return substr($string, 1, -2);
            }
        } elseif ($string[0] == '$') {
            preg_match('~\$\w{1,40}~', $string, $string);
            $string = $string[0];
            $matches = [];
            if (!@preg_match_all('~\\' . $string . '\s*=\s*("((.*?[^\\\\])??((\\\\\\\\)+)?+)");~msi', $this->full_source, $matches)) {
                @preg_match_all('~\\' . $string . '\s*=\s*(\'((.*?[^\\\\])??((\\\\\\\\)+)?+)\');~msi', $this->full_source, $matches);
                $str = @$matches[1][0];
            } else {
                $str = $matches[1][0];
            }
            $this->cur = str_replace($matches[0][0], '', $this->cur);
            $this->text = str_replace($matches[0][0], '', $this->text);
            return substr($str, 1, -1);
        } else {
            $pos      = strpos($string, '(');
            $function = substr($string, 0, $pos);
            $arg      = $this->unwrapFuncs(substr($string, $pos + 1), $level + 1);
            if (strpos($function, '?>') !== false) {
                $function = str_replace("'?>'.", "", $function);
                $function = str_replace('"?>".', "", $function);
                $function = str_replace("'?>' .", "", $function);
                $function = str_replace('"?>" .', "", $function);
                $close_tag = true;
            }
            $function = str_replace(['@', ' '], '', $function);
            $safe = Helpers::isSafeFunc($function);
            if ($safe) {
                if ($function === 'pack') {
                    $args = explode(',', $arg);
                    $args[0] = substr(trim($args[0]), 0, -1 );
                    $args[1] = substr(trim($args[1]), 1);
                    $res = @$function($args[0], $args[1]);
                } elseif ($function === 'str_replace') {
                    $args = explode(',', $arg);


                    $args[0] = substr(trim($args[0]), 0, -1 );
                    $args[1] = substr(trim($args[1]), 0);
                    if (trim($args[1]) === 'null') {
                        $args[1] = null;
                    }
                    $args[2] = $this->unwrapFuncs(trim($args[2])) ?? $args[2];
                    $res = @$function($args[0], $args[1], $args[2]);
                } else {
                    $res = @$function($arg);
                }
            } else {
                $res = $arg;
            }
            if ($close_tag) {
                $res = "?> " . $res;
                $close_tag = false;
            }
            return $res;
        }
    }

    private function deobfuscateEvalFunc($str)
    {
        $res = $str;
        $res = stripcslashes($res);
        preg_match('~function\s*(\w{1,40})\((\$\w{1,40})\)\s*\{\s*(\$\w{1,40})\s*=\s*\"base64_decode\";\s*(\$\w{1,40})\s*=\s*\"gzinflate\";\s*return\s*\4\(\3\(\2\)\);\s*\}\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*eval\(\1\(\"([^\"]*)\"\)\);~msi', $res, $matches);
        $res = gzinflate(base64_decode($matches[5]));
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEvalConcatFunc($str, $matches)
    {
        $res = $matches[2];

        if (str_replace('"."', '', $matches[6]) === '"create_function"') {
            $brackets = '';
            $res = preg_replace_callback('~[\w."]+\(~', function ($match) use (&$brackets) {
                $replace = strtolower(str_replace('"."', '', $match[0]));
                if (strpos($replace, 'eval') === false) {
                    $brackets .= ')';
                    return $replace;
                }
                return "";
            }, $res);

            $res .= "'$matches[4]'" . $brackets . ';';
            $res = $this->unwrapFuncs($res);
        }

        return $res;
    }

    private function deobfuscateEvalHex($str)
    {
        preg_match('~eval\s*\("(\\\\x?\d+[^"]+)"\);~msi', $str, $matches);
        $res = stripcslashes($matches[1]);
        $res = str_replace($matches[1], $res, $res);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateEvalVarConcat($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        preg_match_all('~(\$\w+)\s*\.=\s*"([^"]+)";~msi', $str, $matches, PREG_SET_ORDER);
        $vars = [];
        foreach ($matches as $match) {
            $res = str_replace($match[0], '', $res);
            $res = str_replace($match[1], '"' . $match[2] . '"', $res);
        }
        $res = preg_replace('/[\'"]\s*?\.+\s*?[\'"]/smi', '', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalVar($str, $matches)
    {
        $find = $matches[0];
        $evalVar = $matches[7];
        if (!$evalVar) {
            $evalVar = $matches[6];
            $pregVal = '\$\w+';
            $pregStr = '[\'"]?([\/\w\+=]+)[\'"]?';
            $pregFunc = '(?:base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()+(?:["\']([\/\w\+=]+)["\'])';
            while (preg_match('~str_replace\(["\']([\/\w]+)["\'],\s?["\']([\/\w\+=]+)["\'],\s?(?|(' . $pregVal . ')|(?:' . $pregStr . ')|(' . $pregFunc . '))\)~msi', $evalVar, $match)) {
                $result = $match[0];
                if (preg_match('~' . $pregVal . '~', $match[3], $arg)) {
                    $result = str_replace($match[1], $match[2], $matches[3]);
                } elseif (preg_match('~' . $pregFunc . '~', $match[3], $arg)) {
                    $unwrappedVar = $this->unwrapFuncs($arg[0]);
                    $result = str_replace($match[1], $match[2], $unwrappedVar);
                } elseif (preg_match('~' . $pregStr . '~', $match[3], $arg)) {
                    $result = str_replace($match[1], $match[2], $match[3]);
                }

                $evalVar = str_replace($match[0], "\"$result\"" . ')', $evalVar);
            }
            return $this->unwrapFuncs($matches[5] . $evalVar);
        }
        $str = str_replace('\\\'', '@@slaquote@@', $str);
        $str = str_replace('\\"', '@@sladquote@@', $str);
        $val = '';
        if (!@preg_match_all('~\\' . $evalVar . '\s*=\s*("[^"]+");~msi', $str, $matches)) {
            @preg_match_all('~\\' . $evalVar . '\s*=\s*(\'[^\']+\');~msi', $str, $matches);
            $val = @$matches[1][count($matches[1])  - 1];
        } else {
            $val = $matches[1][count($matches[1])  - 1];
        }
        $res = str_replace($matches[0], '', $str);
        $val = substr($val, 1, -1);
        $text = "'" . addcslashes(stripcslashes($val), "\\'") . "'";
        $string = preg_replace('~\\' . $evalVar . '(?=[^a-zA-Z0-9])~ms', $text, $res);
        $string = preg_replace('~\(\s*\\' . $evalVar . '~msi', '(' . $text, $string);
        $string = str_replace('@@slaquote@@', '\\\'', $string);
        $string = str_replace('@@sladquote@@', '\\"', $string);
        $res = str_replace($find, $string, $str);
        return $res;
    }

    private function deobfuscateEval($str, $matches)
    {
        $res = $str;
        if (preg_match('~(preg_replace\(["\']/\.\*?/[^"\']+["\']\s*,\s*)[^\),]+(?:[\)\\\\0-5]+;[\'"])?(,\s*["\'][^"\']*["\'])\)+;~msi', $res, $matches)) {
            $res = str_replace($matches[1], 'eval(', $res);
            $res = str_replace($matches[2], '', $res);
            return $res;
        }

        if (strpos($res, 'e\x76al') !== false
            || strpos($res, '\x29') !== false
            || strpos($res, 'base64_decode("\\x') !== false
        ) {
            $res = stripcslashes($res);
        }
        if (strpos($res, '"."') !== false) {
            $res = str_replace('"."', '', $res);
        }

        if (preg_match('~((\$\w+)\s*=\s*create_function\(\'\',\s*)[^\)]+\)+;\s*(\2\(\);)~msi', $res, $matches)) {
            $res = str_replace($matches[1], 'eval(', $res);
            $res = str_replace($matches[3], '', $res);
            return $res;
        }

        if (preg_match('~eval\s*/\*[\w\s\.:,]+\*/\s*\(~msi', $res, $matches)) {
            $res = str_replace($matches[0], 'eval(', $res);
            return $res;
        }
        preg_match('~@?(eval|echo)\s*(?:\/\*+\/)?\s*\(\s*([\'"?>.\s]+)?@?\s*\(?\s*(base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+.*?[^\'");]+((\s*\.?[\'"]([^\'";]+[\'"]*\s*)+)?\s*[\'"\);]+)+~msi', $res, $matches);
        $string = $matches[0];
        if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res)) {
            return $res;
        }
        $string = substr($string, 5, strlen($string) - 7);
        $res = $this->unwrapFuncs($string);

        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEvalCodeFunc($str, $matches)
    {
        $res = substr($str, 5, strlen($str) - 7);
        $res = $this->unwrapFuncs($res);
        $res = stripcslashes($res);
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEcho($str, $matches)
    {
        $res = $str;
        $string = $matches[0];
        if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res)) {
            return $res;
        }
        $string = substr($string, 5, strlen($string) - 7);
        $res = $this->unwrapFuncs($string);
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateFOPO($str, $matches)
    {
        $phpcode = Helpers::formatPHP($str);
        $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode)));


        if (preg_match('~eval\s*\(\s*\$[\w|]+\s*\(\s*\$[\w|]+\s*\(~msi', $phpcode)) {
            preg_match_all('~\$\w+\(\$\w+\(\$\w+\("[^"]+"\)+~msi', $phpcode, $matches2);
            @$phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(end(end($matches2))))));
            $old = '';
            $hangs = 0;
            while (($old != $phpcode) && (strlen(strstr($phpcode, 'eval($')) > 0) && $hangs < 30) {
                $old = $phpcode;
                $funcs = explode(';', $phpcode);
                if (count($funcs) == 5) {
                    $phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode)))));
                } elseif (count($funcs) == 4) {
                    $phpcode = gzinflate(base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode))));
                }
                $hangs++;
            }
            $res = str_replace($matches[0], substr($phpcode, 2), $str);
        } else {
            $res = str_replace($matches[0], $phpcode, $str);
        }

        return $res;
    }

    private function deobfuscateFakeIonCube($str, $matches)
    {
        $subst_value = 0;
        $matches[1] = Helpers::calc($matches[1]);
        $subst_value = intval($matches[1])-21;
        $code = @pack("H*", preg_replace("/[A-Z,\r,\n]/", "", substr($str, $subst_value)));
        $res = str_replace($matches[0], $code, $str);
        return $res;
    }

    private function deobfuscateCobra($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $res = preg_replace_callback(
            '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi',
            function ($matches) {
                return strrev(base64_decode($matches[1]));
            },
            $res
        );

        $res = preg_replace_callback(
            '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi',
            function ($matches) {
                return gzinflate(base64_decode($matches[1]));
            },
            $res
        );

        preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\"\;\s*\1\s*=\s*explode\(\"([^\"]+)\",\s*\s*\1\);~msi', $res, $matches);
        $var = $matches[1];
        $decrypt = base64_decode(current(explode($matches[3], $matches[2])));
        $decrypt = preg_replace_callback(
            '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi',
            function ($matches) {
                return strrev(base64_decode($matches[1]));
            },
            $decrypt
        );

        $decrypt = preg_replace_callback(
            '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi',
            function ($matches) {
                return gzinflate(base64_decode($matches[1]));
            },
            $decrypt
        );

        preg_match('~if\(\!function_exists\(\"(\w+)\"\)\)\s*\{\s*function\s*\1\(\$string\)\s*\{\s*\$string\s*=\s*base64_decode\(\$string\)\;\s*\$key\s*=\s*\"(\w+)\"\;~msi', $decrypt, $matches);

        $decrypt_func = $matches[1];
        $xor_key = $matches[2];

        $res = preg_replace_callback(
            '~\\' . $var . '\s*=\s*.*?eval\(' . $decrypt_func . '\(\"([^\"]+)\"\)\)\;\"\)\;~msi',
            function ($matches) use ($xor_key) {
                $string = base64_decode($matches[1]);
                $key = $xor_key;
                $xor = "";
                for ($i = 0, $iMax = strlen($string); $i < $iMax;) {
                    for ($j = 0, $jMax = strlen($key); $j < $jMax; $j++,$i++) {
                        if (isset($string[$i])) {
                            $xor .= $string[$i] ^ $key[$j];
                        }
                    }
                }
                return $xor;
            },
            $res
        );
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateFlamux($str, $matches)
    {
        $str = $matches[0];

        $vars = [];
        preg_match_all('~(\$\w+=[\'"]\w+[\'"];)~', $str, $match);
        foreach ($match[0] as $var) {
            $split = explode('=', str_replace(';', '', $var));
            $vars[$split[0]] = $split[1];
        }

        $res = '';
        preg_match_all('~(\$\w+=\$\w+[\'.]+\$\w+;)~', $str, $match);
        for ($i = 0, $iMax = count($match[0]); $i < $iMax; $i++) {

            $split = explode('=', str_replace(';', '', $match[0][$i]));
            $concats = explode('.', $split[1]);
            $str_to_concat = '';
            foreach ($concats as $concat) {
                $str_to_concat .= $vars[$concat] ?? '';
            }

            $vars[$split[0]] = $str_to_concat;

            if ($i === ($iMax - 1)) {
                $res = gzinflate(base64_decode(base64_decode(str_rot13($str_to_concat))));
            }
        }

        return $res;
    }

    private function deobfuscateDarkShell($str, $matches)
    {
        $str = stripcslashes($matches[0]);

        return $str;
    }

    private function deobfuscateWso($str, $matches)
    {
        $result = $matches[0];
        $contentVar = $matches[8];
        $variables = [];

        preg_match_all('~(\[([-+\(\d*\/\)]+)\])+~', $result, $mathMatches);
        foreach ($mathMatches[0] as $index => $match) {
            $search = $mathMatches[2][$index];
            $mathResult = Helpers::calculateMathStr($search);

            $result = str_replace("[$search]", "[$mathResult]", $result);
        }

        $dictionary = $matches[2];

        $variables = Helpers::getVarsFromDictionary($dictionary, $result);
        $variables[$matches[6]] = $matches[7];

        preg_match_all('~(\$\w+)\.=(\$\w+)~', $result, $matches);
        foreach ($matches as $index => $match) {
            $var = $matches[1][$index];
            $value = $matches[2][$index];
            if (!isset($variables[$var])) {
                $variables[$var] = (string)$variables[$value] ?? '';
            } else {
                $variables[$var] .= (string)$variables[$value] ?? '';
            }
        }

        if (isset($variables[$contentVar])) {
            $result = $variables[$contentVar];
        }

        if (preg_match('~(\$\w+)\s+=\s+(["\'\w\/+]+);(\$\w+)=base64_decode\(\1\);(\$\w+)=gzinflate\(\3\);eval\(\4\);~msi', $result, $match)) {
            $result = gzinflate(base64_decode($match[2]));
        }

        $result = str_replace('<?php', '', $result);

        return $result;
    }

    private function deobfuscateAnonymousFox($str, $matches)
    {
        $result = $matches[0];

        $string = $matches[7];
        $array = strlen(trim($string));
        $debuger = '';
        for ($one = 0; $one < $array; $one += 2) {
            $debuger .= pack("C", hexdec(substr($string, $one, 2)));
        }
        $string = $debuger;

        $result = $string . $matches[8] . "';";

        return $result;
    }

    private function deobfuscateBizden($str, $matches)
    {
        $result = $matches[0];
        $file_content = $matches[0];
        $vars = [
            '$OOO0000O0' => 'base64_decode',
            '$OOO000O00' => 'fopen',
            '$O0O000O00' => 'fget',
            '$O0O000O0O' => 'fgetc',
            '$O0O000O00' => 'fgets',
            '$O0O00OO00' => 'fread',
            '$OOO00000O' => 'strtr',
            '$OOO0O0O00' => $file_content,
            '$OO00O0000' => 498876,
        ];

        $eval_1 = base64_decode($matches[2]);
        preg_match_all('~(\$\w+)=\'(\w+)\'~', $eval_1, $varMatches);
        foreach ($varMatches[1] as $index => $varMatch) {
            $vars[$varMatches[1][$index]] = $varMatches[2][$index];
        }

        $result = str_replace(
            '__FILE__',
            "'" . $file_content . "'",
            base64_decode(
                strtr(
                    substr($file_content,0xc39
                             + 0x17c, 498876),
                    'EnteryouwkhRHYKNWOUTAaBbCcDdFfGgIiJjLlMmPpQqSsVvXxZz0123456789+/=',
                    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
                )
            )
        );

        foreach ($vars as $name => $value) {
            $result = str_replace($name, $value, $result);
            $result = str_replace('$GLOBALS[\''. substr($name, 1) . '\']', $value, $result);
        }

        $result = preg_replace_callback(
            '~(echo\s*)?base64_decode\(\'([\w=\+\/]+)\'\)~',
            function ($match) {
                if ($match[1] != "") {
                    return 'echo \'' . base64_decode($match[2]) . '\'';
                }
                return '\'' . str_replace('\'', '\\\'', base64_decode($match[2])) . '\'';
            },
            $result
        );

        foreach ($vars as $name => $value) {
            $result = str_replace($name, $value, $result);
            $result = str_replace('$GLOBALS[\''. substr($name, 1) . '\']', $value, $result);
        }

        $result = '<?php ' . $result;

        return $result;
    }

    private function deobfuscateWsoEval($str, $matches)
    {
        $result = base64_decode($matches[2]);

        preg_match('~data:image/png;(.*)">~im', $result, $match);
        $result = str_replace( array ('%', '#'), array ('/', '+'), $match[1]);
        $result = gzinflate(base64_decode($result));

        return $result;
    }

    private function deobfuscateAssertStr($str, $matches)
    {
        $result = $matches[1];
        $result = str_rot13($result);

        return $result;
    }

    private function deobfuscateEvalFuncFunc($str, $matches)
    {
        $result = $matches[15];
        $result = base64_decode($result);
        $result = Helpers::decrypt_T_func($result);

        return $result;
    }

    private function deobfuscateFuncVar($str, $matches)
    {
        $arg1 = str_replace($matches[5], '', $matches[3]);
        $funcName = str_replace($matches[8], '', $matches[7]);
        $insidefuncName = str_replace($matches[11], '', $matches[10]);

        if ($funcName === 'create_function') {
            $result = sprintf('%s(%s(\'%s\');', $insidefuncName, $arg1, $matches[15]);
        } else {
            $result = sprintf(
                '%s = %s(\'%s\',\'%s(%s(%s));\');%s(\'%s\');',
                $matches[14],
                $funcName,
                $matches[13],
                $insidefuncName,
                $arg1,
                $matches[13],
                $matches[14],
                $matches[15]
            );
        }

        return $result;
    }

    private function deobfuscateEchoEval($str, $matches)
    {
        $content = $matches[4];
        $content = str_replace($matches[1], $matches[2], $content);
        $result = str_replace($matches[3], $content, $matches[5]);

        return $result;
    }

    private function deobfuscateDictionaryVars($str, $matches)
    {
        $dictionary = $matches[2];
        $content = $matches[4];
        $vars = Helpers::getVarsFromDictionary($dictionary, $matches[0]);

        if (isset($vars[$matches[6]]) && $vars[$matches[6]] === 'create_function') {
            $content = str_replace($matches[5], 'eval(' . $matches[7] . ');', $content);
        }

        foreach ($vars as $key => $value) {
            $content = str_replace($key, $value, $content);
        }

        return $content;
    }

    private function deobfuscateConcatVarFunc($str, $matches)
    {
        $strVar = "";
        if ($matches['concatVar'] !== "") {
            $strVar = Helpers::concatVariableValues($matches[2], false);
        } else {
            if ($matches['strVal'] !== "") {
                $strVar = $matches['strVal'];
            }
        }

        $result = "";
        $iMax = strlen($strVar) / 2;
        for ($i = 0; $i < $iMax; $i++) {
            $result .= chr(base_convert(substr($strVar, $i * 2, 2), 16, 10));
        }
        return $result;
    }

    private function deobfuscateConcatVarFuncFunc($str, $matches)
    {
        $result = $matches[12];

        $func1 = Helpers::concatVariableValues($matches[2]);
        $func2 = Helpers::concatVariableValues($matches[22]);
        $func3 = Helpers::concatVariableValues($matches[19]);
        $func4 = Helpers::concatVariableValues($matches[7]);

        $result = sprintf('eval(%s(%s(%s(%s("%s")))));', $func1, $func2, $func3, $func4, $result);

        return $result;
    }

    private function deobfuscateEvalVarDoubled($str)
    {
        $result = $str;

        preg_match_all('~(\$\w+)\s?=\s?(\w+)\("(\w+)"\);~', $str, $varMatches);

        foreach ($varMatches[0] as $index => $varMatch) {
            $var_name = $varMatches[1][$index];
            $func_name = $varMatches[2][$index];
            $str = $varMatches[3][$index];

            if (Helpers::isSafeFunc($func_name)) {
                $str = @$func_name($str);
            }
            $result = str_replace($varMatch, '', $result);
            $result = str_replace($var_name, $str, $result);
        }

        return $result;
    }

    private function deobfuscateVarFuncsEcho($str, $matches)
    {
        $result = $str;
        $func = $matches[2];

        if (Helpers::isSafeFunc($matches[2])) {
            $result = @$func($matches[3]);
            $result = str_replace('<?php', '', $result);
        }

        return $result;
    }

    private function deobfuscateVarFuncsMany($str, $matches)
    {
        $result = $matches[0];
        $strName = $matches[1];
        $dictionaryName = $matches[4];
        $dictionaryValue = Helpers::collectStr("$matches[5]", "'");
        $vars = Helpers::getVarsFromDictionary($dictionaryValue, "$matches[6]=$matches[7]");
        $funcs = [];

        $result = str_replace("$matches[6]=$matches[7];", "", $result);

        $vars = array_merge($vars, Helpers::getVarsFromDictionary($dictionaryValue, $result));

        $result = preg_replace_callback(
            '~(\$\w+)\s?=\s?array\([\'"]([\w+\/]+)[\'"]\s?,\s?[\'"]([\w+\/]+)[\'"](?:\s?,[\'"]([\w+\/]+)[\'"]\s?)?\);\s?((?:(?:\$\w+=\s?\w+\(\$\w+,\s?)|(?:return\s?))(join\([\'"]{2},\s?\1\))\s?\)?\s?;)~msi',
            function ($match) {
                $joinedVars = join("", [$match[2], $match[3], $match[4]]);
                $replace = str_replace($match[6], "'$joinedVars'", $match[5]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~global\s(\$\w+);\s?((\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?\1\s?\.=\s?"({\3}{\5}{\7})");~',
            function ($match) {
                $concatedVars = $match[4] . $match[6] . $match[8];
                $replace = str_replace($match[2], sprintf('%s.="%s"', $match[1], $concatedVars), $match[0]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~((\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?return\s?"({\2}{\4})");~msi',
            function ($match) {
                $concatedVars = $match[3] . $match[5];
                $replace = str_replace($match[1], sprintf('return "%s"', $concatedVars), $match[0]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~(?:class\s(?<className>\w+)\s?{\s?)?(?:public\s)?function\s(?<methodName>\w+\(\)){\s?(?<codeBlock>.*?;)\s}\s?(?:}\s?)?~msi',
            function ($match) use (&$funcs, $strName, $dictionaryName, $dictionaryValue) {
                $str = "";
                $isConcat = false;

                if (preg_match(
                    '~return\s[\'"]([\w+\/+]+)[\'"];~msi',
                    $match[0],
                    $returnCode
                )) {
                    $str = $returnCode[1];
                } else {
                    if (preg_match(
                        '~global\s(\$\w+);\s?\1\s?\.=\s?["\']([\w+\/+]+)["\'];?~msi',
                        $match[0],
                        $concatCode
                    )) {
                        $str = $concatCode[2];
                        $isConcat = true;
                    } else {
                        if (preg_match(
                            '~global\s(\$' . substr(
                                $dictionaryName,
                                1
                            ) . ');\s*return\s*((?:\s?\1\[?{?\d+\]?}?\s?\.?\s?)+);?~msi',
                            $match[0],
                            $returnCode
                        )) {
                            $str = Helpers::getVarsFromDictionary(
                                $dictionaryValue,
                                sprintf('%s=%s', $dictionaryName, $returnCode[2])
                            );
                            $str = $str[$dictionaryName];
                            $isConcat = false;
                        }
                    }
                }
                $funcs[$match['methodName']]['str'] = $str;
                $funcs[$match['methodName']]['concat'] = $isConcat;

                return "";
            },
            $result
        );

        $result = preg_replace_callback(
            '~(\$[^' . substr($strName, 1) . ']\w+)\s?=\s?(\w+\(\));~ms',
            function ($match) use ($funcs, &$vars) {
                if (isset($funcs[$match[2]]) && !$funcs[$match[2]]['concat']) {
                    $vars[$match[1]] = $funcs[$match[2]]['str'];
                }
                return "";
            },
            $result
        );

        foreach ($vars as $name => $var) {
            $result = str_replace($name, $var, $result);
        }

        $result = preg_replace_callback(
            '~([\w_]+)\s?\(\s?([\w_]+)\s?\(\s?((?:\$' . substr($matches[4], 1) . '[{\[]\d+[\]}]\s?\.?)+)\s?,\s?(\d+)\s?\),\s?((?:\d+,?)+)\);~msi',
            function ($match) use ($dictionaryValue, $dictionaryName) {
                $str = Helpers::getVarsFromDictionary(
                    $dictionaryValue,
                    sprintf('%s=%s', $dictionaryName, $match[3])
                );
                $res = "";
                if (Helpers::isSafeFunc($match[2])) {
                    $res = @$match[2]($str[$dictionaryName], $match[4]);
                }

                if (Helpers::isSafeFunc($match[1])) {
                    $args = [$res];
                    $digits = explode(',', $match[5]);
                    foreach ($digits as $digit) {
                        $args[] = (int)$digit;
                    }
                    $reflectionMethod = new ReflectionFunction($match[1]);
                    $res = $reflectionMethod->invokeArgs($args);
                }
                return "\"$res\";";
            },
            $result
        );

        $strToDecode = "";

        $regexFinal = str_replace('mainVar', $strName, '~(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s*,\s?["\'](?<concat>[\w+\/]+)[\'"]\s?\)\s?;)|(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s?,\s?(?<concatFunc>\w+\(\))\)\s?;)|(?:\mainVar\s?\.?=\s?(?:\mainVar\.)?\s?["\'](?<concatStr>[\w+\/=]+)[\'"]\s?;)|(?:\mainVar\s?\.?=\s?(?<concatFuncSingle>\w+\(\))\s?;)|(\$\w+\s?=\s?new\s\w+\(\)\s?;\s?\mainVar\s?\.?=\s?\mainVar\s?\.\s?\$\w+->(?<concatFuncClass>\w+\(\)\s?))|(?:(?<func>[^,\s]\w+\(\)))~msi');

        $result = preg_replace_callback(
            $regexFinal,
            function ($match) use (&$strToDecode, $funcs) {
                if (isset($match['concat']) && $match['concat'] !== "") {
                    $strToDecode .= $match['concat'];
                    return;
                }
                if (isset($match['concatStr']) && $match['concatStr'] !== "") {
                    $strToDecode .= $match['concatStr'];
                    return;
                }
                if (isset($match['concatFunc']) && $match['concatFunc'] !== "") {
                    $strToDecode .= $funcs[$match['concatFunc']]['str'];
                    return;
                }
                if (isset($match['concatFuncSingle']) && $match['concatFuncSingle'] !== "") {
                    $strToDecode .= $funcs[$match['concatFuncSingle']]['str'];
                    return;
                }
                if (isset($match['concatFuncClass']) && $match['concatFuncClass'] !== "") {
                    $strToDecode .= $funcs[$match['concatFuncClass']]['str'];
                    return;
                }
                if (isset($match['func']) && $match['func'] !== "") {
                    $strToDecode .= $funcs[$match['func']]['str'];
                    return;
                }
            },
            $result
        );

        $code = $result;
        $result = base64_decode($strToDecode);

        if (preg_match('~((\$\w+)="";).*?((\$\w+)=create_function\(\'(\$\w+,\$\w+)\',\s?(base64_decode\(((?:"[\w+=]+"\.?)+)\))\);).*?(\$\w+\s?=\s?create_function\("",\s?\4\(base64_decode\(\2\),\s?(\$_COOKIE\[\'\w+\'\])\)\s?\);)~msi',
            $code, $codeMatch)) {
            $initialCode = base64_decode(Helpers::collectStr($codeMatch[7]));

            $result = sprintf("function %s(%s){%s}%s='%s';%s(%s,%s);",
                substr($codeMatch[4], 1), $codeMatch[5], $initialCode, $codeMatch[2], $result,
                substr($codeMatch[4], 1), $codeMatch[2], $codeMatch[9]);
        }

        return $result;
    }

    private function deobfuscateGlobalArrayEval($str, $matches)
    {
        $result = str_replace($matches[1], "", $str);

        $dictionary = stripcslashes($matches[3]);
        $dictionaryVar = stripcslashes($matches[2]);
        $dictionaryVar = str_replace('{"GLOBALS"}', 'GLOBALS', $dictionaryVar);

        $result = Helpers::replaceVarsFromDictionary($dictionaryVar, $dictionary, $result);

        preg_match_all('~(\$GLOBALS\[[\'\w]+\])\s?=\s?[\'"]?([\w\-\_\$]+)["\']?;\s?~msi', $result, $varMatch);

        foreach ($varMatch[1] as $index => $var) {
            $result = str_replace($varMatch[0][$index], "", $result);
            $result = str_replace($varMatch[1][$index], $varMatch[2][$index], $result);
        }

        return $result;
    }

    private function deobfuscateTinkleShell($str, $matches)
    {
        $result = $str;
        $dictionaryStr = $matches[2];
        $decodeKey = Helpers::getDecryptKeyForTinkleShell(strlen($str));
        $vars = [
            $matches[4] => $matches[5],
        ];

        $result = str_replace(' ', '', $result);
        $matches[3] = str_replace(' ', '', $matches[3]);

        preg_match_all('~(\$\w+)=(?:\$\w+\[\'\w\'\+\d+\+\'\w\'\]\.?)+;~msi', $matches[3], $matchVars);
        foreach ($matchVars[0] as $index => $match) {
            preg_match_all('~\$\w+\[\'\w\'\+(\d+)\+\'\w\'\]\.?~msi', $match, $values);
            foreach ($values[1] as $value) {
                if (!isset($vars[$matchVars[1][$index]])) {
                    $vars[$matchVars[1][$index]] = $dictionaryStr[$value] ?? $value;
                } else {
                    $vars[$matchVars[1][$index]] .= $dictionaryStr[$value] ?? $value;
                }
            }
        }

        $result = str_replace($matches[3], "", $result);

        preg_match_all('~(\$\w+)=(\$\w+)\((\$\w+),(\$\w+)\(""\),"([\w\+]+)"\);~msi', $result, $matchVars);
        foreach ($matchVars[1] as $index => $varName) {
            $func = $vars[$matchVars[2][$index]] ?? $matchVars[2][$index];
            $arg1 = $vars[$matchVars[3][$index]] ?? $matchVars[3][$index];
            $arg2 = $vars[$matchVars[4][$index]] ?? $matchVars[4][$index];
            $argStr = $matchVars[5][$index];

            if (Helpers::isSafeFunc($func)) {
                $value = @$func($arg1, $arg2 === 'trim' ? "" : $arg2, $argStr);

                $vars[$varName] = $value;
            }
            $result = str_replace($matchVars[0][$index], '', $result);
        }

        $func = $vars[$matches[10]] ?? '';
        if (Helpers::isSafeFunc($func)) {
            $result = @$func($matches[11], $vars[$matches[12]] ?? "", $decodeKey);
        }
        $func = $vars[$matches[7]] ?? '';
        if (Helpers::isSafeFunc($func)) {
            $result = @$func($vars[$matches[8]] ?? '', "", $result);
        }
        $func = $vars[$matches[6]] ?? '';
        if (Helpers::isSafeFunc($func)) {
            $result = @$func($result);
        }

        return $result;
    }

    private function deobfuscateWsoFunc($str, $matches)
    {
        if (isset($matches['str'])) {
            return gzinflate(base64_decode($matches['str']));
        }

        return $matches[0];
    }

    private function deobfuscateEvalWanFunc($str, $matches)
    {
        $result = gzinflate(base64_decode($matches[5]));

        for ($i = 0; $i < strlen($result); $i++) {
            $result[$i] = chr(ord($result[$i]) - (int)$matches[4]);
        }

        return $result;
    }

    private function deobfuscateFuncFile($str, $matches)
    {
        $result = base64_decode($matches[4]);

        return $result;
    }

    private function deobfuscateGulf($str, $matches)
    {
        $result = str_replace("'.'", '', str_replace($matches[2], '', $matches[1]));

        $vars = Helpers::collectVars($matches[2], "'");
        $result = Helpers::replaceVarsFromArray($vars, $result);

        $tempCode = gzinflate(base64_decode($matches[4]));

        $result .= PHP_EOL . $tempCode;

        return $result;
    }

    private function deobfuscateEvalConcatAsciiChars($str, $matches)
    {
        $result = '';

        $num = (int)$matches[2];
        $str = (string)$matches[3];
        $len = strlen($str);

        for ($i = 0; $i < $len; $i++) {
            $result .= chr(ord($str[$i]) ^ $num);
        }

        $result = str_replace(['<?php', '?>', '', ''], '', $result);

        return $result;
    }

    private function deobfuscateEvalPost($str, $matches)
    {
        $result = '';

        $vars = Helpers::collectVars($str);

        $result = str_replace('.', "", $matches[8]);
        $result = str_replace($matches[7], "", Helpers::replaceVarsFromArray($vars, $result));
        $result = base64_decode(base64_decode($result));

        return $result;
    }

    private function deobfuscateEvalPregStr($str, $matches)
    {
        $result = sprintf("%s'%s'%s", stripcslashes($matches[1]), $matches[2], stripcslashes($matches[3]));

        $result = $this->unwrapFuncs($result);

        return $result;
    }

    private function deobfuscateClassDestructFunc($str, $matches)
    {
        $result = $str;

        $arg1 = $matches[1] ^ stripcslashes($matches[2]);
        $arg2 = $matches[3] ^ stripcslashes($matches[4]);

        if ($arg1 === 'assert' && $arg2 === 'eval') {
            $result = base64_decode($matches[5]);
        }

        return $result;
    }

    private function deobfuscateCreateFuncEval($str, $matches)
    {
        $result = $str;

        $func = stripcslashes($matches[1]);

        if (Helpers::isSafeFunc($func)) {
            $result = @$func($matches[2]);
        }

        return $result;
    }

    private function deobfuscateEvalCreateFunc($str, $matches)
    {
        $result = $str;

        $arr = [
            0 => $matches[4],
            1 => $matches[5],
            2 => $matches[6],
            3 => $matches[13],
        ];

        $func_1 = Helpers::decodeEvalCreateFunc_1($arr);
        if (strtoupper($func_1) === 'CREATE_FUNCTION') {
            $arr[3] = $matches[10];

            $result = Helpers::decodeEvalCreateFunc_1($arr);

            $result = preg_replace_callback('~base64_decode\([\'"]([\w=]+)[\'"]\)~msi', function ($match) {
                $extraCode = $this->unwrapFuncs($match[0]);

                if (preg_match('~if\(!function_exists\([\'"](\w+)[\'"]\)\){function\s?\1\((\$\w+)\){(\$\w+)=array\(\'([{\w\]]+)\',\'([\w`]+)\',\2\);for\((\$\w+)=0;\6<3;\6\+\+\){for\((\$\w+)=0;\7<strlen\(\3\[\6\]\);\7\+\+\)\s?\3\[\6\]\[\7\]\s?=\s?chr\(ord\(\3\[\6\]\[\7\]\)-1\);if\(\6==1\)\s?\3\[2\]=\3\[0\]\(\3\[1\]\(\3\[2\]\)\);}\s?return\s?\3\[2\];}(\$\w+)=["\']([\w\+\/=]+)["\'];(\$\w+)=[\'"]\1[\'"];(\$\w+)=\10\([\'"]([\w=]+)[\'"]\);\$\w+=\11\(\'\',\10\(\8\)\);\$\w+\(\);}~msi', $extraCode, $matchCode)) {
                    $arr = [
                        0 => $matchCode[4],
                        1 => $matchCode[5],
                        2 => $matchCode[12],
                    ];

                    $func_1 = Helpers::decodeEvalCreateFunc_2($arr);
                    if (strtoupper($func_1) === 'CREATE_FUNCTION') {
                        $arr[2] = $matchCode[9];

                        $extraCode = str_replace($matchCode[0], Helpers::decodeEvalCreateFunc_2($arr), $extraCode);
                    }
                }
                return $extraCode;
            }, $result);
        }

        return $result;
    }

    private function deobfuscateEvalFuncVars($str, $matches)
    {
        $result = $str;

        $vars = Helpers::collectFuncVars($matches[1]);

        $result = Helpers::replaceVarsFromArray($vars, $matches[2]);

        return $result;
    }

    private function deobfuscateDictionaryCreateFuncs($str, $matches)
    {
        $delimiter = '||||';
        $result = $str;
        $vars = Helpers::getVarsFromDictionary($matches[3], $matches[4]);
        $result = $matches[7].$delimiter.$matches[8];

        $result = preg_replace_callback('~\${"[\\\\\w]+"}\["[\\\\\w]+"\]~msi', function ($match) {
            return stripcslashes($match[0]);
        }, $result);

        $result = preg_replace_callback('~\${"GLOBALS"}\["(\w+)"\]~msi', function ($match) use ($vars) {
            $varName = '$' . $match[1];

            return $vars[$varName] ?? $varName;
        }, $result);

        $string = $matches[9];
        $str1 = substr($string, 0, 5);
        $str2 = substr($string, 7, strlen($string) - 14);
        $str3 = substr($string, -5);
        $decodedStr = gzinflate(base64_decode($str1 . $str2 . $str3));

        $delimCode = explode($delimiter, $result);

        $result = str_replace($matches[6], sprintf("'%s'.(%s)", $decodedStr, stripslashes($delimCode[1])), $delimCode[0]);

        $result = $matches[5] . $result;

        return $result;
    }

    private function deobfuscateEvalPostDictionary($str, $matches)
    {
        $finalCode = $matches[19];
        $result = str_replace($finalCode, '', $str);
        $arrayNum = [];
        $arrayStr = [];

        $regex = '~"?([\w\.\/\s]+)"?,?\s?~msi';
        preg_match_all($regex, $matches[6], $arrayStrMatches);
        foreach ($arrayStrMatches[1] as $arrayStrMatch) {
            $arrayStr[] = $arrayStrMatch;
        }

        $result = Helpers::replaceVarsFromDictionary($matches[5], $arrayStr, $result);
        $vars = Helpers::collectVars($result, "'");

        $regexSpecialVars = '~(\$\w+)([()\]])~msi';
        $code1 = preg_replace_callback($regexSpecialVars, function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if ($match[2] === ']' || $match[2] === ')') {
                $res = "'$res'";
            }
            return $res . $match[2];
        }, $matches[20]);

        $code2 = str_replace($matches[18], '$_POST[\'' . ($vars[$matches[18]] ?? $matches[18]) . '\']', $matches[21]);
        $code2 = Helpers::replaceVarsFromArray($vars, $code2);

        $tempStr = Helpers::replaceVarsFromDictionary($matches[5], $arrayStr, $matches[22]);
        $vars = Helpers::collectVars($tempStr, "'");

        $code3 = Helpers::replaceVarsFromArray($vars, $matches[23]);
        $code3 = preg_replace_callback($regexSpecialVars, function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if ($match[2] === ']' || $match[2] === ')') {
                $res = "'$res'";
            }
            return $res . $match[2];
        }, $matches[23]);

        $result = $code1 . $code2 . $code3;

        return $result;
    }

    private function deobfuscateDropInclude($str, $matches)
    {
        $key = basename($matches[2]);
        $encrypted = base64_decode(base64_decode($matches[4]));
        return $this->deobfuscateXorFName($encrypted, null, $key);
    }

    private function deobfuscateEvalComments($str, $matches)
    {
        return preg_replace('~/\*[^/]*/?\*/~msi', '', $str);
    }

    private function deobfuscateStrrevUrldecodeEval($str, $matches)
    {
        return strrev(urldecode($matches[2]));
    }

    private function deobfuscateEvalPackStrrot($str, $matches)
    {
        return pack("H*", str_rot13($matches[3]));
    }

    private function deobfuscateUrlDecodeTable($str, $matches)
    {
        $matches[3] = str_replace([" ", "\r", "\n", "\t", "'.'"], '', $matches[3]);
        $matches[5] = str_replace([" ", "'", ">"], '', $matches[5]);
        $temp = explode(',', $matches[5]);
        $array = [];
        foreach ($temp as $value) {
            $temp = explode("=", $value);
            $array[$temp[0]] = $temp[1];
        }
        $res = '';
        for ($i=0, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
            $res .= isset($array[$matches[3][$i]]) ? $array[$matches[3][$i]] : $matches[3][$i];
        }
        $res = substr(rawurldecode($res), 1, -2);
        return $res;
    }

    private function deobfuscateEvalVarChar($str, $matches)
    {
        $chars = Helpers::collectVarsChars($matches[1]);
        $vars = Helpers::assembleStrings($chars, $matches[2]);
        $str = str_replace($matches[1], '', $str);
        $str = str_replace($matches[2], '', $str);
        foreach ($vars as $var => $func) {
            $str = str_replace($var, $func, $str);
        }
        return $str;
    }

    private function deobfuscateEvalVarFunc($str, $matches)
    {
        $var = Helpers::collectFuncVars($matches[1]);
        return $var[$matches[4]];
    }

    private function deobfuscateEvalVarsFuncs($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);
        $vars[$matches[5]] = $matches[2];
        $res = Helpers::replaceVarsFromArray($vars, $matches[3]);
        return $res;
    }

    private function deobfuscateEvalFileContent($str, $matches)
    {
        $res = $matches[4];
        $vars = Helpers::getVarsFromDictionary($matches[2], $matches[3]);
        $vars[$matches[1]] = $matches[2];
        $res = Helpers::replaceVarsFromArray($vars, $res);
        if (preg_match('~\$[^=]{0,50}=file\(str_replace\(\'\\\\{2}\',\'/\',__FILE__\)\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);\$[^=]{0,50}=implode\(\'\',\$[^)]{0,50}\)\.substr\(\$[^,]{0,50},0,strrpos\(\$[^,]{0,50},\'@ev\'\)\);\$[^=]{0,50}=md5\(\$[^)]{0,50}\);(?:\$[^=]{0,50}=){0,3}NULL;@eval\(base64_decode\(str_replace\(\$[^,]{0,50},\'\',strtr\(\'~msi',
            $res, $match)) {
            $arr = explode(PHP_EOL, $str);
            foreach ($arr as $index => $val) {
                if ($index !== count($arr) - 1) {
                    $arr[$index] .= PHP_EOL;
                }
            }

            $arr1 = array_pop($arr);
            $arr2 = array_pop($arr);

            $vars[$match[1]] = $arr1;
            $vars[$match[2]] = $arr2;

            $res = implode('', $arr) . substr($arr2, 0, strrpos($arr2, '@ev'));
            $md5 = md5($res);
            $res = base64_decode(str_replace($md5, '', strtr($matches[5], $matches[6], $matches[7])));


            if (preg_match('~eval\((?:\$[^(]{0,50}\(){2}\$[^,]{0,50},\s{0,10}\'([^\']{1,500})\',\s{0,10}\'([^\']{1,500})\'\){3};~msi',
                $res, $match)) {
                $res = Helpers::replaceVarsFromArray($vars, $res);
                if (preg_match('~eval\(base64_decode\(strtr\(~msi', $res)) {
                    $res = base64_decode(strtr($arr1, $match[1], $match[2]));
                    $res = '<?php ' . PHP_EOL . $res;
                }
            }
        }

        return $res;
    }

    private function deobfuscateEvalArrayVar($str, $matches)
    {
        $result = $str;

        $array1 = str_split($matches[2]);
        $array2 = [];
        $arrayStr = base64_decode($matches[1]);

        if (preg_match('~(\$\w+)=\[(["\'][\w\[\];\'"|,.{}+=/&][\'"]=>["\'][\w\[\];\'"|,.{}+=/&][\'"],?\s{0,50})+\];~msi',
            $arrayStr, $match)) {
            preg_match_all('~["\']([\w\[\];\'"|,.{}+=/&])[\'"]=>["\']([\w\[\];\'"|,.{}+=/&])[\'"]~msi', $match[0],
                $arrayMatches);

            foreach ($arrayMatches[1] as $index => $arrayMatch) {
                $array2[$arrayMatches[1][$index]] = $arrayMatches[2][$index];
            }

            $newStr = "";
            foreach ($array1 as $xx) {
                foreach ($array2 as $main => $val) {
                    if ($xx == (string)$val) {
                        $newStr .= $main;
                        break;
                    }
                }
            }

            $result = gzinflate(base64_decode($newStr));
        }

        return $result;
    }

    private function deobfuscateEvalConcatedVars($str, $matches)
    {
        $iter = [2 => $matches[2], 4 => $matches[4], 6 => $matches[6], 12 => $matches[12]];
        foreach ($iter as $index => $item) {
            $matches[$index] = preg_replace_callback('~chr\((\d+)\)~msi', function ($match) use (&$matches) {
                return '\'' . chr($match[1]) . '\'';
            }, $matches[$index]);

            $matches[$index] = Helpers::concatStr($matches[$index]);
            $matches[$index] = base64_decode($matches[$index]);
        }

        $result = str_replace($matches[1], $matches[2], $matches[7]);
        $result = str_replace($matches[8], 0, $result);
        $result = str_replace($matches[10], 0, $result);

        if (Helpers::isSafeFunc($matches[4])) {
            $code = @$matches[4]($matches[6]);
            $code = gzinflate(str_rot13($code));
        } else {
            $code = 'gzinflate(str_rot13(\'' . $matches[4] . '\')));';
        }

        $result .= $matches[12] . $code;

        return $result;
    }

    /*************************************************************************************************************/
    /*                                          JS deobfuscators                                                 */
    /*************************************************************************************************************/

    private function deobfuscateJS_fromCharCode($str, $matches)
    {
        $result = '';
        $chars = explode(',', $matches[1]);
        foreach ($chars as $char) {
            $result .= chr((int)trim($char));
        }
        return $result;
    }

}


/**
 * Class Factory.
 */
class Factory
{
    /**
     * @var Factory
     */
    private static $instance;
    /**
     * @var array
     */
    private static $config;

    /**
     * Factory constructor.
     *
     * @throws Exception
     */
    private function __construct()
    {

    }

    /**
     * Instantiate and return a factory.
     *
     * @return Factory
     * @throws Exception
     */
    public static function instance()
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    /**
     * Configure a factory.
     *
     * This method can be called only once.
     *
     * @param array $config
     * @throws Exception
     */
    public static function configure($config = [])
    {
        if (self::isConfigured()) {
            throw new Exception('The Factory::configure() method can be called only once.');
        }

        self::$config = $config;
    }

    /**
     * Return whether a factory is configured or not.
     *
     * @return bool
     */
    public static function isConfigured()
    {
        return self::$config !== null;
    }

    /**
     * Creates and returns an instance of a particular class.
     *
     * @param string $class
     *
     * @param array $constructorArgs
     * @return mixed
     * @throws Exception
     */
    public function create($class, $constructorArgs = [])
    {
        if (!isset(self::$config[$class])) {
            throw new Exception("The factory is not contains configuration for '{$class}'.");
        }

        if (is_callable(self::$config[$class])) {
            return call_user_func(self::$config[$class], $constructorArgs);
        } else {
            return new self::$config[$class](...$constructorArgs);
        }
    }
}


class Template
{
    protected $html;
    protected $variables = [];

    /**
     * Template constructor.
     *
     * @param string $html
     */
    public function __construct($html)
    {
        $this->html = $html;
    }

    /**
     * @param $html
     *
     * @return Template
     */
    public static function create($html)
    {
        return new static($html);
    }

    /**
     * @param $key
     * @param $value
     */
    public function set($key, $value)
    {
        $this->variables[$key] = $value;
    }

    /**
     * @return string
     */
    public function render()
    {
        if (!empty($this->variables)) {
            foreach ($this->variables as $key => $value) {
                $this->html = str_replace("@@$key@@", $value, $this->html);
            }
        }

        return $this->html;
    }
}

class Translate
{
    const LANG_EN = 'EN';
    const LANG_RU = 'RU';

    /**
     * @var string
     */
    private static $lang = self::LANG_EN;

    /**
     * @param $lang
     */
    public static function setLang($lang)
    {
        self::$lang = $lang;
    }

    /**
     * @param string      $key
     * @param null|array  $params
     *
     * @param null|string $language
     *
     * @return string
     */
    public static function getStr($key, $params = null, $language = null)
    {
        if ($language && in_array($language, [self::LANG_RU, self::LANG_EN])) {
            $lang = $language;
        } else {
            $lang = self::$lang;
        }

        $result = ($lang === self::LANG_RU) ? TranslateList::RU[$key] : TranslateList::EN[$key];
        if ($params && is_array($params) && !empty($params)) {
            return vsprintf($result, $params);
        }

        return $result;
    }
}

